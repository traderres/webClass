How to Parse Command Line Args in Bash
--------------------------------------
This is a surprisingly difficult task.

Approach:
 1) Create a method that sets global vars
 2) Requires users to specify -u  *OR*  --username value



Sample Bash Script
------------------
#!/bin/bash
################################################################################
# Filename:  addAccount.sh
################################################################################
# Purpose:
#   Add an Account
#
# Design
#   1. Verify command line arguments
#   2. Create the account
#
# Usage:
#   A. ssh to the puppet master
#      unix> chmod u+x ./addAccount.sh               # Make the script executable
#      unix> ./addAccount.sh --username "john.smith.12345" --csv-roles "Role1,Role2,Role3"
#      unix> ./addAccount.sh -u "john.smith.12345" -r "Role1,Role2,Role3"
################################################################################

readonly SCRIPT_NAME=$(basename $0)                   # Holds the name of this bash script
readonly TMP_DIR_PATH=/tmp/${SCRIPT_NAME}.$$

ROOT_CA_FILEPATH=/home/ec2-user/addAccount/root-ca   # Holds the path of the root-ca
NEW_USER_USERNAME=""
NEW_USER_CSV_ROLES=""



#######################################################
# main()
#
#######################################################
function main()
{
  # S C R I P T        S T A R T S       H E R E
  echo "${SCRIPT_NAME} started as of `date`"

  # Part 1:  Process the file
  verifyCommandLineArguments

  # Part 2:  Create the client user and generate a p12
  addClientCertToRootCa

  # S C R I P T         E N D S        H E R E
  echo -e "\n${SCRIPT_NAME} finished successfully as of `date`"
  exit 0
}


#######################################################
# verifyCommandLineArguments()
#
# Examine the command line arguments
# Verify that the command line arguments are valid
# If valid, set the global vars
#######################################################
function verifyCommandLineArguments()
{

   if [[ -z "$NEW_USER_USERNAME" ]]; then
      echo "I did not find the user name.  Please specify --username \"john.smith\" or -u \"john.smith\" "
      exit 1;
   fi

   if [[ -z "$NEW_USER_CSV_ROLES" ]]; then
     echo "I did not find any roles.  Please specify --csv-roles \"role1, role2, role3\" or -r \"role1, role2, role3\" "
     exit 1
   fi


   echo -e "Command line arguments were successfully parsed:"
   echo -e "\tNEW_USER_USERNAME  = ${NEW_USER_USERNAME}"
   echo -e "\tNEW_USER_CSV_ROLES = ${NEW_USER_CSV_ROLES}"
}



#######################################################
# Add the client cert to the root-ca
#
#######################################################
function addClientCertToRootCa()
{
  echo -e "addClientCertToRootCa() started\n";

  mkdir -p $TMP_DIR_PATH;

  if [ $? -ne 0 ]; then
     # The last command had a problem.
     echo -e "\nFailed to create this directory: ${TMP_DIR_PATH}"
     exit 1
  fi


}

#######################################################
# cleanup()
#
# This method is always called before the script ends
#######################################################
function cleanup()
{
   # Delete the tmp directory
   rm -rf $TMP_DIR_PATH;
}


# Tell bash to call cleanup() when the program ends
# NOTE:  Whether the program crashes or succeeds, this method is the last method called
trap cleanup EXIT


# Parse Command Line Arguments  (this cannot be done inside a function unless you use getopts)
while [[ $# -gt 0 ]]; do
    case $1 in
      -u|--username)
        NEW_USER_USERNAME="$2"
        shift # past argument
        shift # past value
        ;;
      -r|--csv-roles)
        NEW_USER_CSV_ROLES="$2"
        shift # past argument
        shift # past value
        ;;
      -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
      esac
 done


# Run the main() function
main

