Thoughts on Reactive Forms
--------------------------



How to Add a Reactive Form
--------------------------
1. Inject the formBuilder service

		constructor(private formBuilder: FormBuilder)    {  }


2. Create a class variable  called myForm
		public myForm: FormGroup


3. Use the formBuilder to initialize myForm

		public ngOnInit(): void {

			// Initialize the myForm object
			this.myForm = this.formBuilder.group({
					orderType:  [null, null],
					limitPrice: [null, null],
					quantity:   [null, null],
					myTextbox:  [null, null],
					myDropdown: [null, null]

			});

		}



4. Add <form> tag to your HTML
	-- This is what binds the myForm class variable to your HTML

		<form [formGroup]="this.myForm" novalidate autocomplete="off">




		</form>





5. Bind controls to the formGroup object (myForm)

		<mat-select   formControlName="orderType">



6. Use a <pre> to display info in real time

	<pre>
		this.myForm.controls.orderType.value  = {{ this.myForm.controls.orderType.value  }}
		this.myForm.controls.limitPrice.value = {{ this.myForm.controls.limitPrice.value  }}
		this.myForm.controls.quantity.value   = {{ this.myForm.controls.quantity.value  }}
	</pre>










Characteristics
---------------
-- You have a form group object that can watch/set lots of form controls

-- You get two-way-binding built-in on *ALL* form controls that you define

   Changing the form field                                   --->  this.myForm.controls.FORM_FIELD_NAME.value
   this.myForm.controls.FORM_FIELD_NAME.setValue('hi mom");   ---> Form field is updated in real-time




Advantages
----------
+ The formGroup object (myForm) Has built-in methods to do things -- like reset() and markAllAsTouched()
+ Easy to get the values of the form fields
		this.myForm.controls.FORM_FIELD_NAME.value

+ Easy to set the values of the form fields
		this.myForm.controls.FORM_FIELD_NAME.setValue('hi mom");

+ Eacy to watch for changes to a form field
		this.myForm.controls.FORM_FIELD_NAME.valueChanges.subscribe( (aNewValue: string) => {
			// The user entered a new change

		} );


+ Keeps the HTML simple / Puts the logic in the TypeScript
+ Easy to add one more form field to it

+ Supports synchronous and asynchronous validators
  We can validate form fields in-real-time based on code we want
  We can write our own CUSTOM validators that can be called synchronously or asynchronously (via rest call)

+ We have built in properties in the myForm object

		this.myForm.valid == true          # Every form field is valid
		this.myForm.valid == false         # 1 or more form fields is INVALID

				<!-- We want to disable the submit button if any form fields are INVALID -->
				<!-- Enable the submit button when the user enters everything PERFECTLY  -->
				<button [disabled]="this.myForm.valid == false">Submit</button


		this.myForm.controls.FORM_FIELD_NAME.touched  == true        # The user has entered and left this form field
		this.myForm.controls.FORM_FIELD_NAME.pristine == true        # Pristine -- the user has never entered this field



Disadvantages
-------------
1. COMPLEX:  Lot of steps to setup / easy to mess up

	Template-based approach

					TypeScript               +                HTML
	   --------------------------------------+----------------------------------------------------------
		public myTextboxValue: string;       |    <input type="text" [(model)]="this.myTextboxValue" />


- Need to use the formBuilder to initialize the object
- Need to bind form fields to the myForm

		<input type="text" formControlName="FORM_FIELD_NAME"  />


2. Easy to screw up:  misspell the field in formControlName and it doesn't work

3. You can only access this.myForm *INSIDE* the <form>...</form>

4. Validators can be confusing



