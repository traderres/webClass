Exercise 14b / Advanced Stock Trade / Enter a symbol and Pressing "Quote" button loads data (Answers)
-----------------------------------------------------------------------------------------------------
We're going to simulate a REST call that loads data upon pressing click

Key Lesson:
 + The Async Pipe is *LISTENING* for changes
   So, if you change the observable, then the HTML is automatically refreshed



Business Rules:
 A) If the user selects "Limit Order", then the "Limit Price Textbox appears
 B) If the user enters a symbol in the textbox and presses the "Quote" button, then show info about that stock/mutual fund



		+------------------------------------------------------------------------------------+
		| <Symbol-Textbox> <Quote Btn> |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		+------------------------------+-----------------------------------------------------+

		+------------------------------------------------------------------------------------+
		| <Symbol-Textbox> <Quote Btn> | VANGUARD S&P 500 ETF              as of  2:19:44 pm |
		|                              | ----------------------------------------------------+
		|                              | Price:        $487.00 | Prev Close:          501.00 |
		|                              | Volume:       123,456 | Day Range:  495.00 - 505.79 |
		+------------------------------+-----------------------------------------------------+


Assumptions:
-----------
You have a REST call that when passed-in a stock symbol return a DTO with quote information GetQuoteDetailsDTO


Exercise
--------
 1. Create a frontend DTO:  GetQuoteDetailsDTO
 	a. Create a frontend DTO:  GetQuoteDetailsDTO

 	b. Add these fields:
 			isSymbolValid   / holds either true or false
 			businessName    / Text Field
 			asOfDate        / Text Field
 			currentPrice    / Numeric Field
 			previousClose   / Numeric Field
 			volume          / Numeric Field
 			lowestDayRange  / Numeric Field
 			highestDayRange / Numeric Field


			export class GetQuoteDetailsDTO {
			  public isSymbolValid: boolean;
			  public businessName: string;
			  public asOfDate: string;
			  public currentPrice: number;
			  public previousClose: number;
			  public volume: number;
			  public lowestDayRange: number;
			  public highestDayRange: number;
			}


 2. Create a frontend service:  QuoteService
	a. Create the frontend service:  QuoteService

 	b. Add a public method:    getQuote()
 		-- Pass-in a symbol
 		-- Create a DTO that holds fake data  (using the business rules below)
 		-- Convert the DTO into an observable
 		-- Return the observable

		if the passed-in symbol is null or an empty string
			isSymbolValue 	should hold FALSE


 		If the passed-in symbol holds "BRKB", then return this info

 				isSymbolValue 	should hold TRUE
 				businessName 	should hold "Berkshire Hathaway B"
 				asOfDate 		should hold "10:18:44 am"
 				currentPrice    should hold 411.79
 				volume   		should hold 306599
				previousClose 	should hold 409.92
				lowestDayRange 	should hold 408.60
				highestDayRange should hold 411.79

 					     +------------------------------------------------------+
 						 |	Berkshire Hathaway B              as of 10:18:44 am |
 					     +------------------------------------------------------+
 		                 | Price:        $411.79 | Prev Close:           409.92 |
 		                 | Volume:       306,599 | Day Range:   408.60 - 411.79 |
 		                 -------------------------------------------------------+


 		If the passed-in symbol holds "VOO", then return this info

 					     +------------------------------------------------------+
 						 | Vanguard S&P 500 ETF               as of 10:18:46 am |
 					     +------------------------------------------------------+
 		                 | Price:        $490.05 | Prev Close:           489.82 |
 		                 | Volume      5,830,964 | Day Range:  485.120 - 502.53 |
 		                 -------------------------------------------------------+

 				isSymbolValue 	should hold TRUE
 				businessName 	should hold "Vanguard S&P 500 ETF"
 				asOfDate 		should hold "10:18:46 am"
 				currentPrice    should hold 490.05
 				volume   		should hold 5830964
				previousClose 	should hold 489.82
				lowestDayRange 	should hold 485.120
				highestDayRange should hold 502.53

		Otherwise
				isSymbolValue 	should hold FALSE



		 public getQuote(aSymbol: string): Observable<GetQuoteDetailsDTO> {

			let dto: GetQuoteDetailsDTO = new GetQuoteDetailsDTO();

			if (!aSymbol) {
			  // Pass-in symbol is null or empty
			  dto.isSymbolValid = false;
			  return of(dto);
			}


			if (aSymbol.toUpperCase() == 'BRKB') {
			  dto.isSymbolValid   = true;
			  dto.businessName    = "Berkshire Hathaway B";
			  dto.asOfDate        = "10:18:44 am";
			  dto.currentPrice    = 411.79;
			  dto.volume          = 306599;
			  dto.previousClose   = 409.92;
			  dto.lowestDayRange  = 408.60;
			  dto.highestDayRange = 411.79;
			  return of(dto);
			}

			if (aSymbol.toUpperCase() == 'VOO') {
			  dto.isSymbolValid   = true;
			  dto.businessName    = "Vanguard S&P 500 ETF"
			  dto.asOfDate        = "10:18:46 am"
			  dto.currentPrice    = 490.05;
			  dto.volume          = 5830964;
			  dto.previousClose   = 489.82
			  dto.lowestDayRange  = 485.120
			  dto.highestDayRange = 502.53;
			  return of(dto);
			}


			// The symbol is NOT valid
			dto.isSymbolValid = false;
			return of(dto);
		  }

 3. Setup a reactive form and bind the "Symbol" textbox only
    a. <a href="https://github.com/traderres/webClass/blob/master/learnAngular/lessons_Angular16/howToSetupReactiveForm.txt">Setup Reactive Forms</a>
    b. Bind the symbol textbox to the reactive form


 4. APPROACH #1 / In your Advanced Stock Trade Page, pressing the "Quote" button invokes your REST call using **MANUAL SUBSCRIBE**
	a. In your "Advanced Stock Trade" page, inject your service:  QuoteService

	b. Create a class variable:  quote
	 	-- It holds the latest quote info received from the backend
	 		public quote: GetQuoteDetailsDTO;

	c. Create a class variable:  symbol
		-- It holds the

	c. When the user presses the "Quote" button, then manually the REST call to get a quote and load the data into the quote class variable


	d. Format the info on the page (so that commas and dollar signs appear)


 5. APPROACH #2 / In your Advanced Stock Trade page, pressing the "Quote" button invokes your REST call using **ASYNC PIPE**
 	a. In your "Advanced Stock Trade" page, inject your service:  QuoteService

