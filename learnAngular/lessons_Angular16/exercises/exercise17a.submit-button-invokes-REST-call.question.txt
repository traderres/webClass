Exercise 17a / Saving Data / Invoke REST call when pressing Submit
------------------------------------------------------------------



Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AddReport
    b. Add the route to constants.ts:         the route will be this:   page/add-report
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Fill in the layout
    NOTE:  Do *NOT* add dropdowns or textboxes yet

            +-------------------------------------------------------------------------------------+
            | Add a Report                                                             <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Report Name Textbox>                                                              |
            |                                                                                     |
            |  <Source Dropdown>              <Priority Dropdown>       <Classification Dropdown> |
            |                                                                                     |
            |  <Choose Authors>                                                                   |
            |                                                                                     |
            |  +--------------------------------------------------------------------------------+ |
            |  | Enter Description                                                              | |
            |  |                                                                                | |
            |  +--------------------------------------------------------------------------------+ |
            |                                                                                     |
            |                             <Reset Btn>   <Save Btn>                                |
            +-------------------------------------------------------------------------------------+
            NOTES
             -- Put a 10px margin around the entire page
             -- The user can choose multiple authors


 3. Fill-in the HTML controls:
		Source Dropdown has these options:
			id=100		Canada
			id=101		France
			id=102		Germany
			id=103		Israel
			id=104		United Kingdom
			id=105		United States of America


		Priority has these options:
			id=10 		Low
			id=11		Medium
			id=12		High
			id=13		Critical


		Classification has these options:
			id=1		Unclassified
			id=2		Unclassified / FOUO
			id=3		Confidential

		Authors has these options:
			id=51		Adam R
			id=52		Ben R
			id=53		Justin R
			id=54		Peter R
			id=55		Josh R
			id=56		Suzanne R


 4. Add a reactive form
    a. Inject the formBuilder service

    b. Create a class variable  called myForm

    c. Initialize myForm in ngOnInit()

    d. Add <form> tag to your HTML

    e. bind controls to your myForm object using formControlName

    f. Display form values with a <pre>...</pre> tag


 5. Add a (click) handler to your Reset button so it runs a method:  resetClicked()
 	-- This method should reset the entire form


 6. Add a (click) handler to your Submit button so it runs a method:  submitClicked()
	-- This method will show a console.log message with 'Submit Clicked'



Part 2:  Develop the REST Call Contract
---------------------------------------
Answer these questions:
 	 a. What's the URL?    		/api/reports/add
 	 b. What is the URL Type?	POST
 	 c. What is passed-in?      DTO that holds all of this information -- call it AddReportDTO
 	 								reportName
 	 								description
 	 								sourceId
 	 								priorityId
 	 								classificationId
 	 								authors          [is an array of authorIds]

 	 d. What is returned?   	Nothing  (but it does return a 200 status code upon success)

 	 e. What checks are made on the passed-in data?


 	 f. Which roles are allowed to use this REST call?
 		All of them

 	 g. What does this REST call do?
 		-- Normally, it would insert this data into the database
 		-- It will return a 200 status code for now



Part 3:  Have the front-end invoke a FAKE REST Call
---------------------------------------------------
 a. Create a ReportService

 b. Create a method:  addReport() that will simulate a REST call that takes 5 seconds
 	-- What is passed-in to this method?   [look at the REST call contract]
 	-- What is returned from this method?  [look at the REST call contract]

 c. In the main page, have your "Submit" click handler invoke the REST call
 	1) In the main page, inject your ReportService
 	2) Invoke your REST Call




Part 4:  Disable the page buttons and show a spinner while WAITING for the REST call
------------------------------------------------------------------------------------
 1. Edit the typescript of your main page

 2. Add a class variable:  restCallInProgress
    -- Initialize this variable to false  (as no REST call is running when the page view is loaded)

 3. In the submitClicked() handler, set restCallInProgress = true

 4. In the REST call finally block, set restCallInProgress = false

 5. In the HTML, disable the "Reset" button if restCallInProgress is TRUE

 6. In the HTML, disable the "Submit" button if restCAllInProgress is TRUE

 7. In the HTML, change the "Submit" button label
 	a. If restCallInProgress == false, then show "Save"
 	b. If restCAllInProgress == true,  then show "Saving" and a spinner



