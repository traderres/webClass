Exercise 17a / Saving Data / Invoke REST call when pressing Submit
------------------------------------------------------------------



Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AddReport
    b. Add the route to constants.ts:         the route will be this:   page/add-report
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Fill in the layout
    NOTE:  Do *NOT* add dropdowns or textboxes yet

            +-------------------------------------------------------------------------------------+
            | Add a Report                                                             <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Report Name Textbox>                                                              |
            |                                                                                     |
            |  <Source Dropdown>              <Priority Dropdown>       <Classification Dropdown> |
            |                                                                                     |
            |  <Choose Authors>                                                                   |
            |                                                                                     |
            |  +--------------------------------------------------------------------------------+ |
            |  | Enter Description                                                              | |
            |  |                                                                                | |
            |  +--------------------------------------------------------------------------------+ |
            |                                                                                     |
            |                             <Reset Btn>   <Save Btn>                                |
            +-------------------------------------------------------------------------------------+
            NOTES
             -- Put a 10px margin around the entire page
             -- The user can choose multiple authors


 3. Fill-in the HTML controls:
		Source Dropdown has these options:
			id=100		Canada
			id=101		France
			id=102		Germany
			id=103		Israel
			id=104		United Kingdom
			id=105		United States of America


		Priority has these options:
			id=10 		Low
			id=11		Medium
			id=12		High
			id=13		Critical


		Classification has these options:
			id=1		Unclassified
			id=2		Unclassified / FOUO
			id=3		Confidential

		Authors has these options:
			id=51		Adam R
			id=52		Ben R
			id=53		Justin R
			id=54		Peter R
			id=55		Josh R
			id=56		Suzanne R


 4. Add a reactive form
    a. Inject the formBuilder service

    b. Create a class variable  called myForm

    c. Initialize myForm in ngOnInit()

    d. Add <form> tag to your HTML

    e. bind controls to your myForm object using formControlName

    f. Display form values with a <pre>...</pre> tag


 5. Add a (click) handler to your Reset button so it runs a method:  resetClicked()
 	-- This method should reset the entire form


 6. Add a (click) handler to your Submit button so it runs a method:  submitClicked()
	-- This method will show a console.log message with 'Submit Clicked'



Part 2:  Develop the REST Call Contract
---------------------------------------
Answer these questions:
 	 a. What's the URL?    		/api/reports/add
 	 b. What is the URL Type?	POST
 	 c. What is passed-in?      DTO that holds all of this information -- call it AddReportDTO
 	 								reportName
 	 								description
 	 								sourceId
 	 								priorityId
 	 								classificationId
 	 								authors          [is an array of authorIds]

 	 d. What is returned?   	Nothing  (but it does return a 200 status code upon success)

 	 e. What checks are made on the passed-in data?


 	 f. Which roles are allowed to use this REST call?
 		All of them

 	 g. What does this REST call do?
 		-- Normally, it would insert this data into the database
 		-- It will return a 200 status code for now



Part 3:  Have the front-end invoke a FAKE REST Call
---------------------------------------------------
 a. Create a ReportService

 b. Create a method that will simulate a REST call that takes 5 seconds

 c. In the main page, have your "Submit" click handler invoke the REST call
 	-- What is passed-in to this REST call?   [look at the REST call contract]
 	-- What is returned from this REST call?  [look at the REST call contract]

 d. While waiting for the REST call, show the spinner

 e. When the REST call has finished, hide the spinner



Part 4:  Build REST Call
------------------------
 1. Create a backend DTO class:  AddReportDTO
 	a. Add the fields to it:
			reportName
			description
			sourceId
			priorityId
			classificationId
			authors

 	b. Generate the getters & setters



 2. Create a backend service class
 	a. Crete the backend service class:  ReportService

 	b. Add the @Service annotation (above the name of the class)
 	   NOTE:  This tells Spring to instantiate this class as a singleton and make it injectable

 	c. Add a logger
 	   NOTE:  No, we don't use print statements on the backend.  Not.  Ever.

 	e. Create a public method called addReport()
 	   -- What is passed-in to this REST call?   [look at the REST call contract]
 	   -- What is returned from this REST call?  [look at the REST call contract]

 	f. Fill-in this method with a logger and nothing else



 3. Create a backend controller class
 	a. Create the backend controller class:  ReportController

 	b. Add the @Controller annotation (above the name of the class)
 	   NOTE:  This tells Spring that this is where REST calls will start

 	c. Add a logger

 	d. Inject the ReportService

 	e. Create a public method called addReport()
 	   -- It returns a ResponseEntity<?>
	    -- What is passed-in to this REST call?   [look at the REST call contract]

 	f. Add the @RequestMapping annotation
 	 		value = URL of this REST call
 	 		method = URL Type of this REST call
 	 		produces = "application/json"

 	g. Limit which security roles can hit this REST call by adding the @PreAuthorize annotation

 	h. Have the method call your ReportService.addReport()

 	i. Have the method return a 200 status code



 4. Use Postman to verify that the REST call works
    a. Startup the backend
    	-- Read the 3rd last line from the output

    b. Startup Postman
    	-- Attempt to hit the REST call

    c. Attempt to hit the REST call


	d. Verify that the REST call is *SLOW*






Part 5:  Integrate the frontend and backend / Have the frontend service invoke the real REST call
-------------------------------------------------------------------------------------------------
 1. Edit the frontend service:  ReportService

 2. Inject the service:  httpClient

 3. Edit addReport()
    a. Remove all of the code in this method

    b. Add a line that builds URL to invoke the REST call

 				// Construct the URL to this REST call
 				const restUrl: string = environment.baseUrl + '/api/reports/add';

 	c. The 2nd line returns an observable hooked-up to this url

 				// Return the observable that will invoke this REST call
 				return this.httpClient.post <void>(restUrl, dto);


		When finished, the method looks like this
		-----------------------------------------
		public addReport(aDTO: AddReportDTO): Observable<void> {
			// Construct the URL to this REST call
			const restUrl: string = environment.baseUrl + '/api/reports/add';

			// Return the observable that will invoke this REST call
			return this.httpClient.post <void>(restUrl, dto);
		}



 4. Verify that invoking the real REST call works



Part 6:  Slow down the REST call in the frontend service
--------------------------------------------------------
 1. Slow down the REST call in the frontend service

 2. Verify that the spinner appears

