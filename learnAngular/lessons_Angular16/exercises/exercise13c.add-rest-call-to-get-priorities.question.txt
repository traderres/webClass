Exercise 13c / Create a REST Call to Return a List of DTOs
----------------------------------------------------------
Problem:  I need a REST call to return a list of DTOs  (holding priorities)
Solution: Make a contract and implement it in Java


Exercise
--------
 1. Create the Contract for the REST call by answering these questions:

 	a. What is the URL?
 	   Rule:  Must start with /api

 	b. What is the URL Type?
 			GET			Used for read-only operations
 			PUT			Used for write operations and passing-in 1 parameter on the URL
 			POST   		Used for write operations and passing-in multiple parameters [no limit]
 			DELETE		Used for write operations involving deletes

 	c. What is passed-in?

 	d. What is returned?

 	e. What checks are made on the passed-in data?

 	f. What security roles are granted access to this REST call?

 	g. What does this REST call do



 2. Build the backend DTO
 	a. Create the backend DTO:  MyLookupDTO
 	   NOTE:  Have mercy on future developers and use the *SAME NAME* as the frontend DTO
 	   NOTE:  DTOs are always stored in the "models" directory

 	b. Add the class variables to MyLookupDTO

 	c. Have IntelliJ generate the getters & setters


 3. Create a backend service class
 	a. Crete the backend service class:  MyLookupService

 	b. Add the @Service annotation (above the name of the class)
 	   NOTE:  This tells Spring to instantiate this class as a singleton and make it injectable

 	c. Add a logger
 	   NOTE:  No, we don't use print statements on the backend.  Not.  Ever.

 	d. Inject the DataSource

 	e. Create a public method called getAllPriorities() that returns a List of MyLookupDTO objects
 		-- Have it return Null for now


 4. Create a backend controller class
 	a. Create the backend controller class:  MyLookupController

 	b. Add the @Controller annotation (above the name of the class)
 	   NOTE:  This tells Spring that this is where REST calls will start

 	c. Add a logger

 	d. Inject the MyLookupService

 	e. Create a public method called getAllPriorities() that returns a ResponseEntity<?>

 	f. Add the @RequestMapping annotation
 	 		value = URL of this REST call
 	 		method = URL Type of this REST call
 	 		produces = "application/json"

 	g. Limit which security roles can hit this REST call by adding the @PreAuthorize annotation

       Ex) This limits this REST call to only these 2 roles
		 	 @PreAuthorize("hasAnyRole('CVF_SUPERVISOR', 'CVF_SPECIALIST')")

           NOTE:  This is not the answer!  Determine out what security roles are needed and apply those


 5. Add the priorities lookup table to the database migration script
    a. Use your database console to figure out the SQL to create a new priorities table

    b. Use your database console to figure out the SQL to add the records to the priorities table

    c. Edit the V1.0__baseline.sql

    d. Add your SQL to the V1.0__baseline.sql

    e. Nuke your database

    f. Refresh your IntelliJ database console
       -- Verify that the priorities table exists and has your records



 6. Finished MyLookupService.getAllPriorities()
 	a. Determine the SQL to get all of the priorities database
 	   1) Use your Database console to generate the SQL
 	   2) Try out SQL

	b. Create a local JdbcTemplate object

	c. Create a row mapper object

	d. Use the JdbcTemplate object to execute the SQL and generatea  list of DTOs

 	e. return the list of DTOs



 7. Use Postman to verify that the REST call works
    a. Startup the backend
    	-- Read the 3rd last line from the output

    b. Startup Postman
    	-- Attempt to hit the REST call

    c. Verify that the REST call returns the data you expect


