Exercise 14d / Advanced Stock Trade / Add Autocomplete to Choose Stock Symbol
-----------------------------------------------------------------------------
Problem:  I want the web page to provide options as the user types-in a stock symbol
Solution: Use an Auto-Complete


		  Symbol-Autocomplete Box	User types-in V and is presented with upto 5 matches

			+-------------------------------
			|  V
			+-------------------------------
		    |  V      	Visa Inc.
		    |  VOO 		Vanguard S&P 500 E...
		    |  VTI		Vanguard Total Stock...
		    |  VZ		Verizon Communicat....
		    |  VEV		Vicinity Motor Corp.




		+------------------------------------------------------------------------------------+
		| <Symbol Autocomplete>        |                                                     |
		|   V      	Visa Inc.          |                                                     |
		|   VOO 	Vanguard S&P 500 E.|                                                     |
		|   VTI		Vanguard Total Stoc|                                                     |
		+------------------------------+-----------------------------------------------------+

		+------------------------------------------------------------------------------------+
		| <VOO selected>               | VANGUARD S&P 500 ETF              as of  2:19:44 pm |
		|                              | ----------------------------------------------------+
		|                              | Price:        $487.00 | Prev Close:          501.00 |
		|                              | Volume:       123,456 | Day Range:  495.00 - 505.79 |
		+------------------------------+-----------------------------------------------------+


Assumptions:
-----------
You have a REST call that when passed-in a stock symbol return a DTO with quote information GetQuoteDetailsDTO
You have a REST call that when passed-in a partial stock symbol returns up to 5 matches



Part 1:  Make the Symbol Lookup text box look good with CSS
-----------------------------------------------------------
Start with the symbol textbox:

         <mat-form-field subscriptSizing="dynamic">
           <input formControlName="symbol" matInput type="text" title="Symbol Textbox" aria-label="Symbol Textbox"
                  class="mr-5" placeholder="Symbol">
         </mat-form-field>

 1. Remove the <mat-form-field> and <mat-label>


 2. Add a span after the input box with has class="searchBoxIcon"
    Inside this span, there will be a search icon
     -- Find a font-awesome search icon to use inside the span


 3. Add a wrapper div around it
    -- Assign 2 classes to this div:  searchBoxWrapper   fa-border


 4. Add the searchBoxWrapper CSS class

	 .searchBoxWrapper {
	   background-color: #f7f7f7;
	   border-radius: 4px;
	   border: 0;

	   /* Center the search box and the icon */
	   display: flex;
	   flex-direction: row;
	   align-items: center;

	   margin-left: 10px;
	 }


 5. Add more polish by adding this CSS:

	a. Add id="searchBox" to the textbox

	b. Add this CSS:
			#searchBox {
			  width: 145px;                 /* Set the width of the search box */
			  padding: 6px 0 6px 10px;
			  background-color: #f7f7f7;    /* light white color */
			  border: 0;
			  color: #111;			        /* Text color is almost black */

			  /* Remove the outline that appears when clicking in textbox */
			  outline: none;
			}

			.searchBoxIcon {
			  color: black;
			  padding: 6px 1px 6px 1px;
			  cursor: pointer;
			  border: 0;
			  background-color: transparent;
			}




Part 2:  Build fake front-end REST call to run a search and get results
-----------------------------------------------------------------------
 1. Add a front-end DTO class:  AutoCompleteMatchDTO
 	a. Generate the class

 	b. Add 2 public properties:
 	 		symbol  		(it's the matching stock symbol)
 			businessName	(it's the business name)




 2. Add a front-end service:  SymbolService
	a. Generate the SymbolService

	b. Add a public method:  runSymbolSearch()
		-- This method returns an observable to an array of AutoCompleteMatchDTO
        -- This method takes-in the rawQueryString and the total number of matches to return



	c. Add these checks to your method
			If the user enters a null or empty string that return an observable that contains an empty array

			If the user enters a string that starts with "v", then return an observable that contains an array of 5 matches:
						V      		Visa Inc.
						VOO 		Vanguard S&P 500 E...
						VTI			Vanguard Total Stock...
						VZ			Verizon Communicat....
						VEV			Vicinity Motor Corp.


			If the user enters a string that start with "b", then return an observable that contains
						B			Barnes Group, Inc.
						BA			Boeing Company
						BYND		Beyond Meat, Inc.
						BRKA		Berkshire Hathaway A Stock
						BRKB		Berkshire Hathaway B Stock






Part 3:  Listen on the text box changes and run searches to get matches
-----------------------------------------------------------------------
GOAL:  Setup an observable that will run a search
       An async-pipe will *ACTIVATE* this observable

 1. In your main typescript page, add a class variable:  obsSearchMatchesToShow   that is an observable that holds an array of matches


 2. Inject your SymbolService


 3. Remove any existing valueChanges on the existing symbol textbox

    Remove this:
        // Listen for changes on the symbol textbox
        this.subListenOnSymbolTextbox = this.myForm.controls.symbol.valueChanges.subscribe( (aNewSymbol: string) => {
          // The user changed the symbol textbox

          // Update the observable
          // NOTE:  The Async Pipe will automatically refresh the page
          this.obsQuote = this.quoteService.getQuote(aNewSymbol)
        })



 4. Initialize an observable that listens on the symbol textbox and run searches
    NOTE:  There is no call to subscribe
           The async-pipe will subscribe (and thus activate) this observable



 5. Add the <mat-autocomplete> tag after the search box
    NOTE:  It must be within the searchBoxWrapper IMMEDIATELY after the <span> that holds the Search Icon

 		  <mat-autocomplete #autocomplete1="matAutocomplete">

 		  </mat-autocomplete>



 6. Setup an async pipe *INSIDE* the <mat-autocomplete> to add <mat-options>
    NOTE:  the async pipe will active this observable:  obsSearchMatchesToShow



 7. Loop through the matches and render them as <mat-option> tags
    NOTE:  This is inside the <mat-autocomplete> tag
           This is inside async pipe you created in the last step



 8. Adjust the search box by adding this to it:
		[matAutocomplete]="autocomplete1"



 9. Try it out
    -- Type-in V in the symbol box and you should see 5 matches
       PROBLEM:  The matches wrap / the matches look like shit!!


10. Adjust the <mat-autocomplete> so that the matches do *NOT* wrap
    Add panelWidth="auto" to the mat-autocomplete



11. Format the displayed options so that they appear as to columns
    Hint:  Add a flex row *INSIDE* the contents of the <mat-option>...</mat-option> tag

		+-------------------------------------
		| V       | Visa
		| VOO     | Vanguard S&P 500 ETF
		+---------+---------------------------
		<- 80px -> <----- Rest of Width ----->





Part 4:  Show Quote Info when a user clicks on a match
------------------------------------------------------
When a user selects a matching option, call this.quoteService.getQuote(symbol from selected match)

 1. Add a public method:  userSelectedSymbol()
 	-- Pass-in the symbol
    -- This will re-initialize the obsQuote observable


 2. When a user selects an option in the mat-autocomplete, call the method and pass-in the symbol info


