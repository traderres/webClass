Exercise 10a / Add a Date Picker (Answers)
------------------------------------------

Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                AddContract
    b. Add the route to constants.ts:        the route will be this:   page/add-contract
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works




 2. Fill in the layout (but do not add controls)

            +---------------------------------------------------------------------------------+
            | Add Contract                                                       Help Button  |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            | Contract Name Textbox                                                           |
            |                                                                                 |
            | Priority Dropdown                                                               |
            |                                                                                 |
            | <Contract Funding Date>                                                         |
            |                                                                                 |
            | +--------------------------------+                                              |
            | | Contract Date Range            |                                              |
            | |    <Start Date>    <End Date>  |                                              |
            | +--------------------------------+                                              |
            |                                                                                 |
            |                    <Reset Btn>   <Load Defaults>  <Save Btn>                    |
            +---------------------------------------------------------------------------------+
			The Priority Dropdown will have 3 values:  Low (id=101), Medium (id=102), High  (id=103)
			Contract Funding Date must be some time between January 1st of the previous year and TODAY
           	Contract Date Range has rules:
           	     The Start Date must be *TODAY* or in the future
           	     The End   Date must be *AFTER* the start date



		Possible HTML
		-------------
		<div class="m-2.5">
		  <div class="grid grid-cols-2">
			  <div>
				Add Contract
			  </div>

			  <div class="flex place-content-end">
				Help Btn
			  </div>
		  </div>

		  <div class="mt-5 flex flex-col gap-y-5">

			<div>
			  	Contract Name Textbox
			</div>

			<div>
			  	Priority Dropdown
			</div>

			<div>
			  	Contract Funding Date
			</div>

			<div>
				Contract Date Range
			</div>

			<div class="flex place-content-center gap-x-5">
			  <div>
				Reset Btn
			  </div>

			  <div>
				Load Defaults
			  </div>

			  <div>
				Submit Btn
			  </div>
			</div>
		  </div>
		</div>



 3. Add the HTML controls for text boxes, dropdowns, and the buttons

		<div class="m-2.5">
		  <div class="grid grid-cols-2">
			<div>
			  Add Contract
			</div>

			<div class="flex place-content-end">
			  Help Btn
			</div>
		  </div>

		  <div class="mt-5 flex flex-col gap-y-5">

			<div>
			  <mat-form-field>
				<mat-label>Contract Name</mat-label>

				<input matInput type="text" title="Contract Name" aria-label="Contract Name"/>

				<mat-error>Contract Name is required</mat-error>
			  </mat-form-field>
			</div>

			<div>
			  <mat-form-field>
				<mat-label>Priority</mat-label>

				<mat-select title="Priority" aria-label="Priority">
				  <mat-option [value]=101>Low</mat-option>
				  <mat-option [value]=102>Medium</mat-option>
				  <mat-option [value]=103>High</mat-option>
				</mat-select>

				<mat-error>
				  Priority is required
				</mat-error>

			  </mat-form-field>
			</div>

			<div>
			  Contract Funding Date
			</div>

			<div>
			  Contract Date Range
			</div>

			<div class="flex place-content-center gap-x-5">
			  <div>
				<button type="button" mat-raised-button title="Reset" aria-label="Reset">
				  Reset
				</button>
			  </div>

			  <div>
				<button type="button" mat-raised-button title="Load Defaults" aria-label="Load Defaults">
				  Load Defaults
				</button>
			  </div>

			  <div>
				<button type="button" mat-raised-button color="primary" title="Submit" aria-label="Submit">
				  Submit
				</button>
			  </div>
			</div>
		  </div>
		</div>



 4. Add the Date Picker Modules
  	a. Verify that the app.module.ts has these 2 modules:
  				MatDatepickerModule
  				MatNativeDateModule

  	b. If not present, then add them to the "imports" section
  	   HINT:  Keep the modules in alphabetical order so it's easier to scan for them



 5. Add the INDIVIDUAL date picker for the Contract Funding Date

      <mat-form-field class="w-[250px]">
        <mat-label>Contract Funding Date</mat-label>

        <!-- Contract Funding / Date Picker Textbox -->
        <input matInput [matDatepicker]="contractDatePicker">

        <!-- Contract Funding / Date Picker Icon -->
        <mat-datepicker-toggle matIconSuffix [for]="contractDatePicker"></mat-datepicker-toggle>
        <mat-datepicker #contractDatePicker></mat-datepicker>
      </mat-form-field>




 6. Add the DATE_RANGE date picker for the Contract Start/End Date

      <mat-form-field class="w-[250px]">
        <mat-label>Contract Date Range</mat-label>

        <!-- Contract Date Range / Date Textbox that holds start & end dates -->
        <mat-date-range-input [rangePicker]="picker">
          <input matStartDate placeholder="Start date">
          <input matEndDate placeholder="End date">
        </mat-date-range-input>

        <!-- Contract Date Range / Date Picker Icon -->
        <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-date-range-picker #picker></mat-date-range-picker>

      </mat-form-field>



 7. Setup a reactive form that holds the 4 fields:  contractName, contractPriority, contractStartDate, contractEndDate
	a. Inject the formBuilder service
	b. Create a class variable that holds a FormGroup object
	c. Use the formBuilder to initialize the form
	d. Add the <form> tag to your HTML
	e. Bind individual form fields to the reactive form
	f. Add a <pre>...</pre> tag that shows the value and errors for the startDate and EndDate fields

	HTML looks like this:
	---------------------
	<form [formGroup]="this.myForm" autocomplete="off" novalidate>

    <div class="m-2.5">
      <div class="grid grid-cols-2">
        <div>
          Add Contract
        </div>

        <div class="flex place-content-end">
          Help Btn
        </div>
      </div>

      <div class="mt-5 flex flex-col gap-y-5">

        <div>
          <mat-form-field>
            <mat-label>Contract Name</mat-label>

            <input formControlName="contractName" matInput type="text" title="Contract Name" aria-label="Contract Name"/>

            <mat-error>Contract Name is required</mat-error>
          </mat-form-field>
        </div>

        <div>
          <mat-form-field>
            <mat-label>Priority</mat-label>

            <mat-select formControlName="contractPriority" title="Priority" aria-label="Priority">
              <mat-option [value]=101>Low</mat-option>
              <mat-option [value]=102>Medium</mat-option>
              <mat-option [value]=103>High</mat-option>
            </mat-select>

            <mat-error>
              Priority is required
            </mat-error>

          </mat-form-field>
        </div>

        <div>
          <mat-form-field class="w-[250px]">
            <mat-label>Contract Funding Date</mat-label>

            <!-- Contract Funding / Date Picker Textbox -->
            <input matInput formControlName="contractFundingDate" [matDatepicker]="contractDatePicker">

            <!-- Contract Funding / Date Picker Icon -->
            <mat-datepicker-toggle matIconSuffix [for]="contractDatePicker"></mat-datepicker-toggle>
            <mat-datepicker #contractDatePicker></mat-datepicker>
          </mat-form-field>

        </div>

        <div>
          <mat-form-field class="w-[250px]">
            <mat-label>Contract Date Range</mat-label>

            <!-- Contract Date Range / Date Textbox that holds start & end dates -->
            <mat-date-range-input [rangePicker]="picker">
              <input matStartDate formControlName="contractStartDate" placeholder="Start date">
              <input matEndDate   formControlName="contractEndDate"   placeholder="End date">
            </mat-date-range-input>

            <!-- Contract Date Range / Date Picker Icon -->
            <mat-datepicker-toggle matIconSuffix [for]="picker"></mat-datepicker-toggle>
            <mat-date-range-picker #picker></mat-date-range-picker>

          </mat-form-field>
        </div>

        <div class="flex place-content-center gap-x-5">
          <div>
            <button type="button" mat-raised-button title="Reset" aria-label="Reset">
              Reset
            </button>
          </div>

          <div>
            <button type="button" mat-raised-button title="Load Defaults" aria-label="Load Defaults">
              Load Defaults
            </button>
          </div>

          <div>
            <button type="button" mat-raised-button color="primary" title="Submit" aria-label="Submit">
              Submit
            </button>
          </div>
        </div>
      </div>
    </div>

      <pre>
        this.myForm.valid = {{ this.myForm.valid }}
        this.myForm.controls.contractStartDate.value = {{ this.myForm.controls.contractStartDate.value }}
        this.myForm.controls.contractEndDate.value   = {{ this.myForm.controls.contractEndDate.value }}
      </pre>

    </form>



	TypeScript looks like this:
	---------------------------
	import { Component } from '@angular/core';
	import {FormBuilder, FormGroup} from "@angular/forms";

	@Component({
	  selector: 'app-add-contract',
	  templateUrl: './add-contract.component.html',
	  styleUrls: ['./add-contract.component.scss']
	})
	export class AddContractComponent {

	  public myForm: FormGroup;

	  public constructor(private formBuilder: FormBuilder) {

		// Initialize the form group
		this.myForm = this.formBuilder.group({
		  contractName:        [null, null],
		  contractPriority:    [null, null],
		  contractFundingDate: [null, null],
		  contractStartDate:   [null, null],
		  contractEndDate:     [null, null]
		});
	  }

	}


 8. Setup click handlers for the 3 buttons:
 	a. Pressing "Save" should do the following:
 	 		touch all form fields.
 			If there are any form errors, then stop.
 			If there are no errors, then use the messageService to show a message saying "Contract Successfully Added", and clear the form

		  public saveClicked(): void {
			this.myForm.markAllAsTouched();

			if (!this.myForm.valid) {
			  // There is a form validation error.  So, stop here
			  return;
			}

			// Use the message service to send a success message

			// Reset the form
			this.myForm.reset()
		  }



 	b. Pressing "Reset" should reset the form

		  public resetClicked(): void {
			this.myForm.reset();
		  }


  	c. Pressing" Load Defaults" will:
  	 		Set the priority dropdown to "Medium"
  	 		Set the Contract Funding Date to 1st day of the previous month
  	 		Set the Contract Start Date to *TOMORROW*
  	 		Set the Contract End Date to   1 year after the start date


		  private getFirstDayOfPreviousMonth(): Date {
			// Get the date object for now
			let now: Date = new Date();

			// Get the date of 1st day of the previous month from now
			let firstDayPrevMonth: Date = new Date(now.getFullYear(), now.getMonth() - 1, 1);

			return firstDayPrevMonth;
		  }


		  private getDateOfTomorrow(): Date {
			// Get the date object for now
			let now: Date = new Date();

			// Get the date of tomorrow
			let tomorrowsDate: Date = new Date();
			tomorrowsDate.setDate(now.getDate() + 1);

			return tomorrowsDate;
		  }


		  private getDateOfTomorrowAfterYear(): Date {
			// Get the date object for now
			let now: Date = new Date();

			// Get the date of tomorrow
			let tomorrowsDate: Date = new Date();
			tomorrowsDate.setDate(now.getDate() + 366);

			return tomorrowsDate;
		  }


		  public loadDefaultsClicked(): void {
			// Set the priority dropdown to show medium (id=102)
			this.myForm.controls.contractPriority.setValue(102);

			// Set the Contract Funding date to be the 1st date of the previous month
			this.myForm.controls.contractFundingDate.setValue( this.getFirstDayOfPreviousMonth() );

			// Set the contract start date to tomorrow
			this.myForm.controls.contractStartDate.setValue( this.getDateOfTomorrow() );

			// Set the contract end date to 1 year after tomorrow
			this.myForm.controls.contractEndDate.setValue( this.getDateOfTomorrowAfterYear() );
		  }



 9. Setup Form Validation with these rules:
 	a. The contract name cannot be blank:  it must have atleast one non-space character
 	b. The priority dropdown cannot be null
 	c. The start date must be *TODAY* or in the future
 	d. The end date must be *AFTER* the start date
