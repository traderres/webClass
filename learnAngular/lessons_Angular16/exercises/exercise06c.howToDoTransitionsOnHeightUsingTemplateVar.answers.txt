Exercise 6c / Smooth Vertical Transitions w/Template Variable (answers)
-----------------------------------------------------------------------
Problem:  Sometimes you want a div to appear or disappear with animation (going vertically)
Solution: Use a Template Variable to set the height from 0px back to its original height

NOTE:  In order for vertical animations to work, you need to have the ORIGINAL height of a div
       We use the html template variable to get the original height and set it (when the height needs to be expanded)


Exercise
--------
 1. Setup the Page
    a. Generate the component:                Call it SmoothVerticalTransition1
    b. Add the route to constants.ts:         the route will be this:   page/smooth-vert-transition-1
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works




 2. Setup this page layout

     +---------------------------------------------------------------+
     | Smooth Vertical Transition #1                            Help |
     +---------------------------------------------------------------+
     |                                                               |
     | <up arrow icon> BRKB Details       $420.52                    |
     |    Name:                           Berkshire Hathaway Inc     |
     |    Last Price:                     $420.52                    |
     |    Change:                         +6.05                      |
     |    Volume:                         635,986                    |
     |    52 Week Range:                  330.58 to 449.25           |
     |                                                               |
     | <up arrow icon> VOO Details        $481.13                    |
     |    Name:                           Vanguard S&P 500 ETF       |
     |    Last Price:                     $481.13                    |
     |    Change:                         +5.61                      |
     |    Volume:                         1,912,703                  |
     |    52 Week Range:                  375.95 to 519.40           |
     +---------------------------------------------------------------+
     NOTE: Use font awesome to get a nice down-arrow icon
           https://fontawesome.com/search


 3. Pressing on the up arrow icon should hide the details and show a "Down arrow icon"

     +---------------------------------------------------------------+
     | Smooth Vertical Transition #1                            Help |
     +---------------------------------------------------------------+
     |                                                               |
     | <up arrow icon> BRKB Details       $420.52                    |
     | <up arrow icon> VOO Details        $481.13                    |
     |    Name:                           Vanguard S&P 500 ETF       |
     |    Last Price:                     $481.13                    |
     |    Change:                         +5.61                      |
     |    Volume:                         1,912,703                  |
     |    52 Week Range:                  375.95 to 519.40           |
     +---------------------------------------------------------------+



    a. Put a wrapper div around the BERKSHIRE HATHAWAY details that you want to *HIDE*
       NOTE:  We are only focusing on the *FIRST* down arrow for now



	b. Assign a template variable to this wrapper div (called collapsableDiv)

		 <div #collapsableDiv>
		 	<!-- Berkshire Details -->

		 </div>



	c. Define the CSS class:  smooth-height-transition
	   -- All transitions take 500 milliseconds and it hides overflow

		.smooth-height-transition {
		  transition: height 0.5s ease;      /* Causes the height to adjust over 500 milliseconds */
		  overflow: hidden;                  /* Causes the div to collapse and the divs below will move up */
		}



	d. Assign this CSS class to this wrapper div:    smooth-height-transition

		 <div #collapsableDiv class="smooth-height-transition">
		 	<!-- Berkshire Details -->

		 </div>



 4. In the typescript
 	a. Create a class variable that corresponds to the template variable: collapsableDiv
 		  	@ViewChild("collapsableDiv")
 		  	private collapsableDiv: ElementRef;

	b. Create a class variable (called originalDivHeightInPixels) that holds the original height of this div after the page is loaded
            private originalDivHeightInPixels: string;        // Yes, this is a string!!


  	c. When the page finishes rendering the HTML, store the height of this div in originalDivHeightInPixels
	   NOTE:  You will need to implement AfterViewInit

	   1) Get the initial height of this div from the template variable and store it in originalDivHeightInPixels
	   2) WEIRD PART:  Set the template's height to the value you just got

  		  public ngAfterViewInit(): void {
			// Get the initial height of this div (from the template variable)
			this.originalDivHeightInPixels = String(this.collapsableDiv.nativeElement.offsetHeight) + "px";

			// Set the div's initial style.height property on page load
			this.collapsableDiv.nativeElement.style.height = this.originalDivHeightInPixels;
		  }




  	d. Create this method:   showDetails()
  		-- This will set the height of this div to the original height

  		  public showDetails() {
            // Set the height back to the starting height of the div
            this.collapsableDiv.nativeElement.style.height = this.originalDivHeightInPixels;
          }



  	e. Create this method:   hideDetails()
  	   -- This will set the height  of this div to "0px"

		  public hideDetails() {
			// Set the height to zero
			this.collapsableDiv.nativeElement.style.height = "0px";
		  }



	f. Pressing click on the **UP** arrow should call the hideDetails() method

			<!-- Berkshire Top Row -->
			<div class="grid grid-cols-4 gap-y-1">
				<div>
				  <a [routerLink]=[] (click)="this.hideDetails()" >
					  <!-- Both the UP arrow and company name are clickable -->
					  <i class="fa-solid fa-chevrons-up cursor-pointer"></i> BRKB Details
				  </a>
				  </div>

				<div class="col-span-3">$420.52</div>
			</div>



 5. When the row is collapsed, show the up arrow
    a. Add a class variable called isDivCollapsed that holds a boolean
		  public isDivCollapsed: boolean = false;

	b. Change showDetails() to set this flag to FALSE

	c. Change hideDetails() to set this flag to TRUE

	d. Add 2 *ngIf statements
		1) One will check if isDivCollapsed == true
				-- This will show the DOWN arrow

		2) One will check if isDivCollapsed == false
				-- This will show the UP arrow arrow and all of the details


			<!-- Berkshire Top Row -->
			<div class="grid grid-cols-4 gap-y-1">
				<div>
				  <a [routerLink]=[] (click)="this.hideDetails()"  *ngIf="!this.isDivCollapsed">
					  <!-- Both the UP arrow and company name are clickable -->
					  <i class="fa-solid fa-chevrons-up cursor-pointer"></i> BRKB Details
				  </a>

				  <a [routerLink]=[] (click)="this.showDetails()"  *ngIf="this.isDivCollapsed">
					<!-- Both the DOWN arrow and company name are clickable -->
					<i class="fa-solid fa-chevrons-down cursor-pointer"></i> BRKB Details
				  </a>
				  </div>

				<div class="col-span-3">$420.52</div>
			</div>




When finished, the HTML looks like this:
----------------------------------------
	<div class="m-2.5">
	  <div class="grid grid-cols-2">
		<div>
		  <span class="text-xl">Smooth Vertical Transitions #1</span>
		</div>

		<div class="flex place-content-end">
		  Help
		</div>
	  </div>

	  <div class="ml-2.5 mt-2.5">

		<!-- Berkshire Top Row -->
		<div class="grid grid-cols-4 gap-y-1">
			<div>
			  <a [routerLink]=[] (click)="this.hideDetails()"  *ngIf="!this.isDivCollapsed">
				  <!-- Both the UP arrow and company name are clickable -->
				  <i class="fa-solid fa-chevrons-up cursor-pointer"></i> BRKB Details
			  </a>

			  <a [routerLink]=[] (click)="this.showDetails()"  *ngIf="this.isDivCollapsed">
				<!-- Both the DOWN arrow and company name are clickable -->
				<i class="fa-solid fa-chevrons-down cursor-pointer"></i> BRKB Details
			  </a>

			  </div>

			<div class="col-span-3">$420.52</div>
		</div>

		<!-- Berkshire Details -->
		<div #collapsableDiv class="smooth-height-transition">
		  <div class="grid grid-cols-4 gap-y-1">
			<div class="ml-5">Name:</div>
			<div class="col-span-3">Berkshire Hathaway Inc</div>

			<div class="ml-5">Last Price:</div>
			<div class="col-span-3">$420.52</div>

			<div class="ml-5">Change:</div>
			<div class="col-span-3">+6.05</div>

			<div class="ml-5">Volume:</div>
			<div class="col-span-3">635,986</div>

			<div class="ml-5">52 Week Range:</div>
			<div class="col-span-3">330.58 to 449.25</div>
		  </div>
		</div>


		<!-- VOO Top Row -->
		<div class="grid grid-cols-4 gap-y-1 mt-5">
		  <div>Up-Arrow-Icon VOO Details</div>
		  <div class="col-span-3">$481.13</div>
		</div>

		<!-- VOO Details -->
		<div>
		  <div class="grid grid-cols-4 gap-y-1">
			<div class="ml-5">Name:</div>
			<div class="col-span-3">Vanguard S&P 500 ETF</div>

			<div class="ml-5">Last Price:</div>
			<div class="col-span-3">$481.13</div>

			<div class="ml-5">Change:</div>
			<div class="col-span-3">+5.61</div>

			<div class="ml-5">Volume:</div>
			<div class="col-span-3">1,912,703</div>

			<div class="ml-5">52 Week Range:</div>
			<div class="col-span-3">375.95 to 519.40</div>
		  </div>
		</div>


	  </div>

	</div>




When finished, the CSS looks like this:
---------------------------------------

	.smooth-height-transition {
	  transition: height 0.5s ease;      /* Causes the height to adjust over 500 milliseconds */
	  overflow: hidden;                  /* Causes the div to collapse and the divs below will move up */
	}





When finished, the TypeScript looks like this:
----------------------------------------------
	import {AfterViewInit, Component, ElementRef, ViewChild} from '@angular/core';

	@Component({
	  selector: 'app-smooth-vertical-transition1',
	  templateUrl: './smooth-vertical-transition1.component.html',
	  styleUrls: ['./smooth-vertical-transition1.component.scss']
	})
	export class SmoothVerticalTransition1Component implements AfterViewInit {

	  @ViewChild("collapsableDiv")
	  private collapsableDiv: ElementRef;               // This class variable corresponds to the template variable

	  private originalDivHeightInPixels: string;        // Yes, this is a string!!

	  public isDivCollapsed: boolean = false;

	  public ngAfterViewInit(): void {
		// Get the initial height of this div (from the template variable)
		this.originalDivHeightInPixels = String(this.collapsableDiv.nativeElement.offsetHeight) + "px";

		// Set the div's initial style.height property on page load
		this.collapsableDiv.nativeElement.style.height = this.originalDivHeightInPixels;
	  }



	  public showDetails() {
		// Set the height back to the starting height of the div
		this.collapsableDiv.nativeElement.style.height = this.originalDivHeightInPixels;

		this.isDivCollapsed = false;
	  }


	  public hideDetails() {
		// Set the height to zero
		this.collapsableDiv.nativeElement.style.height = "0px";

		this.isDivCollapsed = true;
	  }


	}

