Exercise 13a / Load a Dropdown by Subscribing to an Observable
--------------------------------------------------------------
Problem:  I want to load a dropdown from a REST call
Solution: Subscribe to the observable in ngOnInit and load data with a class variable


Advantages to Manual Subscribe
 + The REST call is asynchronous
 + We can show a spinner while the REST call is running


Disadvantages to Approach 2
 - Need to unsubscribe from the observable at the end of the component life-cycle to avoid memory leaks
 - Subscribing to an observable manually in ngOnInit() does not work with OnPush change detection [out of the box]
 - Complex to implement: You need a class variable for your data and a subscription variable



Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AddContractSubscribe
    b. Add the route to constants.ts:         the route will be this:   page/add-contract-subscribe
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works


 2. Fill in the layout
    NOTE:  Do not add dropdowns or textboxes yet

            +-------------------------------------------------------------------------------------+
            | Add Contract                                                             <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Contract Name Textbox>        <Contract Number Textbox>        <Priority Dropdown>|
            |                                                                                     |
            |  <Classification Dropdown>      <Contract Size Dropdown>                            |
            |                                                                                     |
            |  <Region Dropdown>              <Sub Region Dropdown>                               |
            |                                                                                     |
            |  <Contract Authors Multi Dropdown>                                                  |
            |                                                                                     |
            |  +-------------------------------------------------------------------------------+  |
            |  | <Description Textarea>                                                        |  |
            |  |                                                                               |  |
            |  +-------------------------------------------------------------------------------+  |
            |                                                                                     |
            |                   <Reset Btn>   <Submit Btn>   [Save for Later hyperlink]           |
            +-------------------------------------------------------------------------------------+




 3. Replace "Priority Dropdown" with a real HTML dropdown that has 4 options:
 		Low
 		Medium
 		High
 		Critical



 4. Create a frontend DTO:  MyLookupDTO
 	-- It has 2 fields:
 				id        / holds the unique number
 				value     / holds the displayed value

	a. Create the frontend DTO class:

	b. Put in the 2 fields




 5. Create a frontend Service:  MyLookupService
    a. Create the service

    b. Add a public method to this service called getAllPriorities()
    	-- What is passed-in?  Nothing
    	-- What is returned?   Observable that holds an ARRAY of MyLookupDTO objects

    c. Create a local variable that holds some data

    d. Convert the variable into an observable

    e. Return the observable




 6. In the Typescript of your main page
 	a. Create a public class variable called priorities that holds an *ARRAY* of MyLookupDTO objects

 	b. Inject the MyLookupService

 	c. In the ngOnInit(), invoke the REST call and when it comes back set the class variable




 7. In the HTML, loop through the array of priorities
 	a. Remove the hard-coded <mat-option> tags

 	b. Replace them with a *ngFor loop



 8. Cleanup:  Remove memory leaks
    NOTE:  Anytime you subscribe to an observable, it's a BEST PRACTICE to unsubscribe

    a. Add a class variable called subPriorities
    	-- This is private variable
    	-- This variable has a type of Subscription

    b. When you subscribe(), it always returns a subscription
       -- So, set this.subPriorities to hold it

    c. Create the ngOnDestroy() method
    	-- If subPriorities is defined, then call unsubscribe() on it


