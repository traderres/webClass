Exercise 14a / Advanced Stock Trade / Setup Layout (Answers)
------------------------------------------------------------


Business Rules:
 A) If the user selects "Limit Order", then the "Limit Price Textbox appears
 B) If the user enters a symbol in the textbox and presses the "Quote" button, then show info about that stock/mutual fund



Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AdvancedStockTrade
    b. Add the route to constants.ts:         the route will be this:   page/advanced-stock-trade
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Fill in the layout
    NOTE:  Do *NOT* add dropdowns or textboxes yet

		View #1 / After user has entered a stock symbol
		+------------------------------------------------------------------------------------+
		| Advanced Stock Trade                                                          Help |
		+------------------------------------------------------------------------------------+    <-- grey-400 border around this symbol/textbox/info section
		|                              | Berkshire Hathaway B              as of 10:18:44 am |
		|     <Symbol> <Quote Btn>     | ----------------------------------------------------+
		|                              | Price:        $411.79 | Prev Close:          409.92 |    <-- background color is #efefef
		|                              | Volume:       306,599 | Day Range:  408.60 - 411.79 |
		+------------------------------+-----------------------------------------------------+
		|  <Action  Dropdown>                <Quantity textbox>                              |
		|  -- Buy Shares                                                                     |
		|  -- Buy Mutual Funds                                                               |
		|  -- Sell Shares                                                                    |
		|  -- Sell Mutual Funds                                                              |
		|                                                                                    |
		|  <Order Type Dropdown>            <Limit Price Textbox>                            |   <-- background color is white
		|  -- Market Order                                                                   |
		|  -- Limit Order                                                                    |
		|                                                                                    |
		|                <Cancel Btn>  <Submit Order Btn>   [Save for Later]                 |
		+------------------------------------------------------------------------------------+


		View #2 / On page load (no stock symbol is entered)
		+------------------------------------------------------------------------------------+
		| Advanced Stock Trade                                                          Help |
		+------------------------------------------------------------------------------------+
		|                              |                                                     |  <-- grey-400 border around this symbol/textbox/info section
		|     <Symbol> <Quote Btn>     |                                                     |  <-- background color is #efefef
		|                              |                                                     |
		|                              |                                                     |
		+------------------------------+-----------------------------------------------------+
		|  <Action  Dropdown>                <Quantity textbox>                              |
		|  -- Buy Shares                                                                     |
		|  -- Buy Mutual Funds                                                               |
		|  -- Sell Shares                                                                    |
		|  -- Sell Mutual Funds                                                              |
		|                                                                                    |
		|  <Order Type Dropdown>            <Limit Price Textbox>                            |
		|  -- Market Order                                                                   |
		|  -- Limit Order                                                                    |
		|                                                                                    |
		|                <Cancel Btn>  <Submit Order Btn>   [Save for Later]                 |
		+------------------------------------------------------------------------------------+


 3. Replace "Action Dropdown" with a real HTML dropdown that has 4 options:
			11  Buy Shares
			12  Buy Mutual Funds
			13  Sell Shares
			14  Sell Mutual Funds


 4. Replace the "Order Type" dropdown with a real HTML dropdown that has 2 options
 			201	Market Order
 			202	Limit Order


 5. Add the remaining HTML controls:  Add the textboxes and buttons


    Possible HTML Answer
    --------------------
	<div class="m-2.5" xmlns="http://www.w3.org/1999/html">

	  <!--  Top Header-->
	  <div class="grid grid-cols-2">

		<div><span class="text-xl">Advanced Stock Page</span></div>
		<div class="flex place-content-end">
		  <button title="Help Button" aria-label="Help Button" rbr-outline-button>Help</button>
		</div>

	  </div>

	  <!--  Symbol/Textbox/Info Section-->
	  <div class="flex flex-row divide-x divide-solid divide-blue-600 border border-gray-400 bg-[#efefef] mt-5 rounded-lg">

		<div class="flex place-content-center self-center w-[500px] p-2.5">
		  <input matInput type="text" title="Symbol Textbox" aria-label="Symbol Textbox" class="mr-5" placeholder="Symbol">
		  <button title="Quote Button" aria-label="Quote Button" rbr-solid-button>Quote</button>
		</div>

		<div class="flex flex-col flex-grow divide-y divide-solid divide-blue-600">


		  <div class="grid grid-cols-2">
			<div class="p-2">Berkshire Hathaway B</div>
			<div class="flex place-content-end p-2">as of 10:18:44 am</div>
		  </div>

		  <div class="grid grid-cols-4 gap-x-2.5">
			<!--        First Row-->
			<div class="p-2">Price:</div>
			<div class="flex place-content-end p-2 border-r border-black">$411.79</div>
			<div class="p-2">Prev Close:</div>
			<div class="flex place-content-end p-2">$409.92</div>

			<!--        Second Row-->
			<div class="p-2">Volume:</div>
			<div class="flex place-content-end p-2 border-r border-black">306,599</div>
			<div class="p-2">Day Range:</div>
			<div class="flex place-content-end p-2">408.60 - 411.79</div>
		  </div>

		</div>

	  </div>
	  <!--  Main Section-->

	  <div class="mt-2.5">
		<div class="grid grid-cols-2 mx-5 gap-y-2.5">
		  <div>
			<mat-form-field subscriptSizing="dynamic" class="max-reduced-density">
			  <mat-label>Action</mat-label>
			  <mat-select title="Action" aria-label="Action">
				<mat-option [value]=1>Buy Shares</mat-option>
				<mat-option [value]=2>Buy Mutual Funds</mat-option>
				<mat-option [value]=3>Sell Shares</mat-option>
				<mat-option [value]=4>Sell Mutual Funds</mat-option>
			  </mat-select>
			</mat-form-field>
		  </div>
		  <div>
			<mat-form-field subscriptSizing="dynamic">
			  <mat-label>Quantity</mat-label>
			  <input matInput type="text" title="Quantity" aria-label="Quantity"/>
			</mat-form-field>
		  </div>

		  <div>
			<mat-form-field subscriptSizing="dynamic">
			  <mat-label>Order Type</mat-label>
			  <mat-select title="Order Type" aria-label="Order Type" #orderType>
				<mat-option [value]=1>Market Order</mat-option>
				<mat-option [value]=2>Limit Order</mat-option>
			  </mat-select>

			</mat-form-field>

		  </div>

		  <div>
			<mat-form-field subscriptSizing="dynamic" *ngIf="orderType.value==2">
			  <mat-label>Limit Price</mat-label>
			  <input matInput type="text" title="Limit Price" aria-label="Limit Price"/>
			</mat-form-field>
		  </div>
		</div>

		<!--  Bottom Button Bar-->
		<div class="flex flex-row gap-5 place-content-center mt-2.5">
		  <div>
			<button rbr-outline-button type="button" title="Reset Button" aria-label="Reset Button">Reset</button>
		  </div>
		  <div>
			<button rbr-solid-button type="button" title="Submit Button" aria-label="Submit Button">Submit</button>
		  </div>
		  <div class="self-center">

			<a title="Save for Later" aria-label="Save for Later" class="underline">Save for Later</a>
		  </div>
		</div>

	  </div>
	</div>


	**OR**

	<div class="m-2.5" xmlns="http://www.w3.org/1999/html">

      <!--  Top Header-->
      <div class="grid grid-cols-2">

        <div><span class="text-xl">Advanced Stock Page</span></div>
        <div class="flex place-content-end">
          <button title="Help Button" aria-label="Help Button" rbr-outline-button>Help</button>
        </div>

      </div>

      <!--  Symbol/Textbox/Info Section-->
      <div class="flex flex-row divide-x divide-solid divide-gray-400    border border-gray-400 bg-[#efefef] mt-5 rounded-lg">

        <div class="flex place-content-center self-center w-[500px] p-2.5">
          <mat-form-field subscriptSizing="dynamic">
            <input matInput type="text" title="Symbol Textbox" aria-label="Symbol Textbox" class="mr-5" placeholder="Symbol">
          </mat-form-field>

          <button title="Quote Button" aria-label="Quote Button" rbr-solid-button>Quote</button>
        </div>

        <div class="flex flex-col flex-grow divide-y divide-solid divide-gray-400">


          <div class="grid grid-cols-2">
            <div class="p-2">Berkshire Hathaway B</div>
            <div class="flex place-content-end p-2">as of 10:18:44 am</div>
          </div>

          <div class="grid grid-cols-4 gap-x-2.5">
            <!-- First Row-->
            <div class="p-2">Price:</div>
            <div class="flex place-content-end p-2 border-r border-black">$411.79</div>
            <div class="p-2">Prev Close:</div>
            <div class="flex place-content-end p-2">$409.92</div>

            <!-- Second Row-->
            <div class="p-2">Volume:</div>
            <div class="flex place-content-end p-2 border-r border-black">306,599</div>
            <div class="p-2">Day Range:</div>
            <div class="flex place-content-end p-2">408.60 - 411.79</div>
          </div>

        </div>

      </div>
      <!--  Main Section-->

      <div class="mt-2.5">
        <div class="grid grid-cols-2 mx-5 gap-y-2.5">
          <div>
            <mat-form-field subscriptSizing="dynamic" class="max-reduced-density">
              <mat-label>Action</mat-label>
              <mat-select title="Action" aria-label="Action">
                <mat-option [value]=1>Buy Shares</mat-option>
                <mat-option [value]=2>Buy Mutual Funds</mat-option>
                <mat-option [value]=3>Sell Shares</mat-option>
                <mat-option [value]=4>Sell Mutual Funds</mat-option>
              </mat-select>
            </mat-form-field>
          </div>
          <div>
            <mat-form-field subscriptSizing="dynamic">
              <mat-label>Quantity</mat-label>
              <input matInput type="text" title="Quantity" aria-label="Quantity"/>
            </mat-form-field>
          </div>

          <div>
            <mat-form-field subscriptSizing="dynamic">
              <mat-label>Order Type</mat-label>
              <mat-select title="Order Type" aria-label="Order Type" #orderType>
                <mat-option [value]=1>Market Order</mat-option>
                <mat-option [value]=2>Limit Order</mat-option>
              </mat-select>

            </mat-form-field>

          </div>

          <div>
            <mat-form-field subscriptSizing="dynamic" *ngIf="orderType.value==2">
              <mat-label>Limit Price</mat-label>
              <input matInput type="text" title="Limit Price" aria-label="Limit Price"/>
            </mat-form-field>
          </div>
        </div>

        <!--  Bottom Button Bar-->
        <div class="flex flex-row gap-5 place-content-center mt-2.5">
          <div>
            <button rbr-outline-button type="button" title="Reset Button" aria-label="Reset Button">Reset</button>
          </div>
          <div>
            <button rbr-solid-button type="button" title="Submit Button" aria-label="Submit Button">Submit</button>
          </div>
          <div class="self-center">

            <a title="Save for Later" aria-label="Save for Later" class="underline">Save for Later</a>
          </div>
        </div>

      </div>
    </div>



	Possible SCSS Answer
	--------------------
	@use '@angular/material' as mat;

    :host ::ng-deep .reduced-density {
      /* Tell the form field to use less padding.  Angular Material ranges from 0 (normal) to -5 (less padding)  */
      @include mat.form-field-density(-1);
    }




 6. When a user selects a "Limit Order" option, show the "Limit Price" textbox

	a. Add an HTML Template variable to the "Order Type" dropdown

		  <!-- Order Type Dropdown -->
		  <div>
			<mat-form-field subscriptSizing="dynamic" class="reduced-density">
			  <mat-label>Order Type</mat-label>

			  <mat-select #orderType>
				<mat-option [value]=201>Market Order</mat-option>
				<mat-option [value]=202>Limit Order</mat-option>
			  </mat-select>

			</mat-form-field>
		  </div>


	b. Add an *ngIf to the "Limit Price" mat-form-field

		  <!-- Limit Price Textbox -->
		  <div class="col-span-3">
			<mat-form-field subscriptSizing="dynamic" class="reduced-density" *ngIf="orderType.value == 202">
			  <mat-label>Limit Price</mat-label>

			  <input type="text" matInput>

			</mat-form-field>
		  </div>


 7. When a user presses the "Help" button, a slide-over "Help Div" should appear
    -- This div should stretch to use 40% of the page width
    -- The bottom of this help div should align with the bottom of the page
    -- The top    of this help div should cover the "Help" button
    -- Pressing Escape should hide it
    -- Use div should have a different background color

		View #3 / User pressed "Help"
		+-----------------------------------------------+-----------------------------------------------+
		| Advanced Stock Trade                          | Stock Trade Help                       <Close>|
		+-----------------------------------------------|                                               |
		|                              |                |  <bullet> You cannot buy fractional shares    |
		|     <Symbol> <Quote Btn>     |                |  <bullet> You can buy fractional mutual funds |
		|                              |                |  <bullet> Limit Orders require a limit price  |
		|                              |                |                                               |
		+------------------------------+----------------|                                               |
		|  <Action  Dropdown>                <Quantity t|                                               |
		|  -- Buy Shares                                |                                               |
		|  -- Buy Mutual Funds                          |                                               |
		|  -- Sell Shares                               |                                               |
		|  -- Sell Mutual Funds                         |                                               |
		|                                               |                                               |
		|  <Order Type Dropdown>            <Limit Price|                                               |
		|  -- Market Order                              |                                               |
		|  -- Limit Order                               |                                               |
		|                                               |                                               |
		|                <Cancel Btn>  <Submit Order Btn|                                               |
		+-----------------------------------------------------------------------------------------------+

	a. Add the "collapsed-div" and "expanded-div" css classes

			.collapsed-div {
			  /* Collapse over 500 milliseconds */
			  @apply  w-0 overflow-hidden opacity-0 transition-all ease-in-out  duration-500
			}

			.expanded-div {
			  /* Expand over 500 milliseconds.  We don't need to set the width as the original div has w-2/5
				 NOTE:  Use the overflow-x-hidden to hide the horizontal scrollbar  [makes expanding look more polished]
			  */
			  @apply  overflow-x-hidden opacity-100 transition-all  ease-in-out  duration-500 z-10;
			}


	b. In the typescript, add the class variable that holds isHelpExpanded

	c. Add 2 public methods:
			openHelp()  which will set the flag to true
			closeHelp() which will set the flag to false

	d. Have the Help button call openHelp()

	e. In the HTML add the side-help:

		<!-- Help Side-drawer Container takes 40% of the page using w-2/5 -->
		<div class="collapsed-div absolute top-20 right-0 w-2/5 bg-backDropColor border-black border-l-2 border p-5 flex flex-col gap-5"
			 [ngClass]="{
						   'expanded-div':  this.isHelpNavBarExpanded,
						   'collapsed-div': !this.isHelpNavBarExpanded
					   }"
			 style="height: calc(100vh - 80px)">

		  <div class="grid grid-cols-2 h-full">
			<div class="text-xl font-bold">
			  <span>Help</span>
			</div>

			<div class="flex place-content-end">
			  <button (click)="this.closeHelp()"
					  type="button"
					  rbr-outline-button
					  aria-label="Help"
					  title="Help">
				Close
			  </button>
			</div>
		  </div>

		  <div class="h-full">
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help<br/>
			This is my help (last)<br/>
		  </div>

		</div>




 8. Load the "Actions" dropdown using an async-pipe and a frontend service
	a. Create a frontend DTO:  MyLookupDTO   (if it doesn't already exist)

			export class MyLookupDTO {
			  public id: number;
			  public value: string;
			}


    b. Create a frontend Service:  MyLookupService
       1) Create the service
       2) Add a public method to this service called getOrderActions()
       3) Create a local variable that holds FAKE DATA [with the ACTION info]
       4) Convert the variable into an observable
       5) Return the observable

			  public getOrderActions(): Observable<MyLookupDTO[]> {
				let data: MyLookupDTO[] = [
				  {
					id: 1,
					value: 'Buy Shares'
				  },
				  {
					id: 2,
					value: 'Buy Mutual Funds'
				  },
				  {
					id: 3,
					value: 'Sell Shares'
				  },
				  {
					id: 4,
					value: 'Sell Mutual Funds'
				  },
				  ];

				return of(data);
			  }

    c. In the Typescript, we need to *INITIALIZE* the observable
       1) Create a class variable:  obsActions     [it is an observable that holds an array of MyLookupDTO objects]
			public obsActions:    Observable<MyLookupDTO[]>;

       2) Inject the MyLookupService
			public constructor(private myLookupService: MyLookupService) {}

       3) In the ngOnInit(), initialize the observable
			public ngOnInit(): void {
				...
				this.obsActions = this.myLookupService.getOrderActions();
			}


    d. In the HTML, add the async-pipe *AND* loop through the array of priorities
       1) Remove the hard-coded <mat-option> tags
       2) Use the *ngIf and async-pipe to invoke the REST call
       3) Replace them with a *ngFor loop

			<mat-form-field subscriptSizing="dynamic" class="max-reduced-density">
			  <mat-label>Action</mat-label>
			  <mat-select title="Action" aria-label="Action">

				<ng-container *ngIf="(this.obsActions | async) as actions">

				  <ng-container *ngFor="let dto of actions">
					<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
				  </ng-container>

				</ng-container>

			  </mat-select>
			</mat-form-field>



 9. Load the "Order Type" dropdown using an async-pipe and a frontend service
	a. Create a frontend DTO:  MyLookupDTO   (if it doesn't already exist)

    b. Create a frontend Service:  MyLookupService
       1) Create the service
       2) Add a public method to this service called getOrderTypes()
       3) Create a local variable that holds FAKE DATA [with the ORDER TYPE info]
       4) Convert the variable into an observable
       5) Return the observable

		  public getOrderTypes(): Observable<MyLookupDTO[]> {
			let data: MyLookupDTO[] = [
			  {
				id: 1,
				value: 'Market Order'
			  },
			  {
				id: 2,
				value: 'Limit Order'
			  }
			  ];

			return of(data);
		  }

    c. In the Typescript, we need to *INITIALIZE* the observable
       1) Create a class variable:  obsOrderTypes     [it is an observable that holds an array of MyLookupDTO objects]
       		public obsOrderTypes: Observable<MyLookupDTO[]>;

       2) Inject the MyLookupService
      		public constructor(private myLookupService: MyLookupService) {}

       3) In the ngOnInit(), initialize the observable
			public ngOnInit(): void {
				...
				this.obsOrderTypes = this.myLookupService.getOrderTypes();
			}

    d. In the HTML, add the async-pipe *AND* loop through the array of priorities
       1) Remove the hard-coded <mat-option> tags
       2) Use the *ngIf and async-pipe to invoke the REST call
       3) Replace them with a *ngFor loop

			<mat-form-field subscriptSizing="dynamic">
			  <mat-label>Order Type</mat-label>
			  <mat-select title="Order Type" aria-label="Order Type" #orderType>

				<ng-container *ngIf="(this.obsOrderTypes | async) as orderTypes">

				  <ng-container *ngFor="let dto of orderTypes">

					<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
				  </ng-container>
				</ng-container>

			  </mat-select>

			</mat-form-field>