Exercise 3b / How to make the "Limit Price" textbox disappear
-------------------------------------------------------------
Problem:  The "Limit Price" textbox is visible *ONLY IF* the user selects "Limit Order"

            +---------------------------------------------------------------------------------+
            | Stock Trade                                                          <Help Btn> |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            |    <Action Dropdown>             <Quantity Textbox>           <Symbol Textbox>  |
            |        Buy Stock                                                                |
            |        Buy Mutual Fund                                                          |
            |        Sell Stock                                                               |
            |        Sell Mutual Fund                                                         |
            |                                                                                 |
            |    <Order Type Dropdown>         <Limit Price Textbox>                          |   The Limit Price Textbox is visible *ONLY *IF* the user selects "Limit Order"
            |        Market Order                                                             |
            |        Limit Order                                                              |
            |                                                                                 |
            |                 <Reset Btn>  <Review Order Btn>   Save for later                |
            +---------------------------------------------------------------------------------+


Approach 1:  Use a Template Variable
------------------------------------
 1. Create a template variable on the order type dropdown
 2. Add an *ngIf statement (that looks at the value of the orderType)


	Advantages of Template Variables
	 1) We can get the value of a single control easily
	 2) Super easy to code
	 3) No TypeScript coding at all!!!






Approach 2:  Use two way-binding with a Class Variable
------------------------------------------------------
Two Way Binding means this:
	A) Changing the class variable ---> Causes the dropdown to change
	B) Change the dropdown         ---> Causes the class variable to change

 1. Create a class variable that holds the value of the order type dropdown
 2. Use an *ngIf on the "Limit Price" textbox (based on the class variable)


	Advantages of using class Variable and ngModel
	 1) Simple / Not a lot of code
	 2) Works well for a form that has FEW controls






Approach 3:  We can use a Reactive Form  [advanced] / Recommended for forms with 3 or more controls
---------------------------------------------------------------------------------------------------
 1. Create a class variable  called myForm
 2. Inject the formBuilder service
 3. Use the formBuilder to initialize myForm
 4. Add <form> tag to your HTML
 5. Bind each form control to the myForm object
 6. OPTIONAL:  Show information in real-time using <pre>...</pre> tags
 7. Bind the order type dropdown to myForm
 8. Use an *ngIf to make the limit price field appear/disappear


	Advantages of Reactive Form
	1. One variable to get access to everything:  myForm
	2. Easy to add another control
	3. We can watch every click on every control
		-- We can run code before the user presses "Submit"
		-- We can tell if the user typed-in a letter or a digit

	4. We have powerful validators
	5. We can see the value of every field
	6. To reset the form:  it's a one-liner
             this.myForm.reset()


	Disadvantages of Reactive Form
	1. COMPLEX:  Lot of steps to setup / easy to mess up
	2. Easy to screw up:  misspell the field in formControlName and it doesn't work
	3. You can only access this.myForm *INSIDE* the <form>...</form>
	4. Validators can be confusing




