Exercise 18c / Ask Many Questions with Mat-Step / Stop the User from Submitting Again
-------------------------------------------------------------------------------------
Problem:  The user has submitted registration
		  The user now sees the "Pending Registration Verification" page
		  The user presses the "Back" button in the browser and can register a SECOND time!!!
Solution: Create a guard to prevent this from happening



Order of Operations
-------------------
 1) When a user *FIRST* connects to the webapp, insert a USERS record with users.registration_state=1  (pending registration)
 2) When a user *SUBMITS registration, update the record by setting users.registration_state=2
 3) User sees the "Pending Registration Verification" page
 4) User Presses Back
 	-- PROBLEM:  User can see "Register User" page a *SECOND* time



Part 1 / Create a REST call that gets the logged-in user's current registration state
-------------------------------------------------------------------------------------
 1. Develop the contract for this REST call
 	a. What is the URL?
 	   Rule:  Must start with /api

 	b. What is the URL Type?
 			GET			Used for read-only operations
 			PUT			Used for write operations and passing-in 1 parameter on the URL
 			POST   		Used for write operations and passing-in multiple parameters [no limit]
 			DELETE		Used for write operations involving deletes

 	c. What is passed-in?

 	d. What is returned?

 	e. What checks are made on the passed-in data?

 	f. What security roles are granted access to this REST call?

 	g. What does this REST call do


 2. Create a backend DTO:  UserRegistrationInfoDTO
 	-- Add the registration state to it


 3. Add a method to the backend UserService:  getUserRegistrationInfo()
 	-- It queries the database for the current registration state
 	-- It puts the info into a DTO
 	-- It returns the DTO


 4. Add a method to the backend UserController:  getUserRegistrationInfo()


 5. Verify the REST call works with Postman




Part 2 / Create a frontend service that can invoke this REST call
------------------------------------------------------------------
 1. Create the frontend DTO:  UserRegistrationInfoDTO


 2. Add a public method to the frontend userService:  getUserRegistrationInfo()
 	-- What's passed-in?  Look at the contract.
 	-- What's returned?   Look at the contract.



Part 3 / Create a guard that prevents the user from registering twice
---------------------------------------------------------------------
 1. Create the guard
    terminal> ng generate guard guards/StopUserFromRegisteringAgain  --implements CanActivate

 	MAJOR PROBLEM:  Angular has deprecated guards so we're going to turn it into a namespace (like a static class in Angular)


 2. Change the guard into a namespace
 	Replace your code with this:

		export namespace StopUserFromRegisteringAgainGuard {

		   @Injectable({
			 providedIn: 'root'
		   })
		   class InternalPageGuardService {

			}
		}


 3. Inside your InternalPageGuardService, add a constructor

 		export namespace StopUserFromRegisteringAgainGuard {

 		   @Injectable({
 			 providedIn: 'root'
 		   })
 		   class InternalPageGuardService {

 		 		constructor() {  }

 			}
 		}


 4. Inject the router and userService

  		export namespace StopUserFromRegisteringAgainGuard {

  		   @Injectable({
  			 providedIn: 'root'
  		   })
  		   class InternalPageGuardService {

   			  constructor(private router: Router,
               			  private userService: UserService) {}

  			}
  		}

 5. Add a method called canActivate() inside your InternalPageGuardService



 6. Outside of your InternalPageGuardService, call your method and inject the InternalPageGuardService




 7. Protect the "Register User" page
 	a. Edit app.module.ts

 	b. Add the guard to canActivate

 	  { path:  Constants.REGISTER_USER_ROUTE,     component: RegisterUserComponent,        canActivate: [PageGuard.canActivate, StopUserFromRegisteringAgainGuard.canActivate ] },


  Now, if a user attempts to go back, the guard will redirect the user back to the "Pending Registration Verification" page

