Exercise 6a / Smooth Horizontal Animation (Answers)
---------------------------------------------------
Problem:  Sometimes you want a div to appear or disappear with animation (going horizontally)
Solution: Use CSS transitions




Exercise
--------
 1. Setup the Page
    a. Generate the component:                Call it SmoothHorizAnimation
    b. Add the route to constants.ts:         the route will be this:   page/smooth-horiz-animation
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Setup this page layout

     +---------------------------------------------------------------+
     | Smooth Horiz Transition                           View Options|
     +---------------------------------------------------------------+
     |                |                            |                 |
     |   Left Side    |        Center Div          |    Right Side   |
     |     Div        |                            |       Div       |
     |                |                            |                 |
     |                |                            |                 |
     |                |                            |                 |
     +---------------------------------------------------------------+
         250px wide       <rest of the page width>          250px wide



     Possible Answer w/flex-grow-height trick
     ----------------------------------------
     <div class="p-2.5 flex flex-col h-full">

       <!--  T O P      O F      P A G E   -->
       <div class="grid grid-cols-2">
         <div>
           <span class="text-xl">Smooth Horizontal Animation</span>
         </div>
         <div class="flex place-content-end">
           Help
         </div>
       </div>


       <!--  B O T T O M        O F      P A G E   -->
       <!--  NOTE:  The flex-grow is used to have the bottom of hte page use the REMAINING height -->
       <div class="flex flex-grow h-full mt-5 overflow-y-auto">

         <div class="flex flex-row gap-x-2.5 h-full w-full">

           <!--   L E F T      S I D E       D I V  -->
           <div class="w-[250px] mat-elevation-z4 m-2.5 p-2.5">
             <div class="flex place-content-center">Left Side Div</div>
           </div>

           <!--   C E N T E R      D I V  -->
           <div class="flex flex-grow mat-elevation-z4 m-2.5  p-2.5">
             <div class="w-full">
               <span class="flex place-content-center">Center Div</span>
             </div>
           </div>

           <!--   R I G H T       S I D E       D I V  -->
           <div class="w-[250px] mat-elevation-z4 m-2.5  p-2.5">
             <div class="flex place-content-center">Right Side Div</div>
           </div>

         </div>

       </div>

     </div>



	 Possible Answer w/calc trick
	 ----------------------------
		<div class="m-2.5">

		  <!-- TOP OF PAGE -->
		  <div class="grid grid-cols-2">
			<div>
			  <span class="text-xl">
				Smooth Horizontal Animation
			  </span>
			</div>

			<div class="flex place-content-end">
			  View Options
			</div>
		  </div>

		  <!-- BOTTOM OF PAGE -->
		  <div>

			<!-- Have the rest of the page use the remaining height of the page -->
			<div class="overflow-y-auto" style="height: calc(100vh - 130px)">

			  <div class="flex flex-row gap-x-2.5 h-full">

    			<!--   L E F T      S I D E       D I V  -->
				<div class="w-[250px] mat-elevation-z4 m-2.5 p-2.5">
				  <div class="flex place-content-center">Left Side Div</div>
				</div>

 				<!--   C E N T E R      D I V  -->
				<div class="flex flex-grow mat-elevation-z4 m-2.5  p-2.5">
				  <div class="w-full">
					<span class="flex place-content-center">Center Div</span>
				  </div>
				</div>

				<!--   R I G H T       S I D E       D I V  -->
				<div class="w-[250px] mat-elevation-z4 m-2.5  p-2.5">
				  <div class="flex place-content-center">Right Side Div</div>
				</div>

			  </div>
			</div>

		  </div>


		</div>



 3. Replace "View Options" with a popup menu w/3 values
      Reset to Default Layout
      Toggle Left Side
      Toggle Right Side


	a. Create the popup menu options:

		  	<!-- Popup Menu Options -->
			<mat-menu #menu1="matMenu">
				<button mat-menu-item title="Reset to Default Layout" aria-label="Reset Grid">Reset to Default Layout</button>
				<button mat-menu-item title="Toggle Left Side" aria-label="Toggle Left Side">Toggle Left Side</button>
				<button mat-menu-item title="Toggle Right Side" aria-label="Toggle Right Side">Toggle Right Side</button>
			</mat-menu>

    b. Create a button that opens/closes the popop menu

		  	<!-- Popup Menu Button -->
			<button rbr-stripped-button  [matMenuTriggerFor]="menu1"
					title="View Options" aria-label="View Options">
				<span>View Options</span>
			</button>



 4. Pressing "Hide Left Side" makes the left-side DIV disappear [instantly]
	a. Create a class variable:
			public showLeftDiv: boolean = true;

	b. Create a method:
			public toggleLeftSideDiv(): void {
				this.showLeftDiv = !this.showLeftDiv;
			}

	c. Have the "Toggle Left Side" button call this new method
			<mat-menu #menu1="matMenu">
				<button mat-menu-item title="Reset to Default Layout" aria-label="Reset Grid">Reset to Default Layout</button>
				<button mat-menu-item (click)="this.toggleLeftSideDiv()" title="Toggle Left Side" aria-label="Toggle Left Side">Toggle Left Side</button>
				<button mat-menu-item title="Toggle Right Side" aria-label="Toggle Right Side">Toggle Right Side</button>
			</mat-menu>

	d. Add an *ngIf to the left-side div
		 	 <!--   L E F T      S I D E       D I V  -->
	  		 <div *ngIf="this.showLeftDiv" class="w-[250px] mat-elevation-z4 m-2.5 p-2.5">
              	<div class="flex place-content-center">Left Side Div</div>
            </div>



 5. Pressing "Hide Left Side" makes the left-side DIV disappear [using animation over 500 milliseconds]
	a. Add the 2 CSS classes
			.show-div {
			  @apply transition-all ease-in-out duration-300 m-2.5;
			}

			.hide-div {
			  /* It's important that the width be set to zero.  */
			  @apply transition-all ease-in-out duration-300 overflow-hidden w-0  m-0 p-0 ;
			}


	b. In the HTML, change the left-side div to conditionally apply a class
        WARNING:  The left-side div must have an initial width for this to work:  so the w-[250px] is important

			<!--   L E F T      S I D E       D I V  -->
			<div class="w-[250px] mat-elevation-z4 "
				 [ngClass]="{
							  'show-div':  this.showLeftDiv,
							  'hide-div':  !this.showLeftDiv
							}">

			  <div class="flex place-content-center">Left Side Div</div>
			</div>




 6. Pressing "Hide Right Side" makes the right-side DIV disappear [instantly]
	a. Create a class variable:
			public showRightDiv: boolean = true;

	b. Create a method:
			public toggleRightSideDiv(): void {
				this.showRightDiv = !this.showRightDiv;
			}

	c. Have the "Toggle Right Side" button call this new method
			<mat-menu #menu1="matMenu">
				<button mat-menu-item title="Reset to Default Layout" aria-label="Reset Grid">Reset to Default Layout</button>
				<button mat-menu-item (click)="this.toggleLeftSideDiv()"  title="Toggle Left Side" aria-label="Toggle Left Side">Toggle Left Side</button>
				<button mat-menu-item (click)="this.toggleRightSideDiv()" title="Toggle Right Side" aria-label="Toggle Right Side">Toggle Right Side</button>
			</mat-menu>

	d. Add an *ngIf to the right-side div
			<!--   R I G H T       S I D E       D I V  -->
			<div *ngIf="this.showRightDiv" class="w-[250px] mat-elevation-z4 m-2.5  p-2.5">
			  <div class="flex place-content-center">Right Side Div</div>
			</div>


 7. Pressing "Hide Right Side" makes the right-side DIV disappear [using animation over milliseconds]
    WARNING:  The Right-side div must have an initial width for this to work:  so the w-[250px] is important

			<!--   R I G H T       S I D E       D I V  -->
			<div class="w-[250px] mat-elevation-z4 "
				 [ngClass]="{
							  'show-div':  this.showRightDiv,
							  'hide-div':  !this.showRightDiv
						    }">

			  <div class="flex place-content-center">Right Side Div</div>
			</div>



 8. Pressing "Reset to Default Layout" restores the layout back to the default [using animation over milliseconds]

	a. Create a public method:
			public resetDefaultLayout(): void {
				this.showRightDiv = true;
				this.showLeftDiv = true;
			}

	b. Have the Button call the method
				<mat-menu #menu1="matMenu">
    				<button mat-menu-item (click)="this.resetDefaultLayout()" title="Reset to Default Layout" aria-label="Reset Grid">Reset to Default Layout</button>
    				<button mat-menu-item (click)="this.toggleLeftSideDiv()"  title="Toggle Left Side" aria-label="Toggle Left Side">Toggle Left Side</button>
    				<button mat-menu-item (click)="this.toggleRightSideDiv()" title="Toggle Right Side" aria-label="Toggle Right Side">Toggle Right Side</button>
    			</mat-menu>



  At this point, the SCSS looks like this
  ---------------------------------------
	  .show-div {
		@apply transition-all ease-in-out duration-300 m-2.5;
	  }

	  .hide-div {
		/* It's important that the width be set to zero and have overflow-hidden  */
		@apply transition-all ease-in-out duration-300 overflow-hidden w-0  m-0 p-0 ;
	  }


  At this point, the HTML looks like this
  ---------------------------------------
  <div class="m-2.5">

	<!-- TOP OF PAGE -->
	<div class="grid grid-cols-2">
	  <div>
		<span class="text-xl">
		  Smooth Horizontal Animation
		</span>
	  </div>

	  <div class="flex place-content-end">
		<!-- Popup Menu Button -->
		<button rbr-stripped-button  [matMenuTriggerFor]="menu1"
				title="View Options" aria-label="View Options">
		  <span>View Options</span>
		</button>

		<!-- Popup Menu Options -->
		<mat-menu #menu1="matMenu">
			<button mat-menu-item (click)="this.resetDefaultLayout()" title="Reset to Default Layout" aria-label="Reset Grid">Reset to Default Layout</button>
			<button mat-menu-item (click)="this.toggleLeftSideDiv()"  title="Toggle Left Side" aria-label="Toggle Left Side">Toggle Left Side</button>
			<button mat-menu-item (click)="this.toggleRightSideDiv()" title="Toggle Right Side" aria-label="Toggle Right Side">Toggle Right Side</button>
		</mat-menu>

	  </div>
	</div>

	<!-- BOTTOM OF PAGE -->
	<div>

	  <!-- Have the rest of the page use the remaining height of the page -->
	  <div class="overflow-y-auto" style="height: calc(100vh - 135px)">

		<div class="flex flex-row gap-x-2.5 h-full">

		  <!--   L E F T      S I D E       D I V  -->
		  <div class="w-[250px] mat-elevation-z4 "
			   [ngClass]="{
							'show-div':  this.showLeftDiv,
							'hide-div':  !this.showLeftDiv
						  }">

			<div class="flex place-content-center">Left Side Div</div>
		  </div>


	   	  <!--   C E N T E R      D I V  -->
		  <div class="flex flex-grow mat-elevation-z4 my-2.5  p-2.5">

			<div class="w-full">
			  <span class="flex place-content-center">Center Div</span>
			</div>
		  </div>


		  <!--   R I G H T       S I D E       D I V  -->
		  <div class="w-[250px] mat-elevation-z4 "
			   [ngClass]="{
							'show-div':  this.showRightDiv,
							'hide-div':  !this.showRightDiv
						  }">

			<div class="flex place-content-center">Right Side Div</div>
		  </div>

		</div>
	  </div>

	</div>


  </div>



  At this point, the TypeScript looks like this
  ---------------------------------------------
  import { Component } from '@angular/core';

  @Component({
    selector: 'app-smooth-horiz-animation',
    templateUrl: './smooth-horiz-animation.component.html',
    styleUrls: ['./smooth-horiz-animation.component.scss']
  })
  export class SmoothHorizAnimationComponent {

    public showLeftDiv: boolean = true;
    public showRightDiv: boolean = true;

    public toggleLeftSideDiv(): void {
      this.showLeftDiv = !this.showLeftDiv;
    }


    public toggleRightSideDiv(): void {
      this.showRightDiv = !this.showRightDiv;
    }

    public resetDefaultLayout(): void {
      this.showRightDiv = true;
      this.showLeftDiv = true;
    }

  }

