Exercise 18a / Ask Many Questions with Mat-Step / Add REST Call
---------------------------------------------------------------
Problem:  I want to ask the user lots of questions
          I want one Submit REST call that adds a record to the USERS table with
          If the user leaves the page, all information is lost
Solution: Create a REST call that updates the USERS record and sets registration_state=2


Order of Operations
-------------------
 1) When a user *FIRST* connects to the webapp, insert a USERS record with users.registration_state=1  (pending registration)
 2) When a user *SUBMITS registration, update the record by setting users.registration_state=2


            +---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            |         Step 1            Step 2            Step 3            Step 4            |
            |       User Profile      Business Info     Backup Contact      Review            |
            |                                                                                 |
            |                                                                                 |
            |         Review                                                                  |
            |             Username Readonly Textbox                                           |
            |             Title Readonly Textbox                                              |
            |             Email Readonly Textbox                                              |
            |             Phone Readonly Textbox                                              |
            |             Business CAGE Readonly Textbox                                      |
            |                                                                                 |
            |                             <Prev>    <Submit>                                  |
            +---------------------------------------------------------------------------------+
            Pressing "Submit" should invoke REST call and disable all buttons while waiting



Part 1 / Develop the REST Call Contract to save this info
----------------------------------------------------------
     a. What is the URL?
        Rule:  Must start with /api

     b. What is the URL Type?
             GET            Used for read-only operations
             PUT            Used for write operations and passing-in 1 parameter on the URL
             POST           Used for write operations and passing-in multiple parameters [no limit]
             DELETE        Used for write operations involving deletes

     c. What is passed-in?

     d. What is returned?

     e. What checks are made on the passed-in data?

     f. What security roles are granted access to this REST call?

     g. What does this REST call do





Part 2 / Build the REST call on the backend
-------------------------------------------
 1. Add some database tables:
      a. Add a new database table:  registration_states
        -- It should have 2 columns:  id and name
        -- The id column is the primary key

    b. Add 4 records to it
        1,Unregistered
        2,Waiting for Verification
        3,Registration Approved
        4,Registration Denied

     c. Add a column to the users table:  users.registration_state
        NOTE:  This columns is required and it has a default value of 1 (Unregistered)
        NOTE:  This is a foreign key to the registration_states.id column


 2. Create the backend DTO for your REST call contract
    -- It should hold the full name and email address


 3. Create the backend service:  RegistrationService
    a. Add a public method called registerUser()
    b. Pass-in the DTO into this method
    c. This method will update the USERS for the logged-in userid
        -- Take a look at the contract!!
        -- WARNING!!!  Do not updated the Users.cert_username as that is NOT changeable!!!  (it is hard-coded on a CAC)

 4. Create the backend controller: RegistrationController
    a. Add a public method called registerUser()  // This is your REST call
    b. Have your method call your RegistrationService.registerUser() method


 5. Verify the REST call works using Postman



Part 3 / Create a "Registration Pending Verification" page
----------------------------------------------------------
 1. Part 1 / Setup the Page
    a. Generate the component                 registration-pending-verification
    b. Add the route to constants.ts:         the route will be this:   page/registration-pending-verification
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works


 2. Fill-in the layout
    NOTE:  There is no page title
           There is no help button
           There is a font-awesome icon with a check (surrounded by a circle) / make it 240 pixels tall / give it a color of rgba(21, 189, 73, 0.76)
           There is a large 25px margin around the whole page

            +----------------------------------------------------------------------------------+
            |                                                                                  |
            |                        ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣷⣶⣴⣾⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀                        |
            |                        ⠀⠀⠀⠀⣀⣤⣤⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣤⣤⣄⠀⠀⠀⠀                            |
            |                        ⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀                            |
            |                        ⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀                            |
            |                        ⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀                            |
            |                        ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠈⢻⣿⣿⣿⣿⣿⣿⣿                            |
            |                        ⢿⣿⣿⣿⣿⣿⣿⣿⡿⠻⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿                            |
            |                        ⢈⣿⣿⣿⣿⣿⣿⣯⡀⠀⠈⠻⣿⣿⣿⠟⠁⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⡁                            |
            |                        ⣾⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠈⠛⠁⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷                            |
            |                        ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿                            |
            |                        ⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁                            |
            |                        ⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀                            |
            |                        ⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀                            |
            |                        ⠀⠀⠀⠀⠉⠛⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠉⠁⠀⠀⠀                            |
            |                        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⠿⢿⡻⠿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀                            |
            |                                                                                  |
            |                             Submission Received                                  |
            |                                                                                  |
            |                    Your registration was successfully submitted and a            |
            |                    reviewer will look through your application shortly.          |
            +----------------------------------------------------------------------------------+

 3. Remove the this page from the left-side navbar (as users will not navigate to it)





Part 4 / Integrate the REST call on the frontend
------------------------------------------------
 1. Create the frontend DTO


 2. Create the frontend service:  RegistrationService
     a. Create the service

     b. Create a public method that invokes the REST call


 3. When the user presses "Submit",
     a. Create a DTO
     b. Invoke the REST call
     c. If the REST call finishes successfully, take the user to the "Registration Pending Verification" page
         1) Inject the router
         2) Use the router to navigate the user to the "Registration Pending Verification" page
    d. Try it out


 4. In the RegistrationService.registerUser() method
     -- Add a 5-second delay to the observable



 5. Show spinner and disable mat-step header buttons, Previous, and Submit buttons while waiting
    a. Add a class variable:  submitInProgress / initialize to false

    b. Add a CSS class:   not-clickable
       NOTE:  When this CSS class is applied, it will *STOP* all pointer/click events

    c. In the submitClicked() event handler
        1. Set the submitInProgress = true

           2. In the REST call finally block, set the flag to false


    d. In the HTML / apply the not-clickable CSS class to the <mat-stepper> if submitInProgress==TRUE


    e. In the HTML / Disable the "Previous" and "Submit" buttons if submitInProgress==TRUE


    f. In the HTML / Change the "Submit" button to be "Saving..." and show a spinner if submitInProgress==TRUE


