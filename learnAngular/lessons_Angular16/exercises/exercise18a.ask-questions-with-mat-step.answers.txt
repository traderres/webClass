Exercise 18a / Ask Many Questions with Mat-Step (Answers)
---------------------------------------------------------
Problem:  I want to ask the user lots of questions
          I want one Submit REST call that saves it all
          If the user leaves the page, all information is lost

Solution: Use the Angular Material <mat-stepper> and <mat-step>

            +---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
            +---------------------------------------------------------------------------------+
            |         Step 1            Step 2            Step 3            Step 4            |
            |       User Profile      Business Info     Backup POC          Review            |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            |       User Profile                                                              |
            |          		<Username Textbox>                                                |
            |          		<Title Textbox>                                                   |
            |          		<Email Textbox>                                                   |
            |          		<Phone Textbox>                                                   |
            |                                                                                 |
            |                                    <Next>                                       |
            +---------------------------------------------------------------------------------+
			Showing Step 1 / User Profile


            +---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
            +---------------------------------------------------------------------------------+
            |         Step 1            Step 2            Step 3            Step 4            |
            |       User Profile      Business Info     Backup POC          Review            |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            |       Business Info                                                             |
            |       	<Business CAGE Textbox>   <Verify>                                    |
            |                                                                                 |
            |           Company Info                                                          |
            |                6KY98     RBR-Technologies, Inc.                                 |
            |                                                                                 |
            |                               <Prev>      <Next>                                |
            +---------------------------------------------------------------------------------+
			Showing Step 2 / Business Info


			+---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
			+---------------------------------------------------------------------------------+
            |         Step 1            Step 2            Step 3            Step 4            |
            |       User Profile      Business Info     Backup POC          Review            |
			+---------------------------------------------------------------------------------+
			|                                                                                 |
			|       Backup Point of Contact                                                   |
			|             Backup Contact Full Name Textbox                                    |
			|             Backup Contact Email Textbox                                        |
			|             Backup Contact Phone Number Textbox                                 |
			|                                                                                 |
			|                               <Prev>      <Next>                                |
			+---------------------------------------------------------------------------------+
			Showing Step 3 / Backup POC


			+---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
			+---------------------------------------------------------------------------------+
            |         Step 1            Step 2            Step 3            Step 4            |
            |       User Profile      Business Info     Backup POC          Review            |
			+---------------------------------------------------------------------------------+
			|                                                                                 |
			|       Review                                                                    |
			|             Entered Username 				[Readonly]                            |
			|             Entered Title    				[Readonly]                            |
			|             Entered Email    				[Readonly]                            |
			|             Entered Phone                 [Readonly]                            |
			|             Entered CAGE / Business Name  [Readonly]                            |
			|                                                                                 |
			|                             <Prev>    <Submit>                                  |
			+---------------------------------------------------------------------------------+
			Showing Step 4 / Review


Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 register-user
    b. Add the route to constants.ts:         the route will be this:   page/register-user
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Fill in the layout for the top of hte page only

            +---------------------------------------------------------------------------------+
            | User Registration                                                    <Help Btn> |
            +---------------------------------------------------------------------------------+
            | Bottom of Page                                                                  |
            +---------------------------------------------------------------------------------+


		<div class="m-2.5">

		  <div class="grid grid-cols-2">
			<div>
			  <span class="text-xl">User Registration</span>
			</div>

			<div class="flex place-content-end">Help</div>
		  </div>

		  <div class="mt-2.5">

		  </div>

		</div>


 3. Change the bottom of the page so it has a variable height:

		 <div class="m-2.5">

		   <div class="grid grid-cols-2">
			 <div>
			   <span class="text-xl">User Registration</span>
			 </div>

			 <div class="flex place-content-end">Help</div>
		   </div>

		   <div class="mt-2.5 overflow-y-auto" style="height: calc(100vh - 145px)">
				Bottom of Page
		   </div>

		 </div>



 4. Add the mat-stepper wrapper tags
 	-- All steps go in this mat-stepper tag
 	-- Set linear = true
 	-- Set label position = "bottom"
 	-- Assign an HTML Template variable called stepper

 	 	    <mat-stepper labelPosition="bottom" [linear]=true #stepper>



 5. Fill-in the *FIRST* step:  User Profile
	a. Inside the <mat-stepper>, add the <mat-step> tag

			<mat-step>


	b. Inside the <mat-step>, add the step's label:  User Profile

			<ng-template matStepLabel>User Profile</ng-template>


	c. Inside the first step, add the layout:
			+---------------------------------------------------------------------------------+
			|         User Profile                                                            |
			|          		<Username Textbox>                                                |
			|          		<Title Textbox>                                                   |
			|          		<Email Textbox>                                                   |
			|          		<Phone Textbox>                                                   |
			|                                                                                 |
			|                                <Next>                                           |
			+---------------------------------------------------------------------------------+


	At this point, the HTML looks like this:
	----------------------------------------
	<div class="m-2.5">

	  <div class="grid grid-cols-2">
		<div>
		  <span class="text-xl">User Registration</span>
		</div>

		<div class="flex place-content-end">Help</div>
	  </div>

	  <div class="mt-2.5 overflow-y-auto" style="height: calc(100vh - 145px)">

		<mat-stepper labelPosition="bottom" [linear]=true #stepper>

		  <!--   S T E P    # 1    /       U S E R       P R O F I L E  -->
		  <mat-step >

			<!-- Set the Step Label -->
			<ng-template matStepLabel>User Profile</ng-template>

			<div class="mt-2.5 border border-10">
			  <span class="text-xl">User Profile</span>

			  <div class="ml-2.5 flex flex-col gap-y-2.5">
				<div>
				  Username Textbox
				</div>

				<div>
				  Title Textbox
				</div>

				<div>
				  Email Textbox
				</div>

				<div>
				  Phone Textbox
				</div>

				<div class="flex place-content-center">
				  <div>
					Next button
				  </div>
				</div>
			  </div>


			</div>
		  </mat-step>




		</mat-stepper>

	  </div>

	</div>




 6. Fill-in the *SECOND* step:  Business Info

	a. Inside the <mat-stepper>, add the SECOND <mat-step> tag

			<mat-step>


	b. Inside the <mat-step>, add the step's label:  Business Info

			<ng-template matStepLabel>Business Info</ng-template>


	c. Inside the step, add the layout:
			+---------------------------------------------------------------------------------+
            |         Business Info                                                           |
            |          		<Business CAGE Textbox>   <Verify>                                |
            |                                                                                 |
            |         Company Info                                                            |
            |                6KY98     RBR-Technologies, Inc.                                 |
            |                                                                                 |
            |                               <Prev>      <Next>                                |
			+---------------------------------------------------------------------------------+



 7. Fill-in the *THIRD* step:  Backup POC

	a. Inside the <mat-stepper>, add the SECOND <mat-step> tag

			<mat-step>


	b. Inside the <mat-step>, add the step's label:  Backup POC

			<ng-template matStepLabel>Backup POC</ng-template>


	c. Inside the step, add the layout:
			+---------------------------------------------------------------------------------+
			|       Backup Point of Contact                                                   |
			|             Backup Contact Full Name Textbox                                    |
			|             Backup Contact Email Textbox                                        |
			|             Backup Contact Phone Number Textbox                                 |
			|                                                                                 |
			|                               <Prev>      <Next>                                |
			+---------------------------------------------------------------------------------+



 8. Fill-in the *FOURTH* step:  Review

	a. Inside the <mat-stepper>, add the <mat-step> tag

			<mat-step>


	b. Inside the <mat-step>, add the step's label:  Review

			<ng-template matStepLabel>Review</ng-template>


	c. Inside the step, add the layout:
			+---------------------------------------------------------------------------------+
			|       Review                                                                    |
			|             Entered Username 				[Readonly]                            |
			|             Entered Title    				[Readonly]                            |
			|             Entered Email    				[Readonly]                            |
			|             Entered Phone                 [Readonly]                            |
			|             Entered CAGE / Business Name  [Readonly]                            |
			|                                                                                 |
			|                             <Prev>    <Submit>                                  |
			+---------------------------------------------------------------------------------+



 9. Adjust the stepper icons so that they always numeric
	a. Define the icon to show a number of the state when state="number"
	b. Define the icon to show a number of the state when state="done"
	a. Define the icon to show a number of the state when state="edit"


      <!-- Define the icon for state="number"  -->
      <ng-template matStepperIcon="number" let-index="index">
        <span>{{index + 1}}</span>
      </ng-template>

      <!-- Define the icon for state="done" -->
      <ng-template matStepperIcon="done" let-index="index">
        <span>{{index + 1}}</span>
      </ng-template>

      <!-- Define the icon for the *SELECTED* step  (by default it is state="edit")  -->
      <ng-template matStepperIcon="edit" let-index="index">
        <span>{{index + 1}}</span>
      </ng-template>



10. Adjust the "Previous" and "Next" buttons so that they advance to the previous/next steps
 	a. Create a public class variable that refers to the #stepper HTML template variable
 	  		@ViewChild('stepper') public stepper: MatStepper;


	b. Create a public method:  nextClicked()
	   1) This method will mark the current step as selected

	   2) This method will advance the stepper to the next step


	c. Create a public method:  previousClicked()
	   1) This method will return the stepper to the previous step


	d. Create a public method:  submitClicked()
	   1) This method does nothing

	e. Add click handlers for the buttons



              <div>
                <button type="button" mat-raised-button (click)="this.previousClicked()" title="Previous" aria-label="Previous">Prev</button>
              </div>

              <div>
                <button type="button" mat-raised-button (click)="this.nextClicked()" title="Next" aria-label="Next">Next</button>
              </div>



		  public nextClicked(): void {
			// marks the steps as completed so the use can go back and forth
			if (this.stepper.selected) {
			  this.stepper.selected.completed = true;
			}

			// move to next step
			this.stepper.next();
		  }

		  public previousClicked(): void {
			// Return to the previous step
			this.stepper.previous();
		  }


		  public submitClicked(): void {

		  }


11. Prevent the user from advancing to step 2 without filling-in step 1
	Change all of the <mat-step> so that they are NOT completed
	NOTE:  Pressing "Next" will mark the steps as completed (so the user can go back to it)

	From this:
	   <mat-step>

	To this:
	   <mat-step [completed]="false">


	At this point, the HTML looks like this:
	----------------------------------------
	<div class="m-2.5">

	  <div class="grid grid-cols-2">
		<div>
		  <span class="text-xl">User Registration</span>
		</div>

		<div class="flex place-content-end">Help</div>
	  </div>

	  <div class="mt-2.5 overflow-y-auto" style="height: calc(100vh - 145px)">

		<mat-stepper labelPosition="bottom" [linear]=true #stepper>

		  <!-- Define the icon for state="number"  -->
		  <ng-template matStepperIcon="number" let-index="index">
			<span>{{index + 1}}</span>
		  </ng-template>

		  <!-- Define the icon for state="done" -->
		  <ng-template matStepperIcon="done" let-index="index">
			<span>{{index + 1}}</span>
		  </ng-template>

		  <!-- Define the icon for the *SELECTED* step  (by default it is state="edit")  -->
		  <ng-template matStepperIcon="edit" let-index="index">
			<span>{{index + 1}}</span>
		  </ng-template>



		  <!--   S T E P    # 1    /       U S E R       P R O F I L E  -->
		  <mat-step [completed]="false">

			<!-- Set the Step Label -->
			<ng-template matStepLabel>User Profile</ng-template>

			<div class="p-2.5 mt-2.5 border border-10">
			  <span class="text-xl">User Profile</span>

			  <div class="ml-2.5 flex flex-col gap-y-2.5">
				<div>
				  Username Textbox
				</div>

				<div>
				  Title Textbox
				</div>

				<div>
				  Email Textbox
				</div>

				<div>
				  Phone Textbox
				</div>

				<div class="flex place-content-center">
				  <div>
					<button type="button" mat-raised-button (click)="this.nextClicked()" title="Next" aria-label="Next">Next</button>
				  </div>
				</div>
			  </div>


			</div>
		  </mat-step>

		  <!--   S T E P    # 2    /    B U S I N E S S       I N F O  -->
		  <mat-step [completed]="false">
			<ng-template matStepLabel>Business Info</ng-template>

			<div class="p-2.5 mt-2.5 border border-10">
			  <span class="text-xl">Business Info</span>

			  <div class="ml-2.5 flex flex-col gap-y-2.5">
				<div>
				  Business CAGE Textbox
				</div>

				<div>
				  List of Registered CAGE Codes
				</div>

				<div class="flex place-content-center gap-x-2.5">
				  <div>
					<button type="button" mat-raised-button (click)="this.previousClicked()" title="Previous" aria-label="Previous">Prev</button>
				  </div>

				  <div>
					<button type="button" mat-raised-button (click)="this.nextClicked()" title="Next" aria-label="Next">Next</button>
				  </div>
				</div>
			  </div>


			</div>
		  </mat-step>


		  <!--   S T E P    # 3    /    B A C K U P       P O C     -->
		  <mat-step [completed]="false">
			<ng-template matStepLabel>Backup POC</ng-template>

			<div class="p-2.5 mt-2.5 border border-10">
			  <span class="text-xl">Backup Point of Contact</span>

			  <div class="ml-2.5 flex flex-col gap-y-2.5">
				<div>
				  Backup Contact Full Name Textbox
				</div>

				<div>
				  Backup Contact Email Textbox
				</div>

				<div>
				  Backup Contact Phone Number Textbox
				</div>

				<div class="flex place-content-center gap-x-2.5">
				  <div>
					<button type="button" mat-raised-button (click)="this.previousClicked()" title="Previous" aria-label="Previous">Prev</button>
				  </div>

				  <div>
					<button type="button" mat-raised-button (click)="this.nextClicked()" title="Next" aria-label="Next">Next</button>
				  </div>
				</div>
			  </div>


			</div>
		  </mat-step>



		  <!--   S T E P    # 4    /    R E V I E W      -->
		  <mat-step [completed]="false">
			<ng-template matStepLabel>Review</ng-template>

			<div class="p-2.5 mt-2.5 border border-10">
			  <span class="text-xl">Review</span>

			  <div class="ml-2.5 flex flex-col gap-y-2.5">
				<div>
				  Entered Username
				</div>

				<div>
				  Entered Title
				</div>

				<div>
				  Entered Email
				</div>

				<div>
				  Entered Phone
				</div>

				<div>
				  Entered CAGE / Business Name
				</div>

				<div class="flex place-content-center gap-x-2.5">
				  <div>
					<button type="button" mat-raised-button (click)="this.previousClicked()" title="Previous" aria-label="Previous">Prev</button>
				  </div>

				  <div>
					<button type="button" mat-raised-button color="accent" (click)="this.submitClicked()" title="Submit" aria-label="Submit">Submit</button>
				  </div>
				</div>
			  </div>


			</div>
		  </mat-step>

		</mat-stepper>

	  </div>

	</div>


	At this point, the TypeScript looks like this:
	----------------------------------------------
	import {Component, ViewChild} from '@angular/core';
	import {MatStepper} from "@angular/material/stepper";

	@Component({
	  selector: 'app-register-user',
	  templateUrl: './register-user.component.html',
	  styleUrls: ['./register-user.component.scss']
	})
	export class RegisterUserComponent {
	  @ViewChild('stepper')  stepper: MatStepper;


	  public nextClicked(): void {
		// marks the steps as completed so the use can go back and forth
		if (this.stepper.selected) {
		  this.stepper.selected.completed = true;
		}

		// move to next step
		this.stepper.next();
	  }

	  public previousClicked(): void {
		// Return to the previous step
		this.stepper.previous();
	  }


	  public submitClicked(): void {

	  }

	}



12. Fill-in the remaining HTML controls




13. Add a reactive form
    a. Inject the formBuilder service

    b. Create a class variable  called myForm

    c. Initialize myForm in ngOnInit()

    d. Add <form> tag to your HTML

    e. bind controls to your myForm object using formControlName

    f. Display form values with a <pre>...</pre> tag




Part 2:  Add Frontend Validation
--------------------------------
 1. Disable the "Next" buttons if there are invalid form fields on page 1, page 2, and page 3
	a. Make all of the form fields required on page 1
	b. If any of the form fields are invalid on page 1, then disable the "Next" button on page 1

	c. Make all of hte form fields requires on page 2
	d. If any of the form fields are invalid on page 2, then disable the "Next" button on page 2

	e. Make all of hte form fields requires on page 3
    f. If any of the form fields are invalid on page 3, then disable the "Next" button on page 2



 2. Add a custom validator: emailValidator
	a. Add a public method to your ValidatorService:  emailValidator

		  public emailValidator(): ValidatorFn {

			return (control: AbstractControl) => {

			  // if its null or empty string return a "required" error message
			  //otherwise its good, so return null

			  let emailText: string = control.value;
			  if (emailText == null || emailText == "") {
				// Email field is empty so return error
				return {'emailError': `Please provide an email`};
			  }
			  else {
				//The /i at the end will make the regular expression case insensitive
				if(emailText.match( /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$/i )) {
				  // The email is valid so return null
				  return  null;
				}
				else {
				  // The email is not valid.
				  return {'emailError':`Please provide a valid email`};
				}

			  }
			}
		  }

	b. This method checks if the email has a valid syntax
	c. Inject the ValidatorService into your main page
	d. Apply the ValidatorService.emailValidator() to your email field



 3. Add a custom validator: phoneNumberValidator
	a. Add a public method to your ValidatorService:  phoneNumberValidator

		  public phoneNumberValidator():ValidatorFn {
			return (control: AbstractControl) => {

			  // if its null or empty string return a "required" error message
			  // if its not 13 characters minlength then return a message of it needing to be 13 characters long
			  //otherwise its good, so return null

			  let contractNumberText: string = control.value;
			  if (contractNumberText == null || contractNumberText == "") {
				// Zipcode is valid so return null
				return {'telephoneNumberText': `Telephone number is required`};
			  }

			  else{
				if(contractNumberText.match( /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/)) {
				  // this telephone number is a phone number.  So, it's good.  So, return null.
				  return  null;
				}
				else {
				  // This telephone number is not telephone number format.  SO, it's bad.
				  return {'telephoneNumberText':`Your Telephone Number was not in a recognized telephone number format`};
				}

			  }

			}
		  }


	b. This method checks if the email has a valid syntax
	c. Inject the ValidatorService into your main page
	d. Apply the ValidatorService.phoneNumberValidator() to your phone number field



 4. Add a directive to your phone number so it shows-up as xxx-xxx-xxxx
	a. Create the directive:  phoneMask
       terminal> ng generate directive directives/phoneMask

    b. Replace the contents of phone-mask.directive.ts with this:

			import {Directive, HostListener} from '@angular/core';
			import {NgControl} from "@angular/forms";

			@Directive({
			  selector: '[appPhoneMask]'
			})
			export class PhoneMaskDirective {

			  constructor(public ngControl: NgControl) { }

			  /*
			   * Angular has detected the model has changed
			   */
			  @HostListener('ngModelChange', ['$event'])
			  onModelChange(event: any) {
				this.onInputChange(event, false);
			  }

			  /*
			   * The user pressed the backspace key
			   */
			  @HostListener('keydown.backspace', ['$event'])
			  keydownBackspace(event: { target: { value: any; }; }) {
				this.onInputChange(event.target.value, true);
			  }

			  /*
			   * Examine the text and update it
			   */
			  onInputChange(event: string, backspace: boolean) {
				if (! event) {
				  return;
				}
				else if (! this.ngControl.valueAccessor) {
				  return;
				}

				// Remove any non-digits from the entered value
				let newVal = event.replace(/\D/g, '');

				if (backspace && newVal.length <= 6) {
				  newVal = newVal.substring(0, newVal.length - 1);
				}
				if (newVal.length === 0) {
				  newVal = '';
				}
				else if (newVal.length <= 3) {
				  newVal = newVal.replace(/^(\d{0,3})/, '($1)');
				}
				else if (newVal.length <= 6) {
				  newVal = newVal.replace(/^(\d{0,3})(\d{0,3})/, '($1) $2');
				}
				else if (newVal.length <= 10) {
				  newVal = newVal.replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/, '($1) $2-$3');
				}
				else {
				  newVal = newVal.substring(0, 10);
				  newVal = newVal.replace(/^(\d{0,3})(\d{0,3})(\d{0,4})/, '($1) $2-$3');
				}

				this.ngControl.valueAccessor.writeValue(newVal);
			  }  // end of onInputChange()

			}


	c. Apply the appPhoneMask directive to your phone number text box

	       <input type="text" appPhoneMask formControlName="phoneNumber" matInput title="Enter Phone Number" aria-label="Enter Phone Number" />


