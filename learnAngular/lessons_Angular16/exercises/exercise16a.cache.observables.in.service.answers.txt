Exercise 16a / Cache Observables in Frontend Services (Answers)
---------------------------------------------------------------
Problem:  I want to reduce the number of REST calls made to load dropdowns
          We haven't added a state to the USA since Hawaii was added in 1959
          So, how do I cache the dropdown of USA states on the frontend?

Solution: Add a cache to your frontend service




Part 1:  Create a slow REST call that returns USA States
--------------------------------------------------------
The REST Call Contract is as follows:
	 a. What's the URL?    		/api/my-lookup/usa-states
	 b. What is the URL Type?	GET
	 c. What is passed-in?  Nothing
	 d. What is returned?   List of MyStateDTO objects
								holds a id     		-- e.g., 50
								holds a stateCode   -- e.g., "MD"
								holds a stateName   -- e.g., "Maryland"

	 e. What checks are made on the passed-in data?
		N/A  (There is no passed-in data)

	 f. Which roles are allowed to use this REST call?
		All of them

	 g. What does this REST call do?
			-- Return a list of DTOs that hold information about the USA states




 1. Create a backend DTO class:  MyStateDTO
 	a. Add the 3 fields: id, stateCode, and stateName
 	b. Generate the getters & setters

		package com.lessons.models;

		import com.fasterxml.jackson.annotation.JsonProperty;

		public class MyStateDTO {
			@JsonProperty("id")
			private Integer id;

			@JsonProperty("stateCode")
			private String stateCode;

			@JsonProperty("stateName")
			private String stateName;


			// --------------------------- Getters & Setters ---------------------------
			public Integer getId() {
				return id;
			}

			public void setId(Integer id) {
				this.id = id;
			}

			public String getStateCode() {
				return stateCode;
			}

			public void setStateCode(String stateCode) {
				this.stateCode = stateCode;
			}

			public String getStateName() {
				return stateName;
			}

			public void setStateName(String stateName) {
				this.stateName = stateName;
			}
		}


 2. Create a backend service class
 	a. Crete the backend service class:  MyLookupService

 	b. Add the @Service annotation (above the name of the class)
 	   NOTE:  This tells Spring to instantiate this class as a singleton and make it injectable

 	c. Add a logger
 	   NOTE:  No, we don't use print statements on the backend.  Not.  Ever.

 	e. Create a public method called getAllUsaStates() that returns a List of MyStateDTO objects

 	f. Fill-in this method so it returns a list that has 2 DTOs
 		a. Create a FIRST MyStateDTO object and put in information for a state  -- e.g., "Maryland" / "MD"
 		b. Create a SECOND MyStateDTO object and put in information for a state -- e.g., "Virginia" / "VA"
		c. Create a List
		d. Add the 2 DTOs to the list
		e. return the list

	g. Make this method *SLOW* by adding this it

			try {
				// Add a 5 second delay
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				throw new RuntimeException(e);
			}


		The MyLookupService could look like this
		----------------------------------------
		package com.lessons.services;

        import com.lessons.models.MyStateDTO;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.stereotype.Service;

        import java.util.Arrays;
        import java.util.List;

        @Service
        public class MyLookupService {
            private static final Logger logger = LoggerFactory.getLogger(MyLookupService.class);

            public List<MyStateDTO> getAllUsaStates() {

                MyStateDTO state1 = new MyStateDTO();
                state1.setId(1);
                state1.setStateCode("MD");
                state1.setStateName("Maryland");

                MyStateDTO state2 = new MyStateDTO();
                state2.setId(2);
                state2.setStateCode("VA");
                state2.setStateName("Virginia");

                List<MyStateDTO> listOfStates = Arrays.asList(state1, state2);

                try {
                    // Add a 5 second delay
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                return listOfStates;
            }

        }




 3. Create a backend controller class
 	a. Create the backend controller class:  MyLookupController

 	b. Add the @Controller annotation (above the name of the class)
 	   NOTE:  This tells Spring that this is where REST calls will start

 	c. Add a logger

 	d. Inject the MyLookupService

 	e. Create a public method called getAllUsaStates()
 		-- It returns a ResponseEntity<?>
		-- Nothing is passed-in

 	f. Add the @RequestMapping annotation
 	 		value = URL of this REST call
 	 		method = URL Type of this REST call
 	 		produces = "application/json"

 	g. Limit which security roles can hit this REST call by adding the @PreAuthorize annotation
       Ex) This limits this REST call to only these 2 roles
		 	 @PreAuthorize("hasAnyRole('CVF_SUPERVISOR', 'CVF_SPECIALIST')")

 	h. Have the method call your MyLookupService.getAllUsaStates() to get a list of DTOs

 	i. Have the method return the list of DTOs


		The Java Controller class could look like this
		----------------------------------------------
		package com.lessons.controllers;

		import com.lessons.models.MyStateDTO;
		import com.lessons.services.MyLookupService;
		import jakarta.annotation.Resource;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;

		import java.util.List;

		@Controller
		public class MyLookupController {
			private static final Logger logger = LoggerFactory.getLogger(MyLookupController.class);

			@Resource
			private MyLookupService myLookupService;

			@RequestMapping(value = "/api/my-lookup/usa-states", method = RequestMethod.GET, produces = "application/json")
			public ResponseEntity<?> getAllUsaStates() {
				// Get the list of USA states
				List<MyStateDTO> listOfStates = myLookupService.getAllUsaStates();

				// Return the list to the frontend with a 200 status code
				return ResponseEntity.status(HttpStatus.OK)
						.body(listOfStates);

			}

		}



 4. Use Postman to verify that the REST call works
    a. Startup the backend
    	-- Read the 3rd last line from the output

    b. Startup Postman
    	-- Attempt to hit the REST call

    c. Verify that the REST call returns the data you expect
	   -- It should return something like this:

	   [
           {
               "id": 1,
               "stateCode": "MD",
               "stateName": "Maryland"
           },
           {
               "id": 2,
               "stateCode": "VA",
               "stateName": "Virginia"
           }
       ]


	d. Verify that the REST call is *SLOW*




Part 2:  Setup the Page Layout with a hard-coded dropdown of USA States
-----------------------------------------------------------------------
 1. Setup the Page
    a. Generate the component                 UserProfile
    b. Add the route to constants.ts:         the route will be this:   page/user-profile
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works



 2. Fill in the layout
    NOTE:  Do not add the Form Controls

            +---------------------------------------------------------------------------------+
            | User Profile                                                       Help Button  |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            | <Full Name Text Box>                                                            |
            |                                                                                 |
            | <Address Line 1 Text Box>                                                       |
            | <Address Line 2 Text Box>                                                       |
            | <City Text Box>     <USA State Dropdown>   <ZipCode Text Box>                   |
            |                                                                                 |
            |                             <Reset>   <Update>                                  |
            +---------------------------------------------------------------------------------+



 3. Add Form Controls
    a. Create a dropdown for the USA States
 		value is 1      user sees "MD / Maryland"
 		value is 2      user sees "VA / Virginia"
 		value is 3      user sees "DC / District of Columbia"

    b. Add the text boxes

    c. Add the buttons



		Possible HTML could look like this:
		-----------------------------------
		<div class="m-2.5">
		  <div class="grid grid-cols-2">
			<div>
			  <span class="text-xl">User Profile</span>
			</div>

			<div class="flex place-content-end">
			  <button type="button" rbr-outline-button aria-label="Help" title="Help">Help</button>
			</div>
		  </div>

		  <div class="mt-2.5">

			<div class="flex flex-col gap-y-2.5 ml-2.5">

			  <div class="w-[250px]">
				<mat-form-field subscriptSizing="dynamic" class="w-full">
				  <mat-label>User Name</mat-label>

				  <!-- Username Text Box -->
				  <input type="text" matInput aria-label="User Name" title="User Name"/>
				</mat-form-field>
			  </div>

			  <div class="w-[470px]">
				<mat-form-field subscriptSizing="dynamic" class="w-full">
				  <mat-label>Address Line 1</mat-label>

				  <!-- Address Line 1 Text Box -->
				  <input type="text" matInput aria-label="Address Line 1" title="Address Line 1"/>
				</mat-form-field>
			  </div>

			  <div class="w-[470px]">
				<mat-form-field subscriptSizing="dynamic" class="w-full">
				  <mat-label>Address Line 2</mat-label>

				  <!-- Address Line 2 Text Box -->
				  <input type="text" matInput aria-label="Address Line 2" title="Address Line 2"/>
				</mat-form-field>
			  </div>

			  <div class="flex flex-row gap-x-2.5">
				<div class="w-[200px]">
				  <mat-form-field subscriptSizing="dynamic" class="w-full">
					<mat-label>City</mat-label>

					<!-- City Text Box -->
					<input type="text" matInput aria-label="City" title="City"/>
				  </mat-form-field>
				</div>

				<div class="w-[125px]">
				  <mat-form-field subscriptSizing="dynamic" class="w-full">
					<mat-label>State</mat-label>

					<!-- Set the panelWidth to an empty string so that the panel stretches to the widest option -->
					<mat-select title="USA State" aria-label="USA State" panelWidth="">
					  <mat-option [value]=1>MD / Maryland</mat-option>
					  <mat-option [value]=1>VA / Virginia</mat-option>
					  <mat-option [value]=1>DC / District of Columbia</mat-option>
					</mat-select>
				  </mat-form-field>
				</div>

				<div class="w-[125px]">
				  <mat-form-field subscriptSizing="dynamic" class="w-full">
					<mat-label>Zip Code</mat-label>

					<!-- Zip Code Text Box -->
					<input type="text" matInput aria-label="Zip Code" title="Zip Code"/>
				  </mat-form-field>
				</div>
			  </div>

			  <div class="flex flex-row place-content-center gap-x-2.5">
				<div>
				  <button type="button" rbr-outline-button aria-label="Reset" title="Reset">Reset</button>
				</div>
				<div>
				  <button type="button" rbr-solid-button aria-label="Update" title="Update">Update</button>
				</div>
			  </div>

			</div>

		  </div>

		</div>





Part 3:  Have the page invoke a Fake REST call to get all USA States
--------------------------------------------------------------------
 1. Create a frontend DTO:  MyStateDTO
 	-- It has 3 fields:
			 id     	 -- e.g., 50
			 stateCode   -- e.g., "MD"
			 stateName   -- e.g., "Maryland"


		export class MyStateDTO {
		  public id:        number;
		  public stateCode: string;
		  public stateName: string;
		}



 2. Create a frontend Service:  MyLookupService
    a. Create the service

    b. Add a public method to this service called getAllUsaStates()
		-- It returns an Observable that holds an array of MyStateDTO objects
		-- Nothing is passed-in

    c. Create a local variable that holds the 3 fake records
 		    1 / MD / Maryland
 		    2 / VA / Virginia
 		    3 / DC / District of Columbia

    d. Convert the variable into an observable

    e. Return the observable


		TypeScript could look like this
		-------------------------------
		public getAllUsaStates(): Observable<MyStateDTO[]> {
			let data: MyStateDTO[] = [
			  {
				id: 1,
				stateCode: 'MD',
				stateName: 'Maryland'
			  },
			  {
				id: 2,
				stateCode: 'VA',
				stateName: 'Virginia'
			  },
			  {
				id: 3,
				stateCode: 'DC',
				stateName: 'District of Columbia'
			  }
			  ];

			return of(data);
		}


 3. In the main page Typescript, *INITIALIZE* the observable
 	a. Create a public class variable: obsUsaStates
 	   -- It is an observable that holds *ARRAY* of MyLookupDTO objects

 	b. Inject the MyLookupService

 	c. In the ngOnInit(), initialize the observable


	  TypeScript could look like this:
	  --------------------------------
	  import {Component, OnInit} from '@angular/core';
      import {MyStateDTO} from "../../models/my-state-dto";
      import {Observable} from "rxjs";
      import {MyLookupService} from "../../services/my-lookup.service";

      @Component({
        selector: 'app-user-profile',
        templateUrl: './user-profile.component.html',
        styleUrls: ['./user-profile.component.scss']
      })
      export class UserProfileComponent implements OnInit {

          public obsUsaState: Observable<MyStateDTO[]>;

          constructor(private myLookupService: MyLookupService) { }

          public ngOnInit(): void {
            // Initialize the observable
            // NOTE:  The async-pipe will subscribe and unsubscribe to it
            this.obsUsaState = this.myLookupService.getAllUsaStates();
          }

      }




 4. In the HTML / in the States Dropdown / add the async-pipe *AND* loop through the array of USA States
 	a. In the HTML / Remove the hard-coded <mat-option> tags

	b. Add an <ng-container> with the async pipe to invoke the observable

 	c. Add an <ng-container> with a for loop to add the <mat-option> tags


		HTML could look like this:
		--------------------------
		<mat-form-field subscriptSizing="dynamic" class="w-full">
			<mat-label>State</mat-label>

			<!-- Set the panelWidth to an empty string so that the panel stretches to the widest option -->
			<mat-select title="USA State" aria-label="USA State" panelWidth="">

			  <ng-container *ngIf="(this.obsUsaState | async) as states">
				  <ng-container *ngFor="let dto of states">

					<mat-option [value]="dto.id">
						{{ dto.stateCode }} / {{ dto.stateName }}
					</mat-option>

				  </ng-container>
			  </ng-container>
			</mat-select>
		</mat-form-field>

 5. Verify the dropdown shows the 3 fake records



Part 4:  Integrate frontend and backend / Have the frontend service invoke the Real REST call
---------------------------------------------------------------------------------------------
 1. Edit the frontend service:  MyLookupService

 2. Inject the service:  httpClient

 3. Edit getAllUsaStates()
    a. Remove all of the code in this method

    b. Add a line that builds URL to invoke the REST call

 				// Construct the URL to this REST call
 				const restUrl: string = environment.baseUrl + '/api/my-lookup/usa-states';


 	c. The 2nd line returns an observable hooked-up to this url

 				// Return the observable that will invoke this REST call
 				return this.httpClient.get <MyStateDTO[]>(restUrl);


		When finished, the method looks like this
		-----------------------------------------
		public getAllUsaStates(): Observable<MyStateDTO[]> {
			// Construct the URL to this REST call
			const restUrl: string = environment.baseUrl + '/api/my-lookup/usa-states';

			// Return the observable that will invoke this REST call
			return this.httpClient.get <MyStateDTO[]>(restUrl);
		}



 4. Verify that invoking the real REST call works

 5. Verify that the dropdown does not have any options for 5 seconds

 6. Verify the REST call is *SLOW*
    -- The dropdowns options should appear after 5 seconds



Part 5:  Change the frontend service so the USA States are cached
------------------------------------------------------------------
We are going to add a class variable called "cache" to the MyLookupService that is a map

		cache
					 Key            Value
				+-------------+------------------------------+
				|     "u"     |    observable of USA states  |
				+-------------+------------------------------+
				|     "p"     |    observable of priorities  |
				+-------------+------------------------------+

 1. Edit the frontend service:  MyLookupService

 2. Add a 1st class variable: cache
    -- The type is any
    -- Initialize it to an empty map
 		private cache: any = {};


 3. Add a 2nd class variable:  USA_STATES_KEY
 	-- Set this variable as readonly
 	-- Set this variable is a string
 	-- It always holds "u"                 NOTE:  The string does not matter as long as it is unique in the cache

  		private readonly USA_STATES_KEY: string = "u";


 4. Change the getAllUsaStates() to look in the cache first
	a. Get the cache key
	b. If the observable is already in the cache, then
			return the cached observable
	   Else
	   		invoke the REST call
	   		store the observable in the cache
	   		return the cached observable


		Change it from this:
			public getAllUsaStates(): Observable<MyLookupDTO[]> {
				// Construct the URL to this REST call
				const restUrl: string = environment.baseUrl + '/api/my-lookup/usa-states';

				// Return the observable that will invoke this REST call
				return this.httpClient.get <MyStateDTO[]>(restUrl);
			}


		To this:
			public getAllUsaStates(): Observable<MyStateDTO[]> {
				const key: string = this.USA_STATES_KEY;

				if (this.cache[key]) {
				  // This observable is in the cache.  So, return it from the cache
				  return this.cache[key];
				}

				// Construct the URL to this REST call
				const restUrl: string = environment.baseUrl + '/api/my-lookup/usa-states';

				// Setup this observable so that it calls shareReplay(1) to replay the previous value
				// And, store the observable in the cache
				this.cache[key] = this.httpClient.get <MyStateDTO[]>(restUrl).pipe(
					shareReplay(1)
				 );

				// Return the observable
				return this.cache[key];
			}



 5. Verify that it works
    a. Go to the User Profile page
       -- Verify that the USA States dropdown should take 5 seconds the *FIRST* time you visit the page
    b. Go to a different page
    c. Return to the User Profile page
       -- The USA States dropdown should load instantly

	   WARNING:  If you reload the entire web page, then the cache is cleared
