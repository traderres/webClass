Exercise 21a / Acknowledgement Page / Add 2 REST Calls  (Answers)
-----------------------------------------------------------------
Create the 2 REST calls to set the acknowledgement date and to see if the user has pressed "Acknowledge" in the last 24 hours



Part 1:  Build REST Call Contract for Setting the acknowledgement date to now
-----------------------------------------------------------------------------
 1. Determine the contract
  	a. What is the URL?								/api/acknowledge/set
  	   Rule:  Must start with /api

  	b. What is the URL Type?						PUT
  			GET			Used for read-only operations
  			PUT			Used for write operations and passing-in 1 parameter on the URL
  			POST   		Used for write operations and passing-in multiple parameters [no limit]
  			DELETE		Used for write operations involving deletes

  	c. What is passed-in?							Nothing
		-- backend can ALWAYS get the logged-in userid / you have a session
		-- backend can ALWAYS get the current time

  	d. What is returned?							Nothing / of course we return a 200 status code

  	e. What checks are made on the passed-in data?	Nothing

  	f. What security roles are granted access to this REST call?
													All of them!!!!   All 4!!!

  	g. What does this REST call do?
		1) Get the current logged-in userid
		2) Run some SQL to update the acknowledgement date to now
		3) Return an 200 status code





 2. Implement the contract / FUN PART!!!  / Write some Java code
	a. Turn on the stereo really loud

	b. Add acknowledgement_date to the Database

		1) Add acknowledgement_date to the USERS table
			-- Modify the flyway scripts
			-- Change how the "create table users....."
			-- Add the OPTIONAL column called acknowledgement_date
			-- The database type is			  timestamp with time zone    *OR*   timestampz

		2) Add acknowledgement_date to the USERS_AUD table

		3) Nuke your database

		4) Refresh your Database Console

		5) Verify that you see the column


	c. Create the backend Service:  AcknowledgementService
		1) Add the @Service annotation

		2) Add a public method:      setAcknowledgementDate()
			-- What's passed-in?  Look at your contract
			-- What's returned?	  Look at your contract

		3) Figure out the SQL in your database console

		4) Run the SQL in your database console



	d. Create the Controller
		1) Add the @Controller annotation

		2) Add your logger

		3) Inject your AcknowledgementService

		4) Create a public method that is your REST call
			-- this method uses your service


 3. Verify the contract works using Postman




 REST Call Contract for getting if acknowledgement date is within the last 24 hours
 -----------------------------------------------------------------------------------
 1. Determine the contract
  	a. What is the URL?
  	   Rule:  Must start with /api							 /api/acknowledge/get

  	b. What is the URL Type?								GET
  			GET			Used for read-only operations
  			PUT			Used for write operations and passing-in 1 parameter on the URL
  			POST   		Used for write operations and passing-in multiple parameters [no limit]
  			DELETE		Used for write operations involving deletes

  	c. What is passed-in?									nothing

  	d. What is returned?									DTO that returns true/false
		DANGER BATMAN!!!

  	e. What checks are made on the passed-in data?			None

  	f. What security roles are granted access to this REST call?
															All 4 of them

  	g. What does this REST call do?
		1) Run some SQL to see if it was acknowledged in the last 24 hours

		2) if null, then create a DTO returns false

		3) if there is a date, then do some logic to see if it returned in the last 24 hours
			-- It might create a DTO that holds true
			-- it might create a DTO that holds false

		4) Return the DTO and the 200 status code




 2. Implement the contract
	a.

	b.

	c.

	d.

	e.

	f.


 3. Verify the contract works using Postman



	When finished, the AcknowledgementStatusDTO looks like this
	-----------------------------------------------------------
	package com.lessons.models;

	import com.fasterxml.jackson.annotation.JsonProperty;

	public class AcknowledgementStatusDTO {

		@JsonProperty("userHasAcknowledged")
		private final boolean userHasAcknowledged;

		public AcknowledgementStatusDTO(boolean userHasAcknowledged) {
			this.userHasAcknowledged = userHasAcknowledged;
		}

		public boolean getUserHasAcknowledged() {
			return userHasAcknowledged;
		}
	}


	When finished, the AcknowledgementService looks like this
    ---------------------------------------------------------
	package com.lessons.services;

	import com.common.utilities.AuditManager;
	import com.common.utilities.Constants;
	import jakarta.annotation.Resource;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.springframework.jdbc.core.JdbcTemplate;
	import org.springframework.jdbc.datasource.DataSourceTransactionManager;
	import org.springframework.stereotype.Service;
	import org.springframework.transaction.TransactionStatus;
	import org.springframework.transaction.support.TransactionCallbackWithoutResult;
	import org.springframework.transaction.support.TransactionTemplate;

	import javax.sql.DataSource;
	import java.util.HashMap;
	import java.util.Map;

	@Service
	public class AcknowledgementService {
		private static final Logger logger = LoggerFactory.getLogger(AcknowledgementService.class);

		@Resource
		private UserService userService;

		@Resource
		private DatabaseService databaseService;

		@Resource
		private DataSource dataSource;


		/**
		 * @param aUserid holds the number that identifies this user in the USERS table
		 * @return TRUE if the user has acknowledged DOD consent within 24 hours.  Returns FALSE if the user needs to acknowledge the DOD consent
		 */
		public boolean hasUserAcknowledgedDodConsentRecently(Integer aUserid) {

			String sql = """
						select DATE_PART('day', AGE( now() , acknowledgement_date)) as total_days
						from users
						where id=?
						""";

			JdbcTemplate jt = new JdbcTemplate(this.dataSource);

			// Execute the SQL to get the total days since the LAST time the user acknowledged dod consent
			Integer totalDaysSinceAck = jt.queryForObject(sql, Integer.class, aUserid);

			if (totalDaysSinceAck == null) {
				// The user has never acknowledged the DOD consent.  So, return FALSE as the user has not acknowledged DOD consent yet
				return false;
			}

			if (totalDaysSinceAck >= 1) {
				// The user acknowledged consent but it has been 1 or more days since.  So, return FALSE as the user needs to acknowledge DOD consent again
				return false;
			}

			// It has been under 1 day since the user last acknowledged.  So, return TRUE as the user does not need to acknowledge
			return true;
		}



		/**
		 * Run a SQL Transaction to set this user's acknowledge_dod_consent_date *AND* to set the session so it holds that the user has acknowledged the DOD consent page
		 */
		public void markUserAsAcknowledgeDodConsent() {

			TransactionTemplate tt = new TransactionTemplate();
			tt.setTransactionManager(new DataSourceTransactionManager( this.dataSource ));

			// This transaction will throw a TransactionTimedOutException after 60 seconds (causing the transaction to rollback)
			tt.setTimeout(Constants.SQL_TRANSACTION_TIMEOUT_SECS);

			tt.execute(new TransactionCallbackWithoutResult()
			{
				protected void doInTransactionWithoutResult(TransactionStatus aStatus)
				{
					AuditManager auditManager = new AuditManager(dataSource, userService.getLoggedInUserName() , databaseService.getMapTableNameToCsvOfColumns() );

					String sql = "update users set acknowledgement_date=now() where id=:userid";

					// Build the parameter map
					Map<String, Object> paramMap = new HashMap<>();
					paramMap.put("userid", userService.getLoggedInUserId() );

					// Use the auditManager to run the SQL and add an audit record
					auditManager.runSqlUpdateOne(sql, paramMap, "users_aud");

					// Commit the transaction if I get to the end of this method
				}
			});
		}

	}



	When finished, the AcknowledgementController looks like this
    ------------------------------------------------------------
	package com.lessons.controllers;

	import com.lessons.models.AcknowledgementStatusDTO;
	import com.lessons.services.AcknowledgementService;
	import com.lessons.services.UserService;
	import jakarta.annotation.Resource;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
	import org.springframework.security.access.prepost.PreAuthorize;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;

	@Controller
	public class AcknowledgementController {

		@Resource
		private AcknowledgementService acknowledgementService;

		@Resource
		private UserService userService;

		/**
		 * GET /api/acknowledge/get
		 */
		@RequestMapping(value = "/api/acknowledge/get", method = RequestMethod.GET, produces = "application/json")
		@PreAuthorize("hasAnyRole('APP16_SUPERVISOR', 'APP16_SPECIALIST', 'APP16_ADMIN', 'APP16_REVIEWER')")
		public ResponseEntity<?> getUserAcknowledged() {

			// Determine if the user has acknowledged the DOD consent
			boolean userAcknowledgedFlag = acknowledgementService.hasUserAcknowledgedDodConsentRecently(userService.getLoggedInUserId());

			// Put the flag into a DTO
			AcknowledgementStatusDTO dto = new AcknowledgementStatusDTO(userAcknowledgedFlag);

			// Return a response of 200 and the UserAcknowledgedConsentDTO back to the frontend
			return ResponseEntity.status(HttpStatus.OK).body(dto);
		}


		/**
		 * PUT /api/acknowledge/set
		 */
		@RequestMapping(value = "/api/acknowledge/set", method = RequestMethod.PUT, produces = "application/json")
		@PreAuthorize("hasAnyRole('APP16_SUPERVISOR', 'APP16_SPECIALIST', 'APP16_ADMIN', 'APP16_REVIEWER')")
		public ResponseEntity<?> setUserAcknowledged() {

			// Run a transaction to mark this user as acknowledging the DOD consent in the database *AND* session
			acknowledgementService.markUserAsAcknowledgeDodConsent();

			// Return a response of 200
			return ResponseEntity.status(HttpStatus.OK).body(null);
		}

	}

