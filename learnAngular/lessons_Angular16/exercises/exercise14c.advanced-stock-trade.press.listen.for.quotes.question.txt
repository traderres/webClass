Exercise 14c / Advanced Stock Trade / Listen on Quote Text Box
--------------------------------------------------------------
Problem:  I don't want to press the "Quote" button every time I want a quote
          As the user types-in a symbol, we will run a quote  (so we don't need the "Quote" button

Solution: Listen in on the Quote textbox and use an async pipe to apply the changes



Business Rules:
 A) If the user selects "Limit Order", then the "Limit Price Textbox appears
 B) As the user enters a symbol in the textbox get a new quote and show the info



		+------------------------------------------------------------------------------------+
		| <Symbol-Textbox>             |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		+------------------------------+-----------------------------------------------------+

		+------------------------------------------------------------------------------------+
		| <VOO enteredx>               | VANGUARD S&P 500 ETF              as of  2:19:44 pm |
		|                              | ----------------------------------------------------+
		|                              | Price:        $487.00 | Prev Close:          501.00 |
		|                              | Volume:       123,456 | Day Range:  495.00 - 505.79 |
		+------------------------------+-----------------------------------------------------+


Assumptions:
-----------
You have a REST call that when passed-in a stock symbol return a DTO with quote information GetQuoteDetailsDTO


Exercise
--------
 1. Remove the Quote button  from the HTML


 2. Remove the quoteClicked() method


 3. Remove the quote variable initialization in ngOnInit()


 4. Remove the quote class variable


 5. Add a class variable:  ObsQuote       (it's an observable that holds the data from the REST call)


 6. Apply an async pipe in the HTML
 	a. Remove the *ngIf on the Quote Section

	b. Put the async pipe around the symbol section

	c. Change references from this.quote --> quote



 7. Update the ngOnInit() to listen on the quote symbol textbox


 8. Cleanup / We called subscribe so we should call unsubscribe when the page is closed
 	a. Add a class variable:  subListenOnSymbolTextbox      (it's a subscription)

 	b. Set the subListenOnSymbolTextbox in the ngOnInit()

 	c. Call unsubscribe in the ngOnDestroy()


