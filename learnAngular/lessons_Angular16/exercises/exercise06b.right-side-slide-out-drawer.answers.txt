Exercise 6b / Setup Right Side Slide-Out Div (Answers)
------------------------------------------------------
Problem:  Create a DIV that slides *OVER* the right 40% of the page / Create a help drawer
Solution: Use CSS transitions


     +-------------------------------------+-------------------------+
     | Slide Out Help                      | Filling out this form   |
     +-------------------------------------+                         |
     |                                     |     <close btn>         |
     | Username Textbox                    |                         |
     |                                     |                         |
     | User Type Dropdown                  |                         |
     |     Govt User                       |                         |
     |     Industry User                   |                         |
     |                                     |                         |
     |                     <Reset Btn> <Sub|                         |
     +-------------------------------------+-------------------------+
     Pressing the Help-Button causes the help div to slide-out from the right
     -- This DIV covers *OVER* the existing page
     -- This DIV takes-up 40% of the page width
     -- This user can still work on the left while it's open



Exercise
--------
 1. Setup the Page
    a. Generate the component:                Call it SlideOutHelp
    b. Add the route to constants.ts:         the route will be this:   page/slide-out-help
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works




 2. Setup this simple page layout

     +---------------------------------------------------------------+
     | Slide Out Help                                     Help-Button|
     +---------------------------------------------------------------+
     |                                                               |
     | Username Textbox                                              |
     |                                                               |
     | User Type Dropdown                                            |
     |     Govt User                                                 |
     |     Industry User                                             |
     |                                                               |
     |                     <Reset Btn> <Submit Btn>                  |
     +---------------------------------------------------------------+

	Possible Answer
	---------------
		<div class="m-2.5">
		  <div class="grid grid-cols-2">
			<div>
			  <span class="text-xl">Slide Out Help</span>
			</div>

			<div class="flex place-content-end">
			  Help-Button
			</div>
		  </div>

		  <!-- BOTTOM OF PAGE -->
		  <div class="ml-2.5">

			<div class="mt-2.5">
			  <!-- Username Textbox -->
			  <mat-form-field subscriptSizing="dynamic"  class="w-[250px]">
				<mat-label>Username</mat-label>

				<input matInput type="text"/>
			  </mat-form-field>
			</div>

			<div class="mt-2.5">
			  <!-- User Type Dropdown -->
			  <mat-form-field subscriptSizing="dynamic"  class="w-[250px]">
				<mat-label>User Type</mat-label>

				<mat-select>
				  <mat-option [value]=1>Government User</mat-option>
				  <mat-option [value]=2>Industry User</mat-option>
				</mat-select>
			  </mat-form-field>
			</div>
		  </div>

		  <div class="mt-2.5 flex place-content-center gap-2.5">
			<!-- Reset Button -->
			<button type="button" rbr-outline-button title="Reset" aria-label="Reset">Reset</button>

			<!-- Submit Button -->
			<button type="button" rbr-solid-button title="Submit" aria-label="Submit">Submit</button>
		  </div>

		</div>




 3. Setup the TypeScript part
  	a. Add a class variable that is a boolean:
		  	public isHelpNavBarExpanded: boolean = false;

	b. Add a method to set the class variable to true called openHelp()
			public openHelp(): void {
				this.isHelpNavBarExpanded = true;
			}

	c. Add a method to set the class variable to false called closeHelp()
			public closeHelp(): void {
				this.isHelpNavBarExpanded = false;
			}


 4. Adjust the help button so clicking on it calls openHelp()
		  <button type="button" (click)="this.openHelp()" rbr-outline-button title="Open Help" aria-label="Open Help">
			Help
		  </button>



 5. Add 2 CSS classes (one for the collapsed-div and one for the expanded-div)

		.collapsed-div {
		  /* Collapse over 500 milliseconds */
		  @apply  w-0 overflow-hidden opacity-0 transition-all ease-in-out  duration-500
		}

		.expanded-div {
		  /* Expand over 500 milliseconds.  We don't need to set the width as the original div has w-2/5 */
		  @apply  opacity-100 transition-all  ease-in-out  duration-500 z-10;
		}



 6. Add the Help DIV to the bottom of your html page

     +-------------------------+
     |Help          <Close Btn>|
     |                         |
     |     This is my help     |
     |                         |
     |                         |
     |                         |
     |                         |
     |                         |
     |                         |
     +-------------------------+

  <!-- Help Side-drawer Container takes 40% of the page using w-2/5 -->
  <div class="absolute top-5 right-0 w-2/5 bg-backDropColor border-black border-l-2 border p-5 flex flex-col gap-5"
       [ngClass]="{
                   'expanded-div':  this.isHelpNavBarExpanded,
                   'collapsed-div': !this.isHelpNavBarExpanded
               }"
       style="height: calc(100vh - 20px)">

    <div class="grid grid-cols-2">
      <div class="text-xl font-bold">
        <span>Help</span>
      </div>

      <div class="flex place-content-end">
        <button (click)="this.closeHelp()"
                type="button"
                rbr-outline-button
                aria-label="Help"
                title="Help">
          Close
        </button>
      </div>
    </div>

    <div>
    	This is my help
    </div>

  </div>



 7. Problem:  The help div shows-up for a brief second when the page load
    Solution: Set the div to have class="collapsed-div"

	  <div class="collapsed-div absolute top-5 right-0 w-2/5 bg-backDropColor border-black border-l-2 border p-5 flex flex-col gap-5"
		   [ngClass]="{
					   'expanded-div':  this.isHelpNavBarExpanded,
					   'collapsed-div': !this.isHelpNavBarExpanded
				   }"
		   style="height: calc(100vh - 20px)">


 8. Adjust the page so that pressing Escape always closes the help
    Add this code to your typescript:

		  @HostListener('document:keydown.escape', ['$event'])
		  public onKeydownHandler() {
			// Someone pressed the Escape key.  So, close the help sidenav
			this.closeHelp();
		  }



The Completed HTML is as follows
--------------------------------
<div class="m-2.5">
  <div class="grid grid-cols-2">
    <div>
      <span class="text-xl">Slide Out Help</span>
    </div>

    <div class="flex place-content-end">
      <button type="button" (click)="this.openHelp()" rbr-outline-button title="Open Help" aria-label="Open Help">
        Help
      </button>
    </div>
  </div>

  <!-- BOTTOM OF PAGE -->
  <div class="ml-2.5">

    <div class="mt-2.5">
      <!-- Username Textbox -->
      <mat-form-field subscriptSizing="dynamic"  class="w-[250px]">
        <mat-label>Username</mat-label>

        <input matInput type="text"/>
      </mat-form-field>
    </div>

    <div class="mt-2.5">
      <!-- User Type Dropdown -->
      <mat-form-field subscriptSizing="dynamic"  class="w-[250px]">
        <mat-label>User Type</mat-label>

        <mat-select>
          <mat-option [value]=1>Government User</mat-option>
          <mat-option [value]=2>Industry User</mat-option>
        </mat-select>
      </mat-form-field>
    </div>
  </div>

  <div class="mt-2.5 flex place-content-center gap-2.5">
    <!-- Reset Button -->
    <button type="button" rbr-outline-button title="Reset" aria-label="Reset">Reset</button>

    <!-- Submit Button -->
    <button type="button" rbr-solid-button title="Submit" aria-label="Submit">Submit</button>
  </div>

</div>

<pre>
   this.isHelpNavBarExpanded = {{this.isHelpNavBarExpanded}}
</pre>




  <!-- Help Side-drawer Container takes 40% of the page using w-2/5 -->
  <div class="collapsed-div absolute top-5 right-0 w-2/5 bg-backDropColor border-black border-l-2 border p-5 flex flex-col gap-5"
       [ngClass]="{
                   'expanded-div':  this.isHelpNavBarExpanded,
                   'collapsed-div': !this.isHelpNavBarExpanded
               }"
       style="height: calc(100vh - 20px)">

    <div class="flex flex-row">
      <div class="flex flex-grow text-3xl font-bold">
        <span>Filling out this form:</span>
      </div>

      <div class="flex place-content-end">
        <button (click)="this.closeHelp()"
                type="button"
                rbr-outline-button
                aria-label="Help"
                title="Help">
          Close
        </button>
      </div>
    </div>
  </div>




The Completed SCSS is as follows
--------------------------------
	.collapsed-div {
	  /* Collapse over 500 milliseconds */
	  @apply w-0 overflow-hidden opacity-0 transition-all ease-in-out  duration-500
	}

	.expanded-div {
	  /* Expand over 500 milliseconds.  We don't need to set the width as the original div has w-2/5 */
	  @apply overflow-hidden opacity-100 transition-all  ease-in-out  duration-500 z-10;
	}

	NOTE:  If you want the more traditional slide-in/slide-out effect, remove the opacity classes



The Completed TypeScript is as follows
--------------------------------------
	import {AfterViewInit, Component, HostListener} from '@angular/core';

	@Component({
	  selector: 'app-slide-out-help',
	  templateUrl: './slide-out-help.component.html',
	  styleUrls: ['./slide-out-help.component.scss']
	})
	export class SlideOutHelpComponent  {
	  public isHelpNavBarExpanded: boolean = false;

	  public openHelp(): void {
		this.isHelpNavBarExpanded = true;
	  }

	  public closeHelp(): void {
		this.isHelpNavBarExpanded = false;
	  }

	  @HostListener('document:keydown.escape', ['$event'])
	  public onKeydownHandler() {
		// Someone pressed the Escape key.  So, close the help sidenav
		this.closeHelp();
	  }

	}
