Exercise 17d / Saving Data / Use a Dialog to Freeze the USer while waiting for REST call to finish (Answers)
------------------------------------------------------------------------------------------------------------
Problem:  While waiting for a REST call to finish, the user can edit form fields
          While waiting for a REST call to finish, the user can use the navbar to go to other pages

Solution: Keep the user on the current page by opening a dialog
          While waiting for the REST call to finish, stop the user from closing the dialog
          With the dialog open, the user CANNOT go anywhere else


            +-------------------------------------------------------------------------------------+
            | Add a Report                                                             <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Report Name Textbox>                                                              |
            |                                                                                     |
            |  <Source Dropdown>              <Priority Dropdown>       <Classification Dropdown> |
            |                                                                                     |
            |  <Choose Authors>                                                                   |
            |                                                                                     |
            |  +--------------------------------------------------------------------------------+ |
            |  | Enter Description                                                              | |
            |  |                                                                                | |
            |  +--------------------------------------------------------------------------------+ |
            |                                                                                     |
            |                             <Reset Btn>   <Save Btn>                                |
            +-------------------------------------------------------------------------------------+

			Pressing "Save" will open a dialog

							+---------------------------------------------+
							| Confirm that you want to create a report    |
							|                                             |
							|            <Entered Report Name>            |
							|                                             |
							|           <Cancel Btn> <Save Btn>           |
							+---------------------------------------------+




Part 1:  Create an empty Dialog Box
-----------------------------------
 1. Generate a new component:  AddReportDialog


 2.	In the "Add Report Dialog" HTML, make it look like this:
			+---------------------------------------------+
			|    Hi There                                 |
			+---------------------------------------------+

 3. In the "Add Report" *MAIN PAGE* Typescript, change the "Save" button so it opens the dialog
 	a. Inject the MatDialog service

 	b. In the submitClicked() method, comment everything out

 	c. In the submitClicked() method, Use the matDialog service to open the dialog

		this.matDialog.open(AddReportDialogComponentDTO, {
			  minWidth: '600px',
		});





Part 2:  Fill-in the dialog box
-------------------------------

			+---------------------------------------------+
			| Confirm that you want to create a report    |
			|                                             |
			|            <Entered Report Name>            |
			|                                             |
			|           <Cancel Btn> <Save Btn>           |
			+---------------------------------------------+


 1. In the "Add Report Dialog" TypeScript
 	a. Inject these services
 			dialogRef        	/ Type is MatDialogRef<NAME_OF_THIS_DIALOG_COMPLETE> / Used to close the dialog box and change its behavior
 			messageService  	/ Used to let the user know if the REST call succeeded
 			reportService  	 	/ Used to invoke the REST call

 	b. Inject the MAT_DIALOG_DATA   	[this is just crazy syntax]
 			@Inject(MAT_DIALOG_DATA) public data: AddReportDTO


 	c. Create a public class variable:  submitInProgress
 		-- Initialize it to false


 	d. Create a method:  cancelClicked()
 		-- This will close the dialog box and return FALSE
 		-- Use the dialogRef.close() to do this


 	e. Create a method:  submitClicked()
 		1) Set the submitInProgress flag to TRUE
 		2) Stop the user from closing the dialog box

 				// Stop the user from closing the dialog
                this.dialogRef.disableClose = true;


 		3) Invoke the REST call to save the report

 		4) In the REST call FINALLY Block, close the dialog
 			-- Return TRUE  if the REST call succeeds
 			-- Return FALSE if the REST call failed or did nothing

	f. Add click handler to your buttons
	   1) Clicking on the cancel button should invoke cancelClicked()
	   2) Clicking on the submit button should invoke submitClicked()



 2. In the "Add Report Dialog" HTML, pressing "Save" should show a spinner and disable the dialog buttons
	f. In the HTML, disable the "Reset" button if restCallInProgress is TRUE

 	g. In the HTML, disable the "Submit" button if restCAllInProgress is TRUE

 	h. In the HTML, change the "Submit" button label
 		a. If restCallInProgress == false, then show "Save"
 		b. If restCAllInProgress == true,  then show "Saving" and a spinner




Part 3:  Adjust the main page to pass-in the data
-------------------------------------------------
 1. In the "Add Report" Typescript, change the "Save" button so it opens the dialog
 	a. Change the submitClicked() method to create an AddReportDTO object

	b. Pass-in the AddReportDTO object into the dialog using "data"



 2. If the user successfully saved a report, then reset everything in the "Add Report" page
 	a. Listen to see when the dialog closes

 	b. If the dialog closes and returns TRUE, then reset the myForm

