Exercise 13e / What to do about Multiple Async Pipes (Answers)
--------------------------------------------------------------
Problem:  I have 3 async pipes that run in series
          It invokes REST call #1, then waits
          It invokes REST call #2, then waits
          It invokes REST call #3, then renders the HTML

Solution:
   Approach #1:  Replace the *MULTIPLE* async pipes with a single REST call
   Approach #2:  Change the async pipes so that are *NOT* nested
   Approach #3:  Run the async pipes in PARALLEL (using the map trick)



Exercise
--------
My HTML page has multiple async pipes that are *NESTED*

 		<ng-container *ngIf="(this.obsUserInfo | async) as userInfo">
 			<ng-container *ngIf="(this.obsPriorities | async) as priorities">
 				<ng-container *ngIf="(this.obsReportTypes | async) as reportTypes">

 						<!-- Priorities Dropdown -->
 						<mat-form-field>
 							<mat-select title="Select Priority" aria-label="Select Priority>
 								<ng-container *ngFor="let dto of priorities">
 									<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
 								</ng-container>
 							</mat-select>
 						</mat-form-field>



 						<!-- Report Types Dropdown -->
 						<mat-form-field>
 							<mat-select title="Select Report Type" aria-label="Select Report Type>
 								<ng-container *ngFor="let dto of reportTypes">
 									<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
 								</ng-container>
 							</mat-select>
 						</mat-form-field>

 				</ng-container>
 			</ng-container>
 		</ng-container>

Problem:  How do we change this so that the user does not wait for 3 consecutive REST calls?



Approach #1:  Replace the *MULTIPLE* async pipes with a single REST call
------------------------------------------------------------------------
We could create a new REST call that could return everything we need
- It's more work to create another REST call
+ The page only waits for 1 REST call
+ The page would load faster



Approach #2:  Change the async pipes so that are *NOT* nested
-------------------------------------------------------------
If the REST calls do NOT depend on each other, than do not nest them
-- Put the async-pipes around the dropdowns
   + The rest of the page loads faster
   + Each async pipe runs asynchronously
   + So, instead of waiting for 3 REST calls in series, we could invoke 3 REST calls in parallel
     (faster load time)



Approach #3:  Use an async pipe with a map (to run the async pipes in parallel)
-------------------------------------------------------------------------------
If the REST calls do NOT depend on each other, than we can run them in a map
 + Runs the REST calls in parallel
 - We have to check if the data has arrived

   1. Replace the 3 async pipes with a map
      Change this:
     		<ng-container *ngIf="(this.obsUserInfo | async) as userInfo">
      			<ng-container *ngIf="(this.obsPriorities | async) as priorities">
      				<ng-container *ngIf="(this.obsReportTypes | async) as reportTypes">


      To this:
         <ng-container *ngIf="
            {
               userInfo:    this.obsUserInfo | async,
               priorities:  this.obsPriorities | async,
               reportTypes: this.obsReportTypes | async
            } as data;">




          </ng-container>


   2. Change the Dropdowns to check if the REST calls have finished
	  From this:
			<!-- Priorities Dropdown -->
			<mat-form-field>
				<mat-select title="Select Priority" aria-label="Select Priority>
					<ng-container *ngFor="let dto of priorities">
						<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
					</ng-container>
				</mat-select>
			</mat-form-field>

      To this:
			<!-- Priorities Dropdown -->
			<mat-form-field>
				<mat-select title="Select Priority" aria-label="Select Priority>

					<ng-container *ngIf="data.priorities">
						<!-- The priorities information has arrived.  So, populate the dropdown -->

						<ng-container *ngFor="let dto of data.priorities">
							<mat-option [value]="dto.id"> {{ dto.value }} </mat-option>
						</ng-container>

					</ng-container>

				</mat-select>
			</mat-form-field>





