Exercise 13b / Load a Dropdown using an Async Pipe
--------------------------------------------------
Problem:  I want to load a dropdown from a REST call
Solution: Use an Async Pipe


Advantages to Async Pipe
 + The REST call is asynchronous
 + We can show a spinner (if needed)
 + Requires less code (just initialize the observable in ngOnInit)
 + Automatically clean-up:  No need to unsubscribe the observable
 + Works with OnPush change detection


Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AddContractAsyncPipe
    b. Add the route to constants.ts:         the route will be this:   page/add-contract-async-pipe
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works


 2. Fill in the layout
    NOTE:  Do not add dropdowns or textboxes yet

            +-------------------------------------------------------------------------------------+
            | Add Contract                                                             <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Contract Name Textbox>        <Contract Number Textbox>        <Priority Dropdown>|
            |                                                                                     |
            |  <Classification Dropdown>      <Contract Size Dropdown>                            |
            |                                                                                     |
            |  <Region Dropdown>              <Sub Region Dropdown>                               |
            |                                                                                     |
            |  <Contract Authors Multi Dropdown>                                                  |
            |                                                                                     |
            |  +-------------------------------------------------------------------------------+  |
            |  | <Description Textarea>                                                        |  |
            |  |                                                                               |  |
            |  +-------------------------------------------------------------------------------+  |
            |                                                                                     |
            |                   <Reset Btn>   <Submit Btn>   [Save for Later hyperlink]           |
            +-------------------------------------------------------------------------------------+






 3. Replace "Priority Dropdown" with a real HTML dropdown that has 4 options:
 		Low
 		Medium
 		High
 		Critical




 4. Create a frontend DTO:  MyLookupDTO
 	-- It has 2 fields:
 				id        / holds the unique number
 				value     / holds the displayed value

	a. Create the frontend DTO:

	b. Put in the 2 fields




 5. Create a frontend Service:  MyLookupService
    a. Create the service

    b. Add a public method to this service called getAllPriorities()

    c. Create a local variable that holds some data

    d. Convert the variable into an observable

    e. Return the observable



 6. In the Typescript, we need to *INITIALIZE* the observable
 	a. Create a public class variable: obsPriorities
 	   -- It is an observable that holds *ARRAY* of MyLookupDTO objects

 	b. Inject the MyLookupService

 	c. In the ngOnInit(), initialize the observable




 7. In the HTML, add the async-pipe *AND* loop through the array of priorities
 	a. Remove the hard-coded <mat-option> tags

	b. Use the *ngIf and async-pipe to invoke the REST call

 	c. Replace them with a *ngFor loop






