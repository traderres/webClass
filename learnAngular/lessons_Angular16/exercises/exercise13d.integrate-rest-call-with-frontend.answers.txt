Exercise 13d / Integrate a REST call with the frontend (Answers)
----------------------------------------------------------------
Problem:  I need my frontend service to invoke a real REST call
Solution: Replace your hard-coded, fake frontend service with 2 lines of code


Exercise
--------
 1. Inject the httpClient into your new/existing frontend service


 2. Replace your fake REST call with a real one
    NOTE:  You frontend service probably has a method that looks like this:


 	Change This:
		  /*
		   * Return an observable that corresponds to the REST call that will return all priorities
		   */
		  public getAllPriorities(): Observable< MyLookupDTO[] > {

			// Create an array of DTOs
			let data: MyLookupDTO[] = [
			  {
				id: 1,
				value: 'Low'
			  },
			  {
				id: 2,
				value: 'Medium'
			  },
			  {
				id: 3,
				value: 'High'
			  },
			  {
				id: 4,
				value: 'Critical'
			  },
			];

			// Convert the variable into an observable and return it
			return of(data);
		  }

	   To This:

		  /*
		   * Return an observable that corresponds to the REST call that will return all priorities
		   */
		  public getAllPriorities(): Observable< MyLookupDTO[] > {

	   	    // Construct the URL to get basic information about the user
            const restUrl = environment.baseUrl + '/api/my-lookup/priorities';

            // Return an observable that (when invoked) returns an array of LookupDataDTO objects
            return this.httpClient.get <LookupDataDTO[]> (restUrl);
		  }



Sample Method for a GET Rest Call
---------------------------------
  public getReportCommentDetails(aReportCommentId: number): Observable<GetReportCommentDetailsDto> {
    // Construct the URL of the REST call
    const restUrl: string = environment.baseUrl + '/api/report-comments/details/' + aReportCommentId;

	// Return an observable that (when invoked) returns a GetReportCommentDetailsDto object
    return this.httpClient.get <GetReportCommentDetailsDto> (restUrl);
  }


Sample Method for a PUT Rest Call
---------------------------------
  public toggleSraForCaseId(aCaseId: number): Observable<string> {
    // Construct the URL to get the data to load all the Notes for a specific case ID
    const restUrl = environment.baseUrl + '/api/sra/toggle/' + aCaseId;

	// Return an observable that (when invoked) returns a string
    return this.httpClient.put (restUrl, {}, {responseType: 'text'});
  }


Sample Method for a POST Rest Call
----------------------------------
  // USAGE #1:  Return an Observable holding void
  public addReportComment(aAddReportCommentDTO: AddReportCommentDTO): Observable<void> {
    // Construct the URL to get the data to load all the Report Comments for a specific case ID
    const restUrl: string = environment.baseUrl + '/api/report-comments/add';

    // Return an observable that (when invoked) returns nothing
    return this.httpClient.post <void> (restUrl, aAddReportCommentDTO);
  }

  // USAGE #2  Return an Observable holding string
  public addReportComment(aAddReportCommentDTO: AddReportCommentDTO): Observable<string> {
    const restUrl: string = environment.baseUrl + '/api/report-comments/add';

    return this.httpClient.post <string> (restUrl, aAddReportCommentDTO);
  }

  // USAGE #3  Return an Observable holding string
  public addReportComment(aAddReportCommentDTO: AddReportCommentDTO): Observable<string> {
    const restUrl: string = environment.baseUrl + '/api/report-comments/add';

    return this.httpClient.post(restUrl, aAddReportCommentDTO, {responseType:'text'});
  }



Sample Method for a DELETE Rest Call
------------------------------------
  public deleteReportComment(reportCommentId: number): Observable<string> {
    // Construct the URL to get the data to load the Report Comment
    const restUrl = environment.baseUrl + '/api/report-comments/delete/' + reportCommentId;

    // Return an observable that (when invoked) returns a string
    return this.httpClient.delete<string>(restUrl);
  }


