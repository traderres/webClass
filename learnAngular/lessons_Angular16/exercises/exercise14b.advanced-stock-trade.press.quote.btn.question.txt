Exercise 14b / Advanced Stock Trade / Enter a symbol and Pressing "Quote" button loads data
-------------------------------------------------------------------------------------------
Pressing the "Quote" button will invoke a (fake) REST call to get data back.  Then, display it in the page.


Business Rules:
 A) If the user selects "Limit Order", then the "Limit Price Textbox appears
 B) If the user enters a symbol in the textbox and presses the "Quote" button, then show info about that stock/mutual fund



		+------------------------------------------------------------------------------------+
		| <Symbol-Textbox> <Quote Btn> |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		|                              |                                                     |
		+------------------------------+-----------------------------------------------------+

		+------------------------------------------------------------------------------------+
		| <Symbol-Textbox> <Quote Btn> | VANGUARD S&P 500 ETF              as of  2:19:44 pm |
		|                              | ----------------------------------------------------+
		|                              | Price:        $487.00 | Prev Close:          501.00 |
		|                              | Volume:       123,456 | Day Range:  495.00 - 505.79 |
		+------------------------------+-----------------------------------------------------+


Assumptions:
-----------
You have a REST call that when passed-in a stock symbol return a DTO with quote information GetQuoteDetailsDTO


Exercise
--------
 1. Create a frontend DTO:  GetQuoteDetailsDTO
 	a. Create a frontend DTO:  GetQuoteDetailsDTO

 	b. Add these fields:
 			isSymbolValid   / holds either true or false
 			businessName    / Text Field
 			asOfDate        / Text Field
 			currentPrice    / Numeric Field
 			previousClose   / Numeric Field
 			volume          / Numeric Field
 			lowestDayRange  / Numeric Field
 			highestDayRange / Numeric Field



 2. Create a frontend service:  QuoteService
	a. Create the frontend service:  QuoteService

 	b. Add a public method:    getQuote()
 		-- Pass-in a symbol
 		-- Create a DTO that holds fake data  (using the business rules below)
 		-- Convert the DTO into an observable
 		-- Return the observable

		if the passed-in symbol is null or an empty string
			isSymbolValue 	should hold FALSE


 		If the passed-in symbol holds "BRKB", then return this info

 				isSymbolValue 	should hold TRUE
 				businessName 	should hold "Berkshire Hathaway B"
 				asOfDate 		should hold "10:18:44 am"
 				currentPrice    should hold 411.79
 				volume   		should hold 306599
				previousClose 	should hold 409.92
				lowestDayRange 	should hold 408.60
				highestDayRange should hold 411.79

 					     +------------------------------------------------------+
 						 |	Berkshire Hathaway B              as of 10:18:44 am |
 					     +------------------------------------------------------+
 		                 | Price:        $411.79 | Prev Close:           409.92 |
 		                 | Volume:       306,599 | Day Range:   408.60 - 411.79 |
 		                 -------------------------------------------------------+


 		If the passed-in symbol holds "VOO", then return this info

 					     +------------------------------------------------------+
 						 | Vanguard S&P 500 ETF               as of 10:18:46 am |
 					     +------------------------------------------------------+
 		                 | Price:        $490.05 | Prev Close:           489.82 |
 		                 | Volume      5,830,964 | Day Range:  485.120 - 502.53 |
 		                 -------------------------------------------------------+

 				isSymbolValue 	should hold TRUE
 				businessName 	should hold "Vanguard S&P 500 ETF"
 				asOfDate 		should hold "10:18:46 am"
 				currentPrice    should hold 490.05
 				volume   		should hold 5830964
				previousClose 	should hold 489.82
				lowestDayRange 	should hold 485.120
				highestDayRange should hold 502.53

		Otherwise
				isSymbolValue 	should hold FALSE



 3. Setup a reactive form and bind the "Symbol" textbox only
    a. Setup the reactive form
    b. Bind the symbol textbox to the reactive form



 4. In your Advanced Stock Trade Page, update your TypeScript class
	a. In your "Advanced Stock Trade" page, inject your service:  QuoteService

	b. Create a class variable:  quote      (it holds the data returned from the REST call)

	c. In ngOnInit() initialize the quote variable so that isSymbolValue holds FALSE

	d. Create a method called quoteClicked()
	   -- This method will manually *INVOKE* the REST call to get a quote
	   -- If the REST call comes back successfully, then load this.quote with the returned info



 5. In your Advanced Stock Trade, update your HTML:
	a. If the user presses the "Quote" button, call your quoteClicked() method
			 <button (click)="this.quoteClicked()"  title="Quote Button" aria-label="Quote Button" rbr-solid-button>Quote</button>

	b. if this.quote.isSymbolValid holds TRUE, then render the Quote Section

	c. In the Quote Section of your HTML / replace the hard-coded quote info with values found in this.quote

	d. In the Quote Section of your HTML / Format the prices as CURRENCY

			The Currency Pipe takes 3 arguments
				Arg #1: ISO currency code -- e.g., 'USD' or 'EUR'
				Arg #2: Whether to show the currency symbol -- e.g., $E or Euro symbol
				Arg #3: Number Format String:  <minDigits>.{minFractionDigits}{maxFractionDigits}


	e. In the Quote Section of your HTML / Format the volume as a NUMBER WITH COMMAS  (not currency)
	   Hint:  Perhaps use the number pipe?



 6. Verify it works
    a. Enter VOO in the symbol textbox
    b. Press "Quote"

