Exercise 10b / Set the Date Picker based on a given string int he format of YYYY-MM-DD (Answers)
-------------------------------------------------------------------------------------------------
Problem:  I am loading a Date Picker from a REST call date string.


Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                EditContractSpecification
    b. Add the route to constants.ts:        the route will be this:   page/edit-contract-spec
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works




 2. Fill in the layout (but do not add controls)

            +---------------------------------------------------------------------------------+
            | Edit Contract Specification                                        Help Button  |
            +---------------------------------------------------------------------------------+
            |                                                                                 |
            | Contract Spec Name Textbox                                                      |
            |                                                                                 |
            | Priority Dropdown                                                               |
            |                                                                                 |
            | <Contract Spec Execution Date>  <Extra Days Textbox>                            |                                                                                 |
            |                                                                                 |
            |                             <Reset Btn>  <Save Btn>                             |
            +---------------------------------------------------------------------------------+
            IMPORTANT:  Align the "Contract Spec Execution Date" date picker with the "Extra Days" text box



			<div class="m-2.5">
              <div class="grid grid-cols-2">
                <div>
                  Add Contract Specification
                </div>

                <div class="flex place-content-end">
                  Help Button
                </div>
              </div>

              <div class="mt-2.5">

                <div class="flex flex-col gap-y-2.5">

                  <div>
                    Contract Name Textbox
                  </div>

                  <div>
                    Priority Dropdown
                  </div>

                  <div class="flex flex-row gap-x-5">
                    <div>
                      Contract Spec Execution Date
                    </div>

                    <div>
                      Extra Days Textbox
                    </div>
                  </div>

                  <div class="flex place-content-center gap-x-5">
                    <div>
                      Reset Btn
                    </div>

                    <div>
                      Save Btn
                    </div>

                  </div>
                </div>

              </div>
            </div>


 3. Fill-in the HTML controls

		<div class="m-2.5">
		  <div class="grid grid-cols-2">
			<div>
			  Add Contract Specification
			</div>

			<div class="flex place-content-end">
			  Help Button
			</div>
		  </div>

		  <div class="mt-2.5">

			<div class="flex flex-col gap-y-2.5">

			  <div>
				<mat-form-field>
				  <mat-label>Contract Spec Name</mat-label>

				  <input matInput type="text" title="Contract Spec Name" aria-label="Contract Spec Name"/>
				</mat-form-field>
			  </div>

			  <div>
				<mat-form-field>
				  <mat-label>Priority</mat-label>

				  <mat-select title="Priority" aria-label="Priority">
					<mat-option [value]=101>Low</mat-option>
					<mat-option [value]=102>Medium</mat-option>
					<mat-option [value]=103>High</mat-option>
				  </mat-select>

				</mat-form-field>
			  </div>

			  <div class="flex flex-row gap-x-5">
				<div>
				  <mat-form-field class="w-[350px]" subscriptSizing="dynamic">
					<mat-label>Contract Spec Execution Date</mat-label>

					<!-- Contract Funding / Date Picker Textbox -->
					<input matInput [matDatepicker]="contractDatePicker">

					<!-- Contract Funding / Date Picker Icon -->
					<mat-datepicker-toggle matIconSuffix [for]="contractDatePicker"></mat-datepicker-toggle>
					<mat-datepicker #contractDatePicker></mat-datepicker>
				  </mat-form-field>
				</div>

				<div>
				  <mat-form-field subscriptSizing="dynamic">
					<mat-label>Extra Days</mat-label>

					<input matInput type="text" title="Extra Days" aria-label="Extra Days"/>
				  </mat-form-field>
				</div>
			  </div>

			  <div class="flex place-content-center gap-x-5">
				<div>
				  <button type="button" mat-raised-button title="Reset" aria-label="Reset">Reset</button>
				</div>

				<div>
				  <button type="button" mat-raised-button color="primary" title="Save" aria-label="Save">Save</button>
				</div>

			  </div>
			</div>

		  </div>
		</div>




 4. Setup a reactive form that holds the 4 fields:  contractName, priority, contractSpecExecutionDate, extraDays
	a. Inject the formBuilder service
	b. Create a class variable that holds a FormGroup object
	c. Use the formBuilder to initialize the form group
	d. Add the <form> tag to your HTML
	e. Bind individual form fields to the reactive form
	f. Add a <pre>...</pre> tag that shows the value for the Contract Spec Execution Date


 5. Add a frontend DTO:  EditContractSpecDTO
 	-- It holds a contract spec name
 	-- It holds the priorityId
 	-- It holds the contract spec execution date
 	-- It holds the extra days


 6. Add a fake ContractSpecService
 	a. Generate the service

 	b. Add a public method called getEditContractSpecInfo()
 		-- This method returns an observable that holds the EditContractSpecDTO

 		1) Have this method create some fake data

 		2) Have this method convert the fake data into an observable

 		3) Have this method return the observable


 7. In the main page
 	a. Inject the ContractSpecService

 	b. Add a public variable for your observable
			public obsContractSpecDetails: Observable<EditContractSpecDTO>;


 	c. Initialize your observable in ngOnInit
 			this.obsContractSpecDetails = this.contractSpecService.getEditContractSpecInfo();


 	d. Use an async-pipe to execute the observable

			<ng-container *ngIf="(this.obsContractSpecDetails | async)">


			</ng-container>



 	e. Add a pipe/tap to your observable

 			this.obsContractSpecDetails = this.contractSpecService.getEditContractSpecInfo().pipe(
 			 	tap( (aData: EditContractSpecDTO) => {
 			 			// REST Call came back but we have not RENDERED the html yet
						// NOTE: With pipe/tap, we can run code *BEFORE* the html is rendered

 			 			// Load the form with the values from the dto
                    	this.myForm.controls.contractName.setValue( aData.contractSpecName );


 			 	}) );


			1) convert the date as a string into a Date as object
			2) Set the myForm.control.myDateField.value with this date object


			this.obsContractSpecDetails = this.contractSpecService.getEditContractSpecInfo().pipe(
 			 	tap( (aData: EditContractSpecDTO) => {
 			 			// REST Call came back but we have not RENDERED the html yet
						// NOTE: With pipe/tap, we can run code *BEFORE* the html is rendered

 			 			// Load the form with the values from the dto
                    	this.myForm.controls.contractName.setValue( aData.contractSpecName );

						 if (aData.contractExecutionDate ) {
							   // create a date object without a timezone
							   // step 1: get the date as an ISO date representation date string
							   // step 2: strip off the Z character from the end of the ISO string
							   // step 3: Set the contract execution to the date (without a time zone)
							   let tempDate: Date = new Date(aData.contractExecutionDate);
							   let tempDateWithoutTimeZone: Date = new Date(tempDate.toISOString().slice(0,-1));
							   this.myForm.controls.contractExecutionDate.setValue( tempDateWithoutTimeZone );
							}
 			 	}) );




 Possible Answer with modern labels
 -----------------------------------

	 styles.scss
	 -----------
		@use '@angular/material' as mat;            // Make this the *FIRST* line in the styles.scss


		.max-reduced-density {
		  /* Tell the form field to use less padding.  Angular Material ranges from 0 (normal) to -5 (less padding)  */
		  @include mat.form-field-density(-5);
		}

		mat-datepicker-toggle.max-reduced-calendar .mat-mdc-icon-button.mat-mdc-button-base {
			  /* Reduce the height of the date picker box that has class="max-reduced-calendar" */
			  padding: 0 8px;
			  --mdc-icon-button-state-layer-size: 36px !important;
		}




	 HTML
	 ----
	 <ng-container *ngIf="this.contractSpecObs | async">
	   <!-- The rest call has come back, so render the HTML -->

	   <form [formGroup]="this.myForm" novalidate autocomplete="off">

	   <div class="m-2.5">
		 <!-- Title -->
		 <div class="grid grid-cols-2">
		   <span class="text-2xl">Edit Contract Specification</span>
		   <div class="flex place-content-end">
			 Help Button
		   </div>
		 </div>

		 <!-- Content -->
		 <div class="flex flex-col gap-y-2.5 mt-2.5">
			 <div>
			   <span class="app-form-label">Contract Specification Name</span>
			   <mat-form-field subscriptSizing="dynamic" class="max-reduced-density">
				 <input matInput title="Contract Spec Name" aria-label="Contract Spec Name" formControlName="contractName">
			   </mat-form-field>
			 </div>

			 <div>
			   <span class="app-form-label">Priority</span>
			   <mat-form-field subscriptSizing="dynamic" class="max-reduced-density">
				 <mat-select title="Priority" aria-label="Priority" formControlName="priority">
				   <mat-option [value]=1>Low</mat-option>
				   <mat-option [value]=2>Medium</mat-option>
				   <mat-option [value]=3>High</mat-option>
				 </mat-select>
			   </mat-form-field>
			 </div>

			 <div class="flex flex-row gap-x-2.5">
			   <div>
				 <span class="app-form-label">Contract Spec Date</span>
				 <mat-form-field class="max-reduced-density !h-[36px]" subscriptSizing="dynamic">
				   <!-- Date picker field -->
				   <input matInput [matDatepicker]="contractSpecDatePicker" formControlName="contractSpecExecutionDate">

				   <!-- Date picker toggle icon -->
				   <mat-datepicker-toggle class="max-reduced-calendar" matIconSuffix [for]="contractSpecDatePicker"></mat-datepicker-toggle>

				   <mat-datepicker #contractSpecDatePicker></mat-datepicker>
				 </mat-form-field>
			   </div>

			   <div>
				 <span class="app-form-label">Extra Days</span>
				 <mat-form-field subscriptSizing="dynamic" class="max-reduced-density"> <!-- Took out the max-reduced-density because the time field doesn't reduce -->
				   <input matInput title="Extra Days" aria-label="Extra Days" formControlName="extraDays">
				 </mat-form-field>
			   </div>
			 </div>

			 <pre>
			 Contract Spec = '{{this.myForm.controls.contractName.value}}'
		   </pre>


		   <div class="flex flex-row gap-x-2.5 place-content-center">
			 <button mat-raised-button title="Reset" aria-label="Reset">Reset</button>
			 <button mat-raised-button title="Save" aria-label="Save">Save</button>
		   </div>
		 </div>

	   </div>
	   </form>
	 </ng-container>

