Exercise 13f / Show the "Loading" message while waiting for an Async Pipe
-------------------------------------------------------------------------
Problem:  I want to show the user a "Loading..." message while the REST call is invoking

Solution:
   Approach #1:  Don't do this.  You're masking the real problem:  Your REST call is too fucking slow.  Make it faster.
                 Instead of running a slow SQL query, (1) put your data into ElasticSearch and (2) run an ES query.

   Approach #2:  Hey, it's Sunday night and I don't have time to make it faster.  I'll do that later (yeah, that's bullshit!).
                 Add an else statement to your async pipe *AND* use an ngTemplate



Exercise
--------
 1. Part 1 / Setup the Page
    a. Generate the component                 AddContractShowWaiting
    b. Add the route to constants.ts:         the route will be this:   page/add-contract-show-waiting
    c. Register the route
    d. Add the route to the database table:  ui_controls        (if using real security)
    e. Add a link to the navbar (using that route)
    f. Use the debugger to verify that the navbar link works


 2. Fill in the layout
    NOTE:  Do not add dropdowns or textboxes yet

            +-------------------------------------------------------------------------------------+
            | Add Contract w/Waiting Message                                           <Help Btn> |
            +-------------------------------------------------------------------------------------+
            |                                                                                     |
            |  <Contract Name Textbox>        <Contract Number Textbox>        <Priority Dropdown>|
            |                                                                                     |
            |  <Classification Dropdown>      <Contract Size Dropdown>                            |
            |                                                                                     |
            |  <Region Dropdown>              <Sub Region Dropdown>                               |
            |                                                                                     |
            |  <Contract Authors Multi Dropdown>                                                  |
            |                                                                                     |
            |  +-------------------------------------------------------------------------------+  |
            |  | <Description Textarea>                                                        |  |
            |  |                                                                               |  |
            |  +-------------------------------------------------------------------------------+  |
            |                                                                                     |
            |                   <Reset Btn>   <Submit Btn>   [Save for Later hyperlink]           |
            +-------------------------------------------------------------------------------------+




 3. Replace "Contract Size Dropdown" with a real HTML dropdown that has 4 options:
			21  Small (under $1m)
			22  Medium (under $50m)
			23  Large  (under $100m)
			24  Huge   ($100m and higher)



 4. Create a frontend DTO:  MyLookupDTO
 	-- It has 2 fields:
 				id        / holds the unique number
 				value     / holds the displayed value

	a. Create the frontend DTO:

	b. Put in the 2 fields



 5. Create a frontend Service:  MyLookupService
    a. Create the service

    b. Add a public method to this service called getAllContractSizes()

    c. Create a local variable that holds an array of data

    d. Convert the variable into an observable

    e. Return the observable



 6. In the Typescript, we need to *INITIALIZE* the observable
 	a. Create class variable to hold your observable:  obsContractSizes
 	   -- It is an observable that holds *ARRAY* of MyLookupDTO objects

 	b. Inject the MyLookupService

 	c. In the ngOnInit(), initialize the observable



 7. In the HTML, add the async-pipe *AND* loop through the array of contract sizes
 	a. Remove the hard-coded <mat-option> tags

	b. Add the <ng-container> that has your async pipe (to invoke the REST call)

 	c. Add another <ng-container> to loop through the REST call data / to load the <mat-option> tags



 8. Make your fake REST Call take 5 seconds by adding a pipe/delay to it



 9. Add the "Loading..." message
 	a. Put your <ng-container> async pipe *AROUND* the entire <mat-form-field>

 	b. Add an <ng-template #loadingData>....</ng-template> that holds the message

