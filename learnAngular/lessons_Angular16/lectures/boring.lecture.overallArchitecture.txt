Boring Lecture:  Discuss Overall Architecture / Use Maven to build a java jar
-----------------------------------------------------------------------------

What is the deployed artifact?
------------------------------
We deploy an RDA
-- It's a Java JAR for the webapp
-- It's a Java JAR for the sync service
-- It has 2 additional files



How do we build?
-----------------
 A) Maven is our build tool
 B) Maven lets us download any of 34.5 million libraries
 C) Maven invokes Node Package Manager (NPM) to download front-end libraries and build the frontend
 D) What's inside these generated JARs?


               Java JAR for Web App
               +------------------------------------------------------------------------------------------------------
			   | Frontend Files:  Generated index.html, CSS, JavaScript
               |                  JavaScript packages -- e.g., ag-grid, highcharts, angular, angular-material
               +------------------------------------------------------------------------------------------------------
               | Backend Files:   Compiled Java code
               |                  Included Java libraries -- e.g., spring jars, logback jars, hadoop jars,
               +------------------------------------------------------------------------------------------------------
               | Java App Server: Called "Undertow"
               |                  Listens on a port and
               +-------------------------------------------------------------------------------------------------------





               Java JAR for Sync-Service   (it is not a webapp)
               +------------------------------------------------------------------------------------------------------
               | Sync-Service Files:   Compiled Java code
               |                       db-migrations files
               |                       Included java libraries -- e.g., flyway, spring jars, logback
               +------------------------------------------------------------------------------------------------------




Where are the libraries?
------------------------
 A) Java libraries       (on backend)  are brought-in using Maven  [over 34.5 million back-end libraries]
 B) JavaScript libraries (on frontend) are brought-in using NPM    [over 2 million front-end libraries]



Where is the data stored?
-------------------------
 A) Data is stored in Postgres  (that's truth)
 B) Data is stored in ElasticSearch  (that's cached info -- for high speed searching)
 C) Files are stored in the Hadoop File System


Our Tech Stack
--------------
 1) Maven                   Used to build java apps and bring-in back-end Java dependencies (34 million to choose from)
 2) IntelliJ                Used to debug our front-end typescript and backend java code
 3) Flyway                  Used to "version" the database:  Collection of sql scripts used to create tables/columns/view/sequences, ....
 4) Postgres/SQL            Holds the SQL data / The database is truth / SQL is used to talk to the database / Supports SQL Transactions
 5) ElasticSearch           High speed search engine / Supports super-fast searching of data / Acts as a high speed cache / Every search box is hitting ElasticSearch (not the database)
 6) SchemaSpy               Used to visualize the database
 7) Postman                 Used to simulate any REST call
 8) IntelliJ DB Console     Used to run SQL calls on a database
 9) Spring                  Back-end Java library used to organize the back-end of the web app / Supports "dependency injection"
10) Spring-JDBC             Back-end Java library used to invoke database calls from your java code
11) Spring-Boot             Back-end Java library used to build a single runnable JAR that runs a web app
12) Spring-Security         Back-end Java library used to protect the REST calls
13) Spring-Web              Back-end Java library used to build REST calls
14) pdfBox                  Back-end Java library used to parse and generate PDF files

15) Node Package Mgr (NPM)  Used to bring-in front-end JavaScript libraries  (2 million to choose from)
16) Angular CLI (ng)        Front-end command-line tool  used to generate front-end components and rapidly reload the frontend
17) Angular                 Front-end JavaScript library / TypeScript-based framework used to build single-page web applications
18) Angular Material        Front-end JavaScript library that provides professional buttons/controls/form-fields
19) Tailwind                CSS and used for page layout
20) ag-grid                 Front-end JavaScript library used to generate grids that are fast & flexible
21) HighCharts              Front-end JavaScript library used to generate charts/graphs/maps
22) Font Awesome            Front-end JavaScript library used to display icons
23) ngx-extended-pdf-viewer Front-end JavaScript library used as a PDF viewer
24) ngx-quill               Front-end JavaScript library used as a rich-text editor
25) HTMl & CSS              Used in the angular components to make them look pretty





Most of the time developers focus on 2 things:
 A) Front-end:  We build pages and reusable components / displaying the data to the user
 B) Back-end:   We build REST calls / getting the data and returning it to the front-end




Easy Exercise 1:  Create a simple Java program / Add loggers / Create executable jar
                  Follow these steps:
                     https://github.com/traderres/webClass/blob/master/learnJava/howToCreateJavaCommandLineProgram_numbers.txt


Hard Exercise 2:  Update your Java Program / add another class called DatabaseInfo that executes the SQL to get the current time and versoin of your database and display them
                  So, when I run java -jar it runs the DatabaseInfo class, executes the SQL and displays the info using loggers

				   -- Display the current time
                   SELECT NOW();


				   -- Display the database version info
                   select version();






