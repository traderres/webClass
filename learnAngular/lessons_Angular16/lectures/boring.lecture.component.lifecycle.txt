Boring Lecture / Component Life Cycle
-------------------------------------



Frontend Page Life Cycle for Regular Page
-----------------------------------------
 1. User navigates to a page  (usually a page click or bookmarked page)

 2. Router requests if user can go
    --> router calls the canActivate

 3. Page Constructor is called

 4. Page ngOnInit() is called

 5. HTML is rendered

 6. Page afterViewInit() is called

 7. User **USES** the page

    -------------------------------

 8. User requests to leave the page

 9. Router calls canDeactivate

10. Page ngOnDestroy() is called

11. Router destroys page




Frontend Page Life Cycle for Chart Page
---------------------------------------
 1. User navigates to a page  (usually a page click or bookmarked page)

 2. Router requests if user can go
    --> router calls the canActivate

 3. Page Constructor is called

 4. Page ngOnInit() is called

 5. HTML is rendered

 6. Page afterViewInit() is called
    -- At this point, the chart div is guaranteed to exist
    -- Now, it's safe to load the chart

	-- But, if a user goes directly to the page,
               Then we need to call setTimeout
			    -- Gives Angular time to do another "change detection"

 7. User **USES** the page

 8. User requests to leave the page

 9. Router calls canDeactivate

10. Router calls ngOnDestroy()

11. Router destroys page





Frontend Page Life Cycle for Client-Side Grid Page
--------------------------------------------------
 1. User navigates to a page  (usually a page click or bookmarked page)

 2. Router requests if user can go
    --> router calls the canActivate

 3. Page Constructor is called

 4. Page ngOnInit() is called

 5. HTML is rendered

 6. ag-grid calls on your onGridReady
    a. Invoke a REST call to get the user's preferences
    b. Invoke a REST call to load the client-side grid






Frontend Page Life Cycle for Server-Side Grid Page
--------------------------------------------------
 1. User navigates to a page  (usually a page click or bookmarked page)

 2. Router requests if user can go
    --> router calls the canActivate

 3. Page Constructor is called

 4. Page ngOnInit() is called

 5. HTML is rendered

 6. ag-grid calls on your onGridReady
    a. Invoke a REST call to get the user's preferences
    b. Tell the grid where the serverSideDataSource is

 7. ag-grid uses the serverSideDataSource to load the first page of data



