Lesson 1: Setup Angular Front-End and Spring Boot Back-End
----------------------------------------------------------
This articles describes how to setup a mult-maven project that has
 1) frontend maven module that holds all of the angular frontend code
 2) backend maven module  that holds all of the java spring boot code



There are two approaches for how to structure the Angular code and Spring Boot java code
 1) Create one maven module that holds both the front-end and back-end
 2) Create two maven modules: One holds the front-end, another holds the back-end

The best approach should be the approach that lets you
 A) Debug the java code on the back-end
 B) Debug the typescript code on the front-end
 C) Let front-end developers use "ng serve"


References
----------
https://sterl.org/2019/02/angular-spring-boot/
https://shekhargulati.com/2017/11/08/a-minimalist-guide-to-building-spring-boot-angular-5-applications/
https://dzone.com/articles/building-a-web-app-using-spring-boot-angular-6-and
https://blog.jdriven.com/2016/12/angular2-spring-boot-getting-started/
https://keepgrowing.in/java/springboot/integrate-angular-with-a-spring-boot-project/
https://stackoverflow.com/questions/42393211/how-can-i-serve-static-html-from-spring-boot
https://gist.github.com/pavankjadda/8d17d697f86c1b80cc06c39cec74c87e
https://stackoverflow.com/questions/24661289/spring-boot-not-serving-static-content



General Approach
----------------
 1. Install/Upgrade node and the Angular Command Line Tool
 2. Create the angularApp1 *PARENT* project
 3. Create the frontend maven *CHILD* module
 4. Add a pom.xml to the frontend maven module
 5. Configure Angular debugging in IntelliJ
 6. Create the springboot maven *CHILD* module
 7. Create a one-click option to debug the full webapp in IntelliJ
 8. Adjust the webpack main page so that google fonts are served locally

Additional Notes
----------------
 A) The backend maven module has a dependency on the frontend jar file
 B) The backend listens on http://localhost:8080/app1
 C) The frontend is built with base href of /app1   (so all frontend requests add /app1)
 D) The frontend is built and written to dist/static
 E) All REST endpoints start with /api
 F) All angular routes start with /page
 G) The backend has a default listener on "/" and "/page/**" to take users to index.html
    -- So, if a user refreshes the page, the backend sends the user to index.html
    -- And, then the front-end forwards the user to the correct page view
 H) Unblock cors policy so that the angular frontend on localhost:4200 is allowed to make calls to localhost:8080
 I) Increase Intellij Memory settings (so that debugging is responsive)
    In Intellij, Pull Help -> Change Memory Settings
    Set max heap size to 4096M
    Press "Save and Restart"



Part 1:  Install/Upgrade node and and Angular CLI
-------------------------------------------------
 1. Use nvm to install node version 12.5 or later
    [see learnNode / howToInstallNodeVersionManager.txt]

 2. Verify that node is 12.5.0 or higher
    NOTE:  Angular8 requires node 12.5.0 or higher
    unix> node --version
    v12.5.0

 3. Install or Upgrade the angular global command line tool to Angular 9
    NOTE:  It is the angular command line tool that determines the version of Angular
    [see learnAngular / howToUpdateAngularCLI.txt]

 4. Verify that the global angular CLI is version 9
    unix> npm list -g --depth 0
         ── @angular/cli@9.0.5         # Using Angular 9
         ├── node-sass@4.13.1
         └── npm@6.9.0

    This shows that you will create an Angular 9 app



Part 2:  Create the parent angularApp1 in IntelliJ as a "Maven" project
-----------------------------------------------------------------------
 1. Create the parent project as a "Maven" project
	a. Startup Intellij
	b. Pull File -> New Project
	c. Select "Maven"
	d. Check "Create from archetype"
	   -- Select maven-archetype-quickstart
	   -- Press Next

	e. In the next popup
	   Name:      angularApp1
	   Location:  ~/intellijProjects/angularApp1

	   In the Artifact Coordinates:
		 GroupId:     com.lessons
		 ArtifactId:  angularApp1
		 Version:     1.0-SNAPSHOT
	   Press Next

	f. In the next popup:
	   Choose the location of your Maven
	   Press Finish



 2. Delete the angularApp1/src/ directory
    NOTE:  The parent project will not have any code.

 3. Increase the max heap space for IntelliJ to 4 GB
    a. Pull Help -> Change Memory Settings
    b. Memory:  4096
    c. Press "Save and Restart"

 4. Close Intellij



Part 3:  Create the "frontend" angular app using the ng command-line
--------------------------------------------------------------------
 1. Create the angular application (within the frontend directory)
    unix> cd ~/intellijProjects/angularApp1
    unix> ng new frontend --strict --routing --style=css  --skipGit                 # The strict=true enabled more strict TypeScript

 2. Add Angular Material to your frontend
    unix> cd frontend
    unix> ng add @angular/material            # Make sure you are in the angularApp1/frontend directory when running this command

    First question:                                    N
    Choose a prebuilt theme:                           Deep Purple/Amber
    Set up global Angular Material typography styles?  Y
    Set up browser animations?                         Y

 3. Start-up the frontend so it listens on port 4200
    unix> ng serve --port 4200                # Make sure you are in the angularApp1/frontend directory when running this command

 4. Verify the frontend is up
    a. Startup a browser
    b. Go to http://localhost:4200
       -- You should see "frontend app is running!" at the top of the page
	   -- You should also see "Resources" section and "Next Steps" section as well
	   
    c. Press Control-C to kill the frontend




Part 4: Configure the frontend with a maven pom.xml
----------------------------------------------------
 1. Startup Intellij
 2. Pull File -> Open
 3. Select ~/intellijProjects/AngularApp1

 4. Replace the parent pom.xml with this:

        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

          <groupId>com.lessons</groupId>
          <artifactId>angularApp1</artifactId>
          <version>1.0-SNAPSHOT</version>
		  
          <name>angularApp1</name>

          <packaging>pom</packaging>

          <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <maven.compiler.source>1.8</maven.compiler.source>
            <maven.compiler.target>1.8</maven.compiler.target>
          </properties>


          <build>
            <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
              <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                  <artifactId>maven-clean-plugin</artifactId>
                  <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                  <artifactId>maven-resources-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-compiler-plugin</artifactId>
                  <version>3.8.0</version>
                </plugin>
                <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.22.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-jar-plugin</artifactId>
                  <version>3.0.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-install-plugin</artifactId>
                  <version>2.5.2</version>
                </plugin>
                <plugin>
                  <artifactId>maven-deploy-plugin</artifactId>
                  <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                  <artifactId>maven-site-plugin</artifactId>
                  <version>3.7.1</version>
                </plugin>
                <plugin>
                  <artifactId>maven-project-info-reports-plugin</artifactId>
                  <version>3.0.0</version>
                </plugin>
              </plugins>
            </pluginManagement>
          </build>
        </project>



 5. Create the frontend/pom.xml
    NOTES:
      A) The frontend/pom.xml has 2 maven profiles -- e.g., "dev" and "prod"
      B) When running with the "dev"  profile, the jar is built using npm run build
      C) When running with the "prod" profile, the jar is built using npm run buildProd

	a. Right-click on angularApp1/frontend -> New File
	   Filename: pom.xml

	b. Copy this to your newly-created frontend pom.xml file

		<?xml version="1.0" encoding="UTF-8"?>
		<project xmlns="http://maven.apache.org/POM/4.0.0"
				 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <parent>
			<artifactId>angularApp1</artifactId>
			<groupId>com.lessons</groupId>
			<version>1.0-SNAPSHOT</version>
		  </parent>

		  <artifactId>frontend</artifactId>

		  <packaging>jar</packaging>

		  <build>
			<resources>
			  <resource>
				<!-- When building, write to the "dist" directory -->
				<directory>dist</directory>
			  </resource>
			</resources>

			<plugins>
			  <plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
				  <filesets>
					<fileset>
					  <!-- Tell mvn clean to also remove the "dist" directory -->
					  <directory>dist</directory>
					  <includes>
						<include>**</include>
					  </includes>
					  <followSymlinks>false</followSymlinks>
					</fileset>
				  </filesets>
				</configuration>
			  </plugin>
			</plugins>
		  </build>

		  <profiles>
			<profile>
			  <id>dev</id>
			  <activation>
				<!-- The "dev" profile is active by default -->
				<activeByDefault>true</activeByDefault>
			  </activation>

			  <build>
				<plugins>
				  <!-- Build the frontend JAR for development -->
				  <plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>1.9.1</version>

					<configuration>
					  <!-- Angular 8 requires node of 12.5 or later -->
					  <nodeVersion>v12.5.0</nodeVersion>
					  <npmVersion>6.9.0</npmVersion>
					</configuration>

					<executions>
					  <execution>
						<id>install node and npm</id>
						<goals>
						  <goal>install-node-and-npm</goal>
						</goals>
					  </execution>

					  <execution>
						<id>npm install</id>
						<goals>
						  <goal>npm</goal>
						</goals>
						<configuration>
						  <!-- Run npm ci  (and not npm install) to download npm dependencies reliably -->
						  <arguments>ci</arguments>
						</configuration>
					  </execution>

					  <execution>
						<id>npm run build</id>
						<goals>
						  <goal>npm</goal>
						</goals>
						<configuration>
						  <!-- In the "dev" profile, run the "npm run build" command -->
						  <arguments>run build</arguments>
						</configuration>
					  </execution>

					</executions>
				  </plugin>
				</plugins>
			  </build>
			</profile>

			<profile>
			  <id>prod</id>

			  <build>
				<plugins>
				  <!-- Build the frontend JAR for production use -->
				  <plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>1.3</version>

					<configuration>
					  <!-- Angular 8 requires node of 12.5 or later -->
					  <nodeVersion>v12.5.0</nodeVersion>
					  <npmVersion>6.9.0</npmVersion>
					</configuration>

					<executions>
					  <execution>
						<id>install node and npm</id>
						<goals>
						  <goal>install-node-and-npm</goal>
						</goals>
					  </execution>

					  <execution>
						<id>npm install</id>
						<goals>
						  <goal>npm</goal>
						</goals>
					  </execution>

					  <execution>
						<id>npm run buildProd</id>
						<goals>
						  <goal>npm</goal>
						</goals>
						<configuration>
						  <!-- In the "prod" profile, build the frontend using this command:  "npm run buildProd"

							Within the package.json, you should run this:
							   "buildProd": "ng build <dash><dash>base-href /app1/  <dash><dash>prod",

							So, we are building the frontend in production mode (using Ahead-of-Time compilation)
							   ng build <dash><dash>base-href /app1/  <dash><dash>prod

							+ The browser can render the UI as soon as the app is loaded.  (no need to wait for code compilation)
							+ The ngc compiler is not included in vendor.bundle.js
						  -->
						  <arguments>run buildProd</arguments>
						</configuration>
					  </execution>

					</executions>
				  </plugin>
				</plugins>
			  </build>
			</profile>
		  </profiles>

		</project>


 6. Right-click on frontend/pom.xml -> Add as Maven Project
    Right-click on frontend/pom.xml -> Maven -> Reload Project
	
	
 7. Right-click on frontend -> Add Framework Support...
    a. Check Web Application
       Do not check anything else underneath Web Application
    b. Uncheck create web.xml
    c. Press OK
       -- This is needed so that you can identify HTML tags that are missing Angular Modules
    
	d. Delete the frontend/web/ directory and everything inside of it
	   -- It contains an index.jsp (that you don't need)
	

Part 5: Configure Angular Debugging in IntelliJ
-----------------------------------------------
 1. Startup IntelliJ and open the angularApp1 project

 2. Create this configuration:   "Angular CLI Server"
    a. Pull Run / Edit Configurations
       Select +   -> NPM

       In the window on the right:
         Name:              Angular CLI Server
         Package.json:      ~/intellijProjects/angularApp1/frontend/package.json
         Command:           run
         Scripts:           start
         Arguments:
         Node interpreter:  ~/.nvm/versions/node/v12.5.0/bin/node
         Node options:
         Package manager:   Project
         Environment

     b. Press Apply
     c. Press OK

 3. Create this configuration:   "Angular Application"
     a. Pull Run / Edit Configuration
        Select +   ->  JavaScript Debug

        In the window on the right:
          Name:           Angular Application
          URL:            http://localhost:4200
          Browser:        Chrome
          Check           "Ensure breakpoints are detected when loading scripts"

     b. Press Apply
     c. Press OK

 4. Set a breakpoint in app.component.ts on this line:
    a. Browse to frontend/src/app/app.component.ts
	b. Set a breakpoint on line 9 by clicking to the right of the line number.  The line should have this on it:
           title = 'frontend';

 5. Verify that the debugger works
    a. Select "Angular CLI Server" and press the "Run" icon
       -- Wait for it to finish

    b. Select "Angular Application" and press the "Debug" icon"
       -- It should startup a Chrome browser connected to http://localhost:4200
       -- You should hit your breakpoint
       -- Press the "Continue" button (or F9)

    c. If it works, Pull Run -> Stop -> Stop All



Part 6:  Create the Spring Boot Maven Module  ("backend")
---------------------------------------------------------
 1. Create this Maven module:  backend
    NOTE:  This maven module will hold all of the Java/SpringBoot code
    a. Right-click on angularApp1 -> New Module:

        On the left, select Maven
        Click "Create from archetype"
        Select maven-archetype-quickstart
        Press "Next"

        ArtifactId:  backend
        Press "Next"

        Module name:  backend
        Press "Finish"

 2. Create the 2 resources directories:
    mkdir angularApp1/backend/src/main/resources
    mkdir angularApp1/backend/src/test/resources

 3. Add Spring Boot and Logback Dependencies to the backend/pom.xml
    a. Replace the contents of the backend/pom.xml with this:

        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
          <modelVersion>4.0.0</modelVersion>

		  <parent>
			<artifactId>angularApp1</artifactId>
			<groupId>com.lessons</groupId>
			<version>1.0-SNAPSHOT</version>
		  </parent>

          <artifactId>backend</artifactId>
          <version>1.0-SNAPSHOT</version>

          <name>backend</name>

          <properties>
	          <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	          <maven.compiler.source>1.8</maven.compiler.source>
	          <maven.compiler.target>1.8</maven.compiler.target>
          </properties>

          <dependencyManagement>
            <!-- Set Spring Boot Dependencies -->
            <dependencies>
              <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.1.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
              </dependency>
            </dependencies>
          </dependencyManagement>

          <dependencies>

            <dependency>
              <!-- Include the front-end as a dependency so the front-end is compiled *BEFORE* the backend is compiled -->
              <groupId>${project.groupId}</groupId>
              <artifactId>frontend</artifactId>
              <version>${project.version}</version>
            </dependency>

            <dependency>
              <!-- Spring Boot Web -->
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-web</artifactId>

              <exclusions>
                <exclusion>
                  <!-- Remove Tomcat from Spring Boot -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>

                <exclusion>
                  <!-- Remove logging from spring as we will use logback -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
              </exclusions>
            </dependency>

            <dependency>
              <!-- Add Dependency for the Undertow App Server -->
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-undertow</artifactId>

              <exclusions>
                <exclusion>
                  <!-- Remove logging from undertow as we will use logback -->
                  <groupId>org.springframework.boot</groupId>
                  <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
              </exclusions>
            </dependency>

            <dependency>
              <!-- Send logging from Java Common Logging to SLF4J -->
              <groupId>org.slf4j</groupId>
              <artifactId>jcl-over-slf4j</artifactId>
              <version>1.7.5</version>
            </dependency>

            <dependency>
              <!-- SLF4J will use Logback-classic as its logging implementation -->
              <groupId>ch.qos.logback</groupId>
              <artifactId>logback-classic</artifactId>
              <version>1.2.3</version>
            </dependency>

            <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-jdbc</artifactId>
              <version>5.2.1.RELEASE</version>
            </dependency>

            <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>spring-web</artifactId>
              <version>5.2.1.RELEASE</version>
            </dependency>

            <dependency>
              <!-- Implementation for converting objects to JSON -->
              <groupId>com.fasterxml.jackson.core</groupId>
              <artifactId>jackson-databind</artifactId>
              <version>2.9.3</version>
            </dependency>

            <dependency>
              <groupId>junit</groupId>
              <artifactId>junit</artifactId>
              <version>4.12</version>
              <scope>test</scope>
            </dependency>
          </dependencies>

          <build>

            <plugins>
              <plugin>
                <!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
                     Run this command to generate the runnable Spring Boot Jar
                        mvn clean package  *or*
                        mvn clean package spring-boot:repackage
                 -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.2.1.RELEASE</version>
                <configuration>
                  <addResources>true</addResources>
                </configuration>

                <executions>
                  <execution>
                    <goals>
                      <goal>repackage</goal>
                    </goals>
                    <configuration>
                      <classifier>exec</classifier>
                    </configuration>
                  </execution>
                </executions>

              </plugin>
            </plugins>
          </build>

        </project>

    b. Right-click on your backend/pom.xml -> Maven -> Reload Project


 4. Verify that the top pom.xml has both modules listed like this:
    a. Look at the angularApp1/pom.xml

    b. Verify that the modules section looks like this:
            <modules>
              <module>frontend</module>
              <module>backend</module>
            </modules>
    
	c. Right-click on the parent pom.xml -> Maven -> Reload Project
	

 5. Setup logback in the springboot application
    a. Right-click on angularApp1/backend/src/main/resources -> New -> File
       filename:  logback.xml
       Press OK

    b. Copy this into your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

            <?xml version="1.0" encoding="UTF-8" ?>
            <configuration debug="false">
                <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                    <encoder>
                        <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                    </encoder>
                </appender>

                <logger name="org.springframework" level="INFO" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <logger name="com.lessons" level="DEBUG" additivity="false">
                    <appender-ref ref="CONSOLE"/>
                </logger>

                <root level="INFO">
                    <appender-ref ref="CONSOLE"/>
                </root>
            </configuration>


 6. Delete the App.java
    a. Right-click on backend/src/main/java/com/lessons/App -> Delete


 7. Create the Application.java class with a logger
    a. Right-click on backend/src/main/java/com/lessons -> New Java Class
       Class Name:  Application

    b. Replace the contents of Application.java with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        /**
         * Main Application
         **/
        public class Application {
          private static final Logger logger = LoggerFactory.getLogger(Application.class);

          public static void main(String[] args)
          {
            logger.debug("main() started.");

            logger.debug("main() finished.");
          }
        }


 8. Re-import maven dependencies
    Right-click on angularApp1/pom.xml -> Maven -> Reload Project


 9. Verify logging is working
    a. Set a breakpoint in your logger.debug() line by clicking in the margin
    b. Right-click on main() -> Debug 'Application.main'
    c. Press F9 to continue
       You should see this in the console
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() started.
        02/02/2018 22:45:22 DEBUG com.lessons.Application main() finished.


10. Update the Application.java class so it starts a Spring-Boot webapp
    a. Replace the Application.java contents with this:

        package com.lessons;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;

        /**
         * Main Application
         **/
        @SpringBootApplication
        public class Application
        {
            private static final Logger logger = LoggerFactory.getLogger(Application.class);


          /**
           * Web Application Starts Here
           **/
           public static void main( String[] args )
            {
                logger.debug("main() started.");

				// Start up Spring Boot but disable the banner
				SpringApplication app = new SpringApplication(Application.class);
				app.setBannerMode(Banner.Mode.OFF);
				app.run(args);

                logger.debug("WebApp is Up.");
            }
        }


    b. Create this file:  application.yaml
       1) Right-click on angularApp1/backend/src/main/resources -> New -> File
          Filename:  application.yaml

       2) Copy this to your new file:
            ##########################################################
            # application.yaml   (used for development purposes)
            #
            # NOTE:  Make sure there are no leading spaces on any of these lines
            ##########################################################
            name: app1
            server.servlet.context-path: /app1
            server.port: 8080


11. Create this java class:  HomeController
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name:  controllers

    b. Right-click on backend/src/main/java/com/lessons/controllers -> New Java Class
       Name: HomeController

    c. Copy this to your new class

            package com.lessons.controllers;

            import org.slf4j.Logger;
            import org.slf4j.LoggerFactory;
            import org.springframework.http.HttpStatus;
            import org.springframework.http.MediaType;
            import org.springframework.http.ResponseEntity;
            import org.springframework.stereotype.Controller;
            import org.springframework.web.bind.annotation.RequestMapping;
            import org.springframework.web.bind.annotation.RequestMethod;

            import java.text.DateFormat;
            import java.text.SimpleDateFormat;
            import java.util.Date;

            @Controller
            public class HomeController {
                private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

                /**
                 * This page endpoint is needed to ensure that all page routes to the Angular Frontend
                 * @return a string which causes Spring Web to redirect the user to index.html
                 *
                 * NOTE:  If the user is going to /app1/page/view/reports, then
                 *         1. Spring will redirect the user to the /index.html
                 *         2. Angular routes will redirect the user to the route for view/reports
                 */
                @RequestMapping(value = {"/", "/page/**"}, method = RequestMethod.GET)
                public String home() {

                    // This method handles two cases:
                    // Case 1: The user goes to http://localhost:8080/app1  --> Take users to the index.html
                    // Case 2: The user goes to http://localhost:8080/app1/page/addReport and presses refresh --> Take users to the index.html
                    return "forward:/index.html";
                }


                /*************************************************************************
                 * REST endpoint /api/time
                 *
                 * @return a plain-old string with the system time (not JSON)
                 *************************************************************************/
                @RequestMapping(value = "/api/time", method = RequestMethod.GET, produces = "application/json")
                public ResponseEntity<?> getDateTime() {
                    logger.debug("getDateTime() started.");

                    // Get the date/time
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    Date date = new Date();
                    String dateTime = dateFormat.format(date);

                    // Return the date/time string as plain-text
                    return ResponseEntity
                            .status(HttpStatus.OK)
                            .contentType(MediaType.TEXT_PLAIN)
                            .body(dateTime);
                }

            }


12. Create this java class:  WebMvcConfig
    NOTE:  This tellsell Spring boot to look for the frontend static html inside a jar
    a. Right-click on backend/src/main/java/com/lessons -> New Package
       Package Name: config

    b. Right-click on backend/src/main/java/com/lessons/config -> New Java Class
       Class Name:  WebMvcConfig

    c. Copy this to the newly-created class

          package com.lessons.config;

          import org.springframework.beans.factory.annotation.Value;
          import org.springframework.context.annotation.Configuration;
          import org.springframework.web.servlet.config.annotation.CorsRegistry;
          import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
          import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;



          @Configuration
          public class WebMvcConfig extends WebMvcConfigurerAdapter {

            @Value("${disable.cors}")
            private boolean disableCors;

            private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
              "classpath:/META-INF/resources/", "classpath:/resources/",
              "classpath:/static/", "classpath:/public/" };

            /**
             * Added to allow spring boot to find html content in the frontend dependency jar
             * @param registry
             */
            @Override
            public void addResourceHandlers(ResourceHandlerRegistry registry) {
              registry.addResourceHandler("/**")
                .addResourceLocations(CLASSPATH_RESOURCE_LOCATIONS);
            }


            /**
             * Allow CORS requests to come from anywhere
             * -- Should be used for local debugging only
             * @param registry
             */
            @Override
            public void addCorsMappings(CorsRegistry registry) {
              if (disableCors) {
                registry.addMapping("/**").allowedOrigins("*");
              }
            }

          }


13. Append this text to the end of your your backend/src/main/resources/application.yaml
    NOTE:  Make sure there are no **LEADING SPACES** on the left side

	# Set the Active profile to be dev
	spring.profiles.active: dev

	# Disable cors check because we are running in local dev mode
	# NOTE:  order is important.  Make sure disable.cors comes *AFTER* you set the profile
	disable.cors: true

	# Tell Spring to disable DataSource Auto Configuration (so you can run a springboot app without a datasource
	spring.autoconfigure:
	    exclude:
			- org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
			- org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
            - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration


    #################################################################################################
    ## WARNING:  I know you won't read this, but I will say it again!!!
    ##		     Make sure there are no **LEADING SPACES** on the left side of entries in the application.yaml
    #################################################################################################


14. Change the npm build output path to "dist/"
    a. Edit the frontend/angular.json

    b. Change this line:
          "outputPath": "dist/frontend",

       To this:
          "outputPath": "dist/static",

       NOTE:  this outputPath must match the classpath found in WebMvcConfig


15. Change the npm build so that it adds the /app1/ prefix to all URLs
    a. Edit the frontend/package.json

    b. Add this line to the "scripts" section
          "buildProd": "ng build --base-href /app1/  --prod --optimization --aot ",
		
	   So, the "scripts" section should look like this:
		 "scripts": {
             "ng": "ng",
             "start": "ng serve",
             "build":     "ng build --base-href /app1/",
             "buildProd": "ng build --base-href /app1/  --prod --optimization --aot ",
             "test": "ng test",
             "lint": "ng lint",
             "e2e": "ng e2e"
           },
  


    When completed the package.json should look like this:
         {
           "name": "frontend",
           "version": "0.0.0",
           "scripts": {
             "ng": "ng",
             "start": "ng serve",
             "build":     "ng build --base-href /app1/",
             "buildProd": "ng build --base-href /app1/  --prod --optimization --aot ",
             "test": "ng test",
             "lint": "ng lint",
             "e2e": "ng e2e"
           },
           "private": true,
           "dependencies": {
             "@angular/animations": "~9.0.5",
             "@angular/cdk": "9.1.1",
             "@angular/common": "~9.0.5",
             "@angular/compiler": "~9.0.5",
             "@angular/core": "~9.0.5",
             "@angular/forms": "~9.0.5",
             "@angular/material": "9.1.1",
             "@angular/platform-browser": "~9.0.5",
             "@angular/platform-browser-dynamic": "~9.0.5",
             "@angular/router": "~9.0.5",
             "@fortawesome/fontawesome-free": "5.12.1",
             "rxjs": "~6.5.4",
             "tslib": "^1.10.0",
             "zone.js": "~0.10.2"
           },
           "devDependencies": {
             "@angular-devkit/build-angular": "~0.900.5",
             "@angular/cli": "~9.0.5",
             "@angular/compiler-cli": "~9.0.5",
             "@angular/language-service": "~9.0.5",
             "@types/node": "^12.11.1",
             "@types/jasmine": "~3.5.0",
             "@types/jasminewd2": "~2.0.3",
             "codelyzer": "^5.1.2",
             "jasmine-core": "~3.5.0",
             "jasmine-spec-reporter": "~4.2.1",
             "karma": "~4.3.0",
             "karma-chrome-launcher": "~3.1.0",
             "karma-coverage-istanbul-reporter": "~2.1.0",
             "karma-jasmine": "~2.0.1",
             "karma-jasmine-html-reporter": "^1.4.2",
             "protractor": "~5.4.3",
             "ts-node": "~8.3.0",
             "tslint": "~5.18.0",
             "typescript": "~3.7.5"
           }
         }

16. Add baseUrl to the environment.ts and environment.prod.ts
    Problem:  When running in local dev mode, the REST calls should have this prefixed to them:  http://localhost:8080/app1
              When running in prod mode,      the REST calls should have nothing prefixed to them:

    Solution: Set environment.baseUrl in the environment.ts and environment.prod.ts

    a. Set the baseUrl in the environments.ts
       1) Go to frontend/src/environments/environments.ts
       2) Change the environment map so it looks like this:

           export const environment = {
             production: false,
             baseUrl: 'http://localhost:8080/app1'
           };


    b. Add baseUrl to environments.prod.ts
       1) Go to frontend/src/environments/environments.prod.ts
       2) Change the environment map so it looks like this:

            export const environment = {
              production: true,
              baseUrl: '.'
            };



17. Verify that the webapp builds correctly from command-line *AND* that the uber jar runs
    a. Build the backend uber jar  (called backend-1.0-SNAPSHOT-exec.jar)
       unix> cd ~/intellijProjects/angularApp1
       unix> mvn clean package -Pprod

    b. Run the uber jar  (it has -exec in the filename)
       unix> java -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar

       You should see this:
          02/27/2020 22:54:41 INFO  org.springframework.boot.web.embedded.undertow.UndertowServletWebServer Undertow started on port(s) 8080 (http) with context path '/app1'
          02/27/2020 22:54:41 INFO  com.lessons.Application Started Application in 1.804 seconds (JVM running for 2.259)
          02/27/2020 22:54:41 DEBUG com.lessons.Application WebApp is Up.

    c. Verify that http://localhost:8080/app1 takes users into the main web page
       1) Open a browser
       2) Connect to http://localhost:8080/app1
          -- You should see the default page

    d. Verify that REST endpoint to /api/time works correctly
       1) Open a browser
       2) Connect to http://localhost:8080/app1/api/time
          -- You should see the current time

    e. Press Control-C to kill the web application



18. Rename the IntelliJ debug option from "Application" to "Backend"
    a. Go to the backend/src/main/java/com/lessons/Application
    b. Right-click on the Application.main -> Debug 'Application.main()'
    c. Verify that the backend is listening on port 8080
       1) Open a browser
       2) Connect to http://localhost:8080/app1/api/time
          -- You should see the time

    d. Pull Run / Stop Application

    e. Rename this configuration from "Application" to "backend"
       1) Pull Run / Edit Configurations...
       2) Single click on Application / Application
       3) On the Right side,
          Name:  Backend
       4) Press Apply
       5) Press OK



19. Setup the multirun plugin (so that you can debug the application with one click)
    a. Install the multirun plugin
       1) Pull File -> Settings
       2) Click Plugins
       3) In the Plugins search box, type-in multirun
       4) Click the "install" button [on the right side]
       5) You will be prompted, "JetBrains is not responsible for any processing of your personal data by any third-party plugin vendors"
          Click Accept
       6) Restart IntelliJ

    b. Configure a MultiRun configuration to kick off the backend, the Angular CLI Server, *and* the Angular Application configurations
	   1) Pull Run -> Edit Configurations
	   2) Press +  ->  MultiRun

	   3) In the window on the right
             Name:  Full WebApp

             Under "Choose configurations to run",
               press +  Backend
               press +  Angular CLI Server
               press +  Angular Application
			   
             Check    "Start configurations one by one" with delay of 9 seconds
             Uncheck  "Mark the tab of failed configuration"
             Uncheck  "Close tab of successfully completed configuraitons"
             Check    "Allow re-using tabs with succeeded run configurations"
             Check    "Allow re-using tabs with failed run configurations"


             NOTE:  Make sure the order is the same order as listed above
                    We want the backend to start *first*

        3) Press Apply
        4) Press OK

    c. Verify that it works
       1) Pull Run -> Debug 'Full Webapp'
       2) Press the "Debug" icon
          -- A chrome browser should appear connected to http://localhost:4200

	   3) Change the url on your browser to http://localhost:8080/app1/api/time
	      -- You should see the time

    d. Pull Run / Stop MultiRun




Part 7:  Replace online google fonts with offline google fonts
--------------------------------------------------------------
Problem:  The main frontend/src/index.html has references to fonts that are downloaded at runtime
               <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
               <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
See:
 https://stackoverflow.com/questions/42708257/google-fonts-webpack/48310258#48310258

 1. Replace the "Roboto" online fonts with offline fonts using
    a. Go to google's webfonts helper page
       https://google-webfonts-helper.herokuapp.com/fonts

    b. Search for roboto (on the left side)
       and select "Roboto sans-serif
       *OR*
       https://google-webfonts-helper.herokuapp.com/fonts/roboto?subsets=latin

    c. Select 300, 300italic, 500, 500italic
    d. Press "Best Support"
    e. Press the Download" button
       https://google-webfonts-helper.herokuapp.com/api/fonts/roboto?download=zip&subsets=latin&variants=300,500,300italic,regular,500italic
    f. Save roboto-v20-latin.zip to your Downloads/ directory

 2. Create a frontend/src/assets/fonts directory
    unix> cd ~/intellijProjects/angularApp1/frontend/src/assets
    unix> mkdir fonts

 3. Unzip the file to frontend/fonts
    unix> cd ~/intellijProjects/angularApp1/frontend/src/assets/fonts
    unix> cp ~/Downloads/roboto-v20-latin.zip  .
    unix> unzip roboto-v20-latin.zip
    unix> rm    roboto-v20-latin.zip

    When completed, theser should be a number of roboto files under  ~/intellijProjects/angularApp1/frontend/src/assets/fonts/
	      roboto-v20-latin-300.eot
		  roboto-v20-latin-300italic.eot
		  roboto-v20-latin-300italic.eot
		  roboto-v20-latin-300italic.ttf
		  roboto-v20-latin-300italic.woff
		  roboto-v20-latin-300italic.woff2
		  roboto-v20-latin-300.svg
		  roboto-v20-latin-300.ttf
		  roboto-v20-latin-300.woff
		  roboto-v20-latin-300.woff2
		  roboto-v20-latin-500.eot
		  roboto-v20-latin-500italic.eot
		  roboto-v20-latin-500italic.svg
		  roboto-v20-latin-500italic.ttf
		  roboto-v20-latin-500italic.woff
		  roboto-v20-latin-500italic.woff2
		  roboto-v20-latin-500.svg
		  roboto-v20-latin-500.ttf
		  roboto-v20-latin-500.woff
		  roboto-v20-latin-500.woff2
		  roboto-v20-latin-regular.eot
		  roboto-v20-latin-regular.svg
		  roboto-v20-latin-regular.ttf
		  roboto-v20-latin-regular.woff
		  roboto-v20-latin-regular.woff2


 4. Generate the CSS on the google-webfonts- page
    On the google-webfonts helper page
    a) Customize folder prefix:    ./assets/fonts/
    b) Copy the CSS on the google-webfonts page
    c) Paste it to the *END* of your frontend/src/styles.css  file

 5. Remove these lines from the frontend/src/index.html
     <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
     <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    When completed, your index.html should look something like this:
	<!doctype html>
	<html lang="en">
	<head>
	  <meta charset="utf-8">
	  <title>Frontend</title>
	  <base href="/">
	  <meta name="viewport" content="width=device-width, initial-scale=1">
	  <link rel="icon" type="image/x-icon" href="favicon.ico">
	</head>
	<body class="mat-typography">
	  <app-root></app-root>
	</body>
	</html>


 6. Change the index.html
    Change this line:
	   <base href="/">
    To this:
	   <base href=".">


 7. Verify it works
    a. Pull Run -> Debug 'Full WebApp'
    b. Open a browser going to http://localhost:4200
    c. In the browser, pull View -> Source Page
       -- You should not see the links to fonts.googleapis.com



 8. Fix problems with IntelliJ and finding modules by moving frontend/tsconfig.app.json --> frontend/other/tsconfig.app.json
    a. Create this directory:  ~angularApp1/frontend/other
	b. Move frontend/tsconfig.app.json to frontend/other/tsconfig.app.json
	c. Replace the contents of frontend/other/tsconfig.app.json with this:
		{
		  "extends": "../tsconfig.json",
		  "compilerOptions": {
			"outDir": "./out-tsc/app",
			"types": []
		  },
		  "files": [
			"../src/main.ts",
			"../src/polyfills.ts"
		  ],
		  "include": [
			"../src/**/*.d.ts"
		  ]
		}

   d. Edit the frontend/angular.json to look for tsconfig.app.json in the new directory
        "tsConfig": "other/tsconfig.app.json",

   e. Within Intellij delete the frontend/node_modules/ directory
   f. Within Intellij, right-click on frontend/package.json -> run npm install
      NOTE:  IntelliJ may reindex flies -- wait for the reindexing to finish

   g. Close IntelliJ
   h. Open Intellij
   i. If you get prompted "Angular CLI Framework is detected", you can press the X to close it



Part 8:  Create index.dev.html and index.prod.html
--------------------------------------------------
Problem:  When running with ssl (prod mode), we want the index.html to have this line:
               <base href=".">

		  When running in http-mode (dev mode), we want the index.html to have this line"
               <base href="/">

Solution:
+ Tell angular to use index.dev.html  when building using the default configuration
+ Tell angular to use index.prod.html when building using the prod    configuration

 1. Create these files:  index.dev.html and index.prod.html
    a. Copy your frontend/src/index.html to frontend/src/index.dev.html
    b. Copy your frontend/src/index.html to frontend/src/index.prod.html

 2. Erase frontend/src/index.html

 3. Configure index.dev.html for development using <base href="/">
 a. Edit index.dev.html
    b. Set the <base href> line to look like this:
		<base href="/">

 4. Configure index.prod.html for production using <base href=".">
    a. Edit index.prod.html
    b. Set the <base href> line to look like this:
		<base href=".">

 5. Configure ng build so that the default configuration will use /src/index.dev.html
    a. Edit ~/angularApp1/frontend/angular.json

	b. In the "projects" -> "frontend" -> "architect" -> "build" section
	    Replace this line:
		  "index": "src/index.html",

		With this
		  "index": {
              "input": "src/index.dev.html",
              "output": "index.html"
            },

   c. Configure ng build so that the "prod" configuration will use /src/index.prod.html
       In the "projects" -> "frontend" -> "architect" -> "build" -> "configurations" -> "production" section,
       add this:
         "index": {
                "input": "src/index.prod.html",
                "output": "index.html"
          },


   When finished, your angular.json should look something like this:
	{
	  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
	  "version": 1,
	  "newProjectRoot": "projects",
	  "projects": {
		"frontend": {
		  "projectType": "application",
		  "schematics": {},
		  "root": "",
		  "sourceRoot": "src",
		  "prefix": "app",
		  "architect": {
			"build": {
			  "builder": "@angular-devkit/build-angular:browser",
			  "options": {
				"outputPath": "dist/static",
				"index": {
				  "input": "src/index.dev.html",
				  "output": "index.html"
				},
				"main": "src/main.ts",
				"polyfills": "src/polyfills.ts",
				"tsConfig": "other/tsconfig.app.json",
				"aot": true,
				"assets": [
				  "src/favicon.ico",
				  "src/assets"
				],
				"styles": [
				  "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
				  "./node_modules/@fortawesome/fontawesome-free/css/all.css",
				  "src/styles.css"
				],
				"scripts": []
			  },
			  "configurations": {
				"production": {
				  "index": {
					"input": "src/index.prod.html",
					"output": "index.html"
				  },
				  "fileReplacements": [
					{
					  "replace": "src/environments/environment.ts",
					  "with": "src/environments/environment.prod.ts"
					}
				  ],
				  "optimization": true,
				  "outputHashing": "all",
				  "sourceMap": false,
				  "extractCss": true,
				  "namedChunks": false,
				  "extractLicenses": true,
				  "vendorChunk": false,
				  "buildOptimizer": true,
				  "budgets": [
					{
					  "type": "initial",
					  "maximumWarning": "2mb",
					  "maximumError": "5mb"
					},
					{
					  "type": "anyComponentStyle",
					  "maximumWarning": "6kb",
					  "maximumError": "10kb"
					}
				  ]
				}
			  }
			},
			"serve": {
			  "builder": "@angular-devkit/build-angular:dev-server",
			  "options": {
				"browserTarget": "frontend:build"
			  },
			  "configurations": {
				"production": {
				  "browserTarget": "frontend:build:production"
				}
			  }
			},
			"extract-i18n": {
			  "builder": "@angular-devkit/build-angular:extract-i18n",
			  "options": {
				"browserTarget": "frontend:build"
			  }
			},
			"test": {
			  "builder": "@angular-devkit/build-angular:karma",
			  "options": {
				"main": "src/test.ts",
				"polyfills": "src/polyfills.ts",
				"tsConfig": "tsconfig.spec.json",
				"karmaConfig": "karma.conf.js",
				"assets": [
				  "src/favicon.ico",
				  "src/assets"
				],
				"styles": [
				  "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
				  "src/styles.css"
				],
				"scripts": []
			  }
			},
			"lint": {
			  "builder": "@angular-devkit/build-angular:tslint",
			  "options": {
				"tsConfig": [
				  "tsconfig.app.json",
				  "tsconfig.spec.json",
				  "e2e/tsconfig.json"
				],
				"exclude": [
				  "**/node_modules/**"
				]
			  }
			},
			"e2e": {
			  "builder": "@angular-devkit/build-angular:protractor",
			  "options": {
				"protractorConfig": "e2e/protractor.conf.js",
				"devServerTarget": "frontend:serve"
			  },
			  "configurations": {
				"production": {
				  "devServerTarget": "frontend:serve:production"
				}
			  }
			}
		  }
		}
	  },
	  "defaultProject": "frontend",
	  "cli": {
		"analytics": false
	  }
	}


 6. Make a build from command-line
    a. Open a terminal

    b. Build the backend uber jar  (called backend-1.0-SNAPSHOT-exec.jar)
       unix> cd ~/intellijProjects/angularApp1
       unix> mvn clean package -Pprod

    c. Run the uber jar  (it has -exec in the filename)
       unix> java -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar

	d. Connect to the webapp at http://localhost:8080/app1


7. Create a .gitignore flie 
   unix> cd ~/intellijProjects/angularApp1
   unix> vi .gitignore

	############################################################
	# Filename .gitignore
	#
	# How to reproduce
	#   1) Go to https://www.gitignore.io/
	#   2) Enter the name of your IDE:  intellij
	#   3) Press Generate
	#
	# Purpose
	#   Tell Git which files and directories to ignore
	#
	# Created by using https://www.gitignore.io/api/intellij
	# And, then modified by me
	############################################################

	### Ignore Intellij specific files ###
	.idea/*
	*.iml

	## File-based project format:
	*.iws

	## Ignore compiled files in the target directory
	/target/

	## Ignore node_modules directory
	frontend/node_modules/*
	frontend/web/index.jsp
	frontend/node/*
	frontend/target/*

    # Ignore frontend/dist directory
	frontend/dist/*

	## Ignore the target directories
	backend/target/*


