Lesson:  Create a Custom Validator
----------------------------------
There are 2 kinds of custom validators
 1) Custom Validators used by model-based forms     (static method)
 2) Custom validators used by template-based forms  (Directive that implements Validator)
 
 
In our case, we want a custom validator that validates that this is true:
 The end_date is no more than 90 days greater than the start date
 
 If start_date==1/1/2020 and end_date==3/1/2020  --> That's good  (60 days between start and end date)
 If start_date==1/1/2020 and end_date==5/1/2020  --> That's bad  (150 days)


 
References
----------
https://www.infragistics.com/community/blogs/b/infragistics/posts/how-to-create-custom-validators-for-angular-reactive-forms
https://blog.angulartraining.com/how-to-implement-custom-form-validators-with-angular-861651b0dc2c




Procedure:  Add a *Simple* custom validator for model-based forms (w/o parameters)
----------------------------------------------------------------------------------
Goal:  Create a WeekendDateValidator that returns an error if the entered date is on a week-end

 1. Create the simple.date.validator.ts  
    a. Right-click on frontend/src/validators -> New Typescript file
       File name:  simple.date.validator.ts
	   
    b. Copy this to your newly-created file:
		import {FormControl, ValidationErrors} from "@angular/forms";

		export class SimpleDateValidator {

		  private static isWeekend(aDate: Date): boolean {
			let day = aDate.getDay();
			let isWeekend = (day === 6) || (day === 0);    // 6 = Saturday, 0 = Sunday
			return isWeekend;
		  }

		  public static validateNonWeekendValue(aControl: FormControl): ValidationErrors | null {
			if (aControl.value == null) {
			  // There is no value -- so assume that everything is valid
			  return null;
			}

			let enteredDate: Date = new Date(aControl.value);
			if (! SimpleDateValidator.isWeekend(enteredDate)) {
			  // User entered a date that is on a week-day.  The field is valid.
			  return null;
			} else {
			  // User entered a date that is on a week-end.  The field is invalid.
			  return {'custom_error': 'The entered date cannot be on a week-end'};
			}
		  }


		}



 2. Use the static method
    a. Go to the add-report-form.group.ts file
	b. Change the constructor to call your SimpleDateValidator.validateNonWeekendValue() method
	   
		start_date: new CustomFormControl("Start Date", "start_date", null,
							Validators.compose([
							  Validators.required,
							  SimpleDateValidator.validateNonWeekendValue,
							])),


		end_date: new CustomFormControl("End Date", "end_date", null,
						  Validators.compose( [
							Validators.required,
							SimpleDateValidator.validateNonWeekendValue,
						  ]))

	   
		public constructor() {
			super({
				name: new CustomFormControl("Report Name", "name", null,
				  Validators.compose([
					Validators.required,
					Validators.minLength(3),
					Validators.maxLength(25)
				  ])),

				priority: new CustomFormControl("Priority", "priority", null,
				  Validators.required),

				source: new CustomFormControl("Source", "source", null, null),
				authors: new AddReportFormControl("Authors", "authors", null, null),

				start_date: new CustomFormControl("Start Date", "start_date", null,
							  Validators.compose([
								  Validators.required,
								  SimpleDateValidator.validateNonWeekendValue,
							])),

				end_date: new CustomFormControl("End Date", "end_date", null,
							  Validators.compose( [
								  Validators.required,
								  SimpleDateValidator.validateNonWeekendValue,
							  ]))

			  }
			)

 3. Change the getValidationMessages in custom.form.control.ts to display the error
    a. Edit getValidationMessages() and add this case:
            case "custom_error":
              // This is a custom error from a custom validator (so display the custom error message)
              messages.push(this.errors.custom_error);
              break;	

     When completed, the getValidationMessages() should look like this:
		 public getValidationMessages() {
			let messages: string[] = [];

			if (this.errors) {
			  for (let errorName in this.errors) {
				  switch(errorName) {
					case "required":
						messages.push(`The ${this.label} is required`);
						break;

					case "minlength":
						messages.push(`The ${this.label} must be at least ${this.errors['minlength'].requiredLength} characters`);
						break;

					case "maxlength":
						messages.push(`The ${this.label} must not exceed ${this.errors['maxlength'].requiredLength} characters`);
						break;

					case "pattern":
						messages.push(`The ${this.label} contains illegal characters`);
						break;

					case "custom_error":
					  // This is a custom error from a custom validator (so display the custom error message)
					  messages.push(this.errors.custom_error);
					  break;

				  } // end switch
			  }
			}

			return messages;
		  }	 
	 
 4. Activate the debugger 
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
	c. Enter a start or end date that is a week-end (which is invalid)
    d. Click on "Save"
       -- You should see the message at the top:  The entered date cannot be on a week-end
       -- You should see the date field in red


 5. Improve the error message so that it says the field name -- e.g., "The Start Date cannot be on a week-end" or 
    a. Edit simple.date.validator.ts
	b. Change the static method validateNonWeekendValue() so that 
	   if the user enters a week-end, it returns this map with a key of 'invalid_date_on_weekend'
	     return {'invalid_date_on_weekend': 'The entered date cannot be on a week-end'};
	
	
       So, the method looks like this:
		  public static validateNonWeekendValue(aControl: FormControl): ValidationErrors | null {
			if (aControl.value == null) {
			  // There is no value -- so assume that everything is valid
			  return null;
			}

			let enteredDate: Date = new Date(aControl.value);
			if (! SimpleDateValidator.isWeekend(enteredDate)) {
			  // User entered a date that is on a week-day.  The field is valid.
			  return null;
			} else {
			  // User entered a date that is on a week-end.  The field is invalid.
			  return {'invalid_date_on_weekend': 'The entered date cannot be on a week-end'};
			}
		  }

     c. Edit custom.form.control.ts
	 d. Change the getValidationMessages() to look for the error: invalid_date_on_weekend
	       case "invalid_date_on_weekend":
              messages.push(`The ${this.label} cannot be on a week-end.`);
              break;
	
	    When completed, the getValidationMessages() method should look like this:
		  public getValidationMessages() {
			let messages: string[] = [];

			if (this.errors) {
			  for (let errorName in this.errors) {
				  switch(errorName) {
					case "required":
						messages.push(`The ${this.label} is required`);
						break;

					case "minlength":
						messages.push(`The ${this.label} must be at least ${this.errors['minlength'].requiredLength} characters`);
						break;

					case "maxlength":
						messages.push(`The ${this.label} must not exceed ${this.errors['maxlength'].requiredLength} characters`);
						break;

					case "pattern":
						messages.push(`The ${this.label} contains illegal characters`);
						break;

					case "invalid_date_on_weekend":
					  messages.push(`The ${this.label} cannot be on a week-end.`);
					  break;

					case "custom_error":
					  // This is a custom error from a custom validator (so display the custom error message)
					  messages.push(this.errors.custom_error);
					  break;

				  } // end switch
			  }
			}

			return messages;
		  }		
	
 6. Activate the debugger
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
	c. Enter a start or end date that is a week-end (which is invalid)
    d. Click on "Save"
       -- You should see the message at the top:  The Start Date cannot be on a week-end
       -- You should see the date field in red



Procedure:  Add a *Complex* custom validator for model-based forms (with parameters)
------------------------------------------------------------------------------------
Goal: Add a custom function called validateStartAndEndDate() that takes in passed-in argument that will check
       If the end date > start date *AND* the end date is N days after the start date
	   
 1. Add a new class called DateValidator with a static method
    a. Right-click on frontend/src/app/validators -> New Typescript File
	   Filename:  custom.date.validator.ts
	   
	b. Copy this to your newly-created file"
		import {AbstractControl, FormGroup, ValidationErrors, ValidatorFn} from "@angular/forms";

		function treatAsUTC(date: Date): any {
		  let result = new Date(date);
		  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
		  return result;
		}

		function  getDaysBetween(startDate: Date, endDate: Date) {
		  let millisecondsPerDay = 24 * 60 * 60 * 1000;
		  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
		}


		export function validateStartAndEndDate(aStartDateControlName: string,
												aEndDateControlName: string,
												aMaxDaysBetween: number): ValidatorFn {

			// This technique is used to pass-in parameters with a custom validator.  The problem is simple:
			//  a) Need to pass-in 3 parameters
			//  b) Need to return a method that takes-in a a single AbstractControl and returns ValidationErrors | null
			//
			// The solution is to use a factory function and return a method
			return (aControl: AbstractControl) : ValidationErrors | null  => {

				// Get a references to the formGroup
				let formGroup: FormGroup = <FormGroup>aControl.parent;
				if (! formGroup) {
				  return null;
				}

				// Get references to the start and end date controls
				let startDateControl: AbstractControl | null = formGroup.get(aStartDateControlName);
				let endDateControl: AbstractControl | null = formGroup.get(aEndDateControlName);

				if ((startDateControl?.value == null) || (endDateControl?.value == null)) {
				  // There is no start date or end date (so the form is probably initializing).  So, do nothing
				  return null;
				}

				let startDate: Date = new Date(startDateControl?.value );
				let endDate: Date = new Date(endDateControl?.value );

				if (startDate >= endDate) {
				  return {
					'custom_error' : 'The Start Date must be BEFORE the End Date'
				  };
				}

				// Calculate the number of days between the start and end date
				let totalDaysBetween: number = getDaysBetween(startDate, endDate);

				if (totalDaysBetween > aMaxDaysBetween) {
				  return {
					'custom_error' : `The End Date must be no more than ${aMaxDaysBetween} days after the Start Date`
				  };
				}

				// If no error, then return null
				return null;
			};

		}


 2. Change the AddReportFormGroup constructor to use the new custom validator
    a. Edit add-report.form.group.ts
	
	b. Edit the constructor so that the custom validator is used by the start_date and end_date
        start_date: new CustomFormControl("Start Date", "start_date", null,
                      Validators.compose([
                          Validators.required,
                          SimpleDateValidator.validateNonWeekendValue,
                        validateStartAndEndDate('start_date', 'end_date', 7)
                    ])),

        end_date: new CustomFormControl("End Date", "end_date", null,
                      Validators.compose( [
                        Validators.required,
                        SimpleDateValidator.validateNonWeekendValue,
                        validateStartAndEndDate('start_date', 'end_date', 7)
                      ]))
	
	
	When completed, the constructor should look something like this:
		 public constructor() {
			super({
				name: new CustomFormControl("Report Name", "name", null,
				  Validators.compose([
					Validators.required,
					Validators.minLength(3),
					Validators.maxLength(25)
				  ])),

				priority: new CustomFormControl("Priority", "priority", null,
				  Validators.required),

				source: new CustomFormControl("Source", "source", null, null),
				authors: new CustomFormControl("Authors", "authors", null, null),

				start_date: new CustomFormControl("Start Date", "start_date", null,
							  Validators.compose([
								  Validators.required,
								  SimpleDateValidator.validateNonWeekendValue,
							])),

				end_date: new CustomFormControl("End Date", "end_date", null,
							  Validators.compose( [
								Validators.required,
								SimpleDateValidator.validateNonWeekendValue,
								validateStartAndEndDate('start_date', 'end_date', 7)
							  ]))

			  }
			)

		}


 3. Make sure we display the custom errors in the getValidationMessages()
    a. Edit custom.form.control.ts
	
	b. Add another case for custom_error:
            case "custom_error":
              // This is a custom error from a custom validator (so display the custom error message)
              messages.push(this.errors.custom_error);
              break;
    
	
 4. Activate the debugger
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
	c. Enter a start_date and end_date within 7 days of each other (so it shows an error)
	d. Click on "Save"
       -- You should see the message at the top:  The Start Date cannot be on a week-end
       -- You should see the date field in red


 

