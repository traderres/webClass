Lesson: Setup Holy Grail Layout
-------------------------------
Angular does not come with a layout mechanism (unlike AngularJS).
We want to use Response Web Design (RWD) so the layout changes automatically for different screen sizes


To implement a holy grail layout, there are a few approaches:
 A) Use CSS media queries (represented by the @media rule)
 B) Use CSS Flexbox with media queries
 C) Use Angular Flex Layout Library     https://github.com/angular/flex-layout
 
Advantages of Angular Flex Layout
 + It provides a set of simple Angular directives that internally apply the rules of the flexbox layout 
 + It offers you the ObservableMedia service (that notifes your app about the current width of the viewport on the user's device)
 + It produces cross-browser-compatible CSS
 + It provids an Angular-friendly API for dealing with media queries using directives and observables
 
 The Flex Layout libraries provides two APIs:
  1) Static API allows you to use directives to specify layout attributes for containers and their children
  2) Responsive API enhances state API directives, enabling you to implement RWD so the app layout changes w/different screen sizes



References
----------
https://stackoverflow.com/questions/54968812/angular-flex-layout-holy-grail-design
https://www.digitalocean.com/community/tutorials/angular-flex-layout
https://github.com/angular/flex-layout
https://github.com/angular/flex-layout/wiki/API-Documentation#containers
https://code-maze.com/angular-material-navigation/
https://github.com/Robinyo/serendipity
https://robferguson.org/blog/2018/11/10/angular-material-toolbar-and-sidenav/
https://stackoverflow.com/questions/60631024/how-to-toggle-sidenav-component-from-header-component-using-a-button



Holy Grail Layout
-----------------
The layout has 3 columns

|------------------------------------|
|              Header                |       Header is 100px in height
|------------------------------------|
| navbar |        Content            |
|        |                           |       height is the remaining vertical space
|        |                           |       navbar is always 225px wide
|        |                           |       content is remaining width
|------------------------------------|
|              Footer                |       Footer is 50px in height
|------------------------------------|



Procedure:  Implement Holy Grail Layout with Flex Layout
--------------------------------------------------------
 1. Install Flex Layout 
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> npm install @angular/flex-layout@9.0.0-beta.31    @angular/cdk
	
	NOTES:
	 1) The angular compiler fails    when using flex-layout 10.0.0-beta.32
	 2) The angular compiler succeeds when using flex-layout 9.0.0-beta.31
	 3) To see a list of angular flex layout versions, use this url:
	           https://github.com/angular/flex-layout/releases
	
	    My guess is that....
		  if you are using Angular 9, then use flex-layout 9
		  if you are using Angular10, then use flex-layout 10


 2. Clear and Reload your node_modules cache from inside IntelliJ
    a. Delete the node_modules directory
	   unix> cd ~/intellijProjects/angularApp1/frontend
	   unix> rm -rf node_modules
	
	b. Within Intellij
	   frontend/package.json -> Right Click -> Run 'npm install'
	
	c. Wait for IntelliJ to finish the "Indexing..." operation
	   NOTE:  This may take a few minutes
	   
	
 3. Import the FlexLayoutModule module
    a. Go to the app.module.ts
	b. Add FlexLayoutModule to the app.module.ts
	     import { FlexLayoutModule } from '@angular/flex-layout';
		 
		 imports: [
		 	FlexLayoutModule,
			...
		 ]
		 		

 4. Activate the debugger (to cause the webapp to be compiled and deployed locally)
	a. Wait for Angular to finish compiling the CDK modules (May take an extra minute the first time)
    b. When the debugger finishes
	   1) Connect to http://localhost:4200
	   2) Make sure the existing navbar still works
	

 5. Create a header, footer, and navbar components
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> ng generate component header
	unix> ng generate component footer
	unix> ng generate component navbar

 
 6. Configure the app-navbar
    a. Change the navbar.component.html to this:
		<mat-sidenav-container autosize>

		  <mat-sidenav style="width:220px" mode="side" opened="true" [fixedInViewport]="true"  [fixedTopGap]="100" [fixedBottomGap]="50">
			<mat-nav-list>
			  <h3 mat-subheader>Reports</h3>
			  <a mat-list-item [routerLink]="'page/addReport'">Add Report</a>
			  <a mat-list-item [routerLink]="'page/viewReports'">View Reports</a>
			  <mat-divider>&nbsp;</mat-divider>

			  <h3 mat-subheader>Analytics</h3>
			  <a mat-list-item [routerLink]="'page/totalLogins'">Total Logins</a>
			</mat-nav-list>
		  </mat-sidenav>
		</mat-sidenav-container>


    b. Change the navbar.component.css to this:
		.mat-list-item {
		  font-family: Verdana, sans-serif;
		  font-size: 13px;
		}


		.mat-subheader{
		  font-family: Verdana, sans-serif;
		  font-size: 16px;
		  font-weight:bold;
		  background-color: #f2f4f7;
		  height:8px;
		  margin-top:5px;
		}

	

 
 7. Change the app.component.html
    
	From this:
		<div>

		  <!-- Top Menubar -->
		  <mat-toolbar color="primary">
			  <mat-toolbar-row style="padding-left: 0">
				  <button mat-icon-button>
					  <mat-icon (click)="sidenav.toggle()">
						  <!-- Hamburger icon that shows/hides the left navigatio bar -->
						<i class="fas fa-bars"></i>
					  </mat-icon>
				  </button>

				  <a mat-button [routerLink]="''"><h1>{{title}}</h1></a>
				  <span class="menu-spacer"></span>

				<div>
					<!-- Top Menubar buttons -->
					<a mat-button [routerLink]="'page/addReport'">Add Report</a>
					<a mat-button [routerLink]="'page/viewReports'">View Reports</a>
				</div>
				<span class="menu-spacer"></span>

			  </mat-toolbar-row>
		  </mat-toolbar>


		  <!-- Left Side Navigation Bar -->
		  <mat-sidenav-container>

			<!-- On Page load, the left side navbar is opened -->
			<mat-sidenav #sidenav mode="side" opened="true">
				<mat-nav-list>
					<a mat-list-item [routerLink]="'page/addReport'">Add Report</a>
					<a mat-list-item [routerLink]="'page/viewReports'">View Reports</a>
				</mat-nav-list>
			</mat-sidenav>


			<mat-sidenav-content>
				<div style="height: 88vh">
					<!-- M A I N    V I E W I N G    A R E A -->
					<router-outlet></router-outlet>

					<!-- Console -->
					<app-console></app-console>
				</div>
			</mat-sidenav-content>

		  </mat-sidenav-container>
		  <br/>


		</div>


	To this:
		<div fxFlexFill fxLayout="column">

		  <div fxFlex="100px" style="border: 2px solid black;">
			<!-- Header -->
			<app-header></app-header>
		  </div>


			<div fxFlex fxLayout="row" fxLayoutGap="10px">
			  <div fxFlex="225px" style="border: 1px solid blue; padding: 0">
				<!-- Left Side Navigation -->
				<app-navbar></app-navbar>
			  </div>

			  <div fxFlex style="border: 1px solid blue; padding: 0">
				<!-- Main Viewing Area -->
				<router-outlet></router-outlet>
			  </div>
			</div>


		  <div fxFlex="50px" style="border:2px solid black;">
			<!-- Footer -->
			<app-footer></app-footer>
		  </div>
		</div>

 8. Verify that the navbar appears on the left side
    a. Pull Run -> Debug 'Full WebApp'
       -- You should see the left-side navbar
	   -- The header and footer should be fixed
	   -- The left navbar and right-body can vary in height
	   
	
 9. Add a button to the header that will hide/show the left navbar
    a. Create a navbar.service.ts
	   unix> cd intellijProjects/angularApp1/frontend/
	   unix> ng generate service services/navbar
	   
	b. Replace the navbar.service.ts with this:
			import { Injectable } from '@angular/core';
			import {Observable, Subject} from "rxjs";

			@Injectable({
			  providedIn: 'root'
			})
			export class NavbarService {

			  public isNavbarDisplayed = true;
			  private showSideNavSubject = new Subject<boolean>();

			  public constructor() { }

			  public toggleNavbar(): void {
				this.isNavbarDisplayed = !this.isNavbarDisplayed;

				// Send a message to the navbar (to tell the navbar to show or hide)
				this.showSideNavSubject.next(this.isNavbarDisplayed);
			  }

			  public get(): Observable<boolean> {
				return this.showSideNavSubject.asObservable();
			  }
			}


	c. Add a button to the header.component.html
	  	<button type="button" (click)="toggle()">
  			<i class="fa fa-bars"></i>
	  	</button>
	  
	  
    d. Adjust the header.component.ts so that it injects the navbarService and has a toggle() function
	   1) Edit header.component.ts
	   2) Replace its contents with this:

			import { Component, OnInit } from '@angular/core';
			import {NavbarService} from "../services/navbar.service";

			@Component({
			  selector: 'app-header',
			  templateUrl: './header.component.html',
			  styleUrls: ['./header.component.css']
			})
			export class HeaderComponent implements OnInit {

			  constructor(private navbarService: NavbarService)
			  {}

			  ngOnInit(): void {
			  }

			  public toggle(): void {
				// Send a message to the navbarService (to tell it to toggle)
				this.navbarService.toggleNavbar();
			  }
			}


    e. Add an *ngIf to the app.component.html (to show/hide the navbar div)
	   1) Edit app.component.html
	   2) Change the div that surrounds the app-navbar so it looks like this:
			<div fxFlex="225px" style="border: 1px solid blue; padding: 0" *ngIf="this.isSideNavVisible">
				<!-- Left Side Navigation -->
				<app-navbar></app-navbar>
			</div>

          When finished the app.component.html looks like this:
			<div fxFlexFill fxLayout="column">

			  <div fxFlex="100px" style="border: 2px solid black;">
				<!-- Header -->
				<app-header></app-header>
			  </div>


			  <div fxFlex fxLayout="row" fxLayoutGap="10px">
				<div fxFlex="225px" style="border: 1px solid blue; padding: 0" *ngIf="this.isSideNavVisible">
				  <!-- Left Side Navigation -->
				  <app-navbar></app-navbar>
				</div>

				<div fxFlex style="border: 1px solid blue; padding: 0">
				  <!-- Main Viewing Area -->
				  <router-outlet></router-outlet>
				</div>
			  </div>


			  <div fxFlex="50px" style="border:2px solid black;">
				<!-- Footer -->
				<app-footer></app-footer>
			  </div>
			</div>
			
    f. Change the app.component.ts to listen on the navbarService
	   1) Inject the navbarService
			constructor(private navbarService: NavbarService)
			{ }
  
	   2) Add these instance variables:
			public  isSideNavVisible = true;    // The left nav starts out as visible
			private showSideNavSubscription: Subscription;
  
	   3) Change the ngOnInit() so that it subscribes to the navbarService.get() subscription:
			  public ngOnInit(): void {

				// This app-component will listen for messages from the navbarService
				this.showSideNavSubscription = this.navbarService.get().subscribe(sideNav => {
				  // We received a message from the navbarService
				  // -- Someone has toggled the navbar.

				  // Switch the flag (which causes the navbar to show/hide
				  this.isSideNavVisible = sideNav
				});
			  }

	   4) Add an ngOnDestroy() that unsubscribes
			public ngOnDestroy() {
				this.showSideNavSubscription.unsubscribe();
			}
			  

	   5) Change the class export statement so that it implements OnInit and OnDestroy
			export class AppComponent implements OnInit, OnDestroy {  


       When completed, the app.component.ts should look something like this:
			import {Component, OnDestroy, OnInit} from '@angular/core';
			import {NavbarService} from "./services/navbar.service";
			import {Subscription} from "rxjs";

			@Component({
			  selector: 'app-root',
			  templateUrl: './app.component.html',
			  styleUrls: ['./app.component.css']
			})
			export class AppComponent implements OnInit, OnDestroy {
			  title = 'frontend';

			  public  isSideNavVisible = true;    // The left nav starts out as visible
			  private showSideNavSubscription: Subscription;

			  constructor(private navbarService: NavbarService)
			  { }

			  public ngOnInit(): void {
				// This app-component will listen for messages from the navbarService
				this.showSideNavSubscription = this.navbarService.get().subscribe(sideNav => {
				  // We received a message from the navbarService
				  // -- Someone has toggled the navbar.

				  // Switch the flag (which causes the navbar to show/hide
				  this.isSideNavVisible = sideNav
				});
			  }

			  public ngOnDestroy() {
				this.showSideNavSubscription.unsubscribe();
			  }
			}



10. Verify that pressing the show/hide button (in the header) makes the navbar show/hide
    a. Pull Run -> Debug 'Full WebApp'
	b. Click on the show/hide button in the header
       -- You should see the left-side navbar appear and disappear


11. Make the navbar look better
    a. Remove the borders from the app.component.html
	
		When completed, the app.component.html should look like this:
			<div fxFlexFill fxLayout="column">

			  <div fxFlex="100px">
				<!-- Header -->
				<app-header></app-header>
			  </div>


			  <div fxFlex fxLayout="row" fxLayoutGap="10px">
				<div fxFlex="225px" style="padding: 0" *ngIf="this.isSideNavVisible">
				  <!-- Left Side Navigation -->
				  <app-navbar></app-navbar>
				</div>

				<div fxFlex>
				  <!-- Main Viewing Area -->
				  <router-outlet></router-outlet>
				</div>
			  </div>


			  <div fxFlex="50px">
				<!-- Footer -->
				<app-footer></app-footer>
			  </div>
			</div>


    b. Add a background color to the *HEADER*
	   1) Change the header.component.html so that it's a in a div with a class called "header"
			<div class="header">
			  <p>header works!</p>
			  <button type="button" (click)="toggle()">
				<i class="fa fa-bars"></i>
			  </button>
			</div>

	   2) Change the header.component.css to this:
			.header {
			  background: #364150;
			  color: white;
			  height: 100%;
			}


    c. Add a background color to the *NAVBAR*  (navbar.component.html)
	   1) Apply a class="navbar" to the <mat-sidenav> element
			<mat-sidenav class="navbar" style="width:200px" mode="side" opened="true" [fixedInViewport]="true" [fixedTopGap]="100" [fixedBottomGap]="50">


          When completed, the navbar.component.html should look like this:
			<mat-sidenav-container autosize>
			  <mat-sidenav class="navbar" style="width:200px" mode="side" opened="true" [fixedInViewport]="true" [fixedTopGap]="100" [fixedBottomGap]="50">
				<mat-nav-list>
				  <h3 mat-subheader>Reports</h3>
				  <a mat-list-item [routerLink]="'page/addReport'">Add Report</a>
				  <a mat-list-item [routerLink]="'page/viewReports'">View Reports</a>
				  <mat-divider>&nbsp;</mat-divider>

				  <h3 mat-subheader>Analytics</h3>
				  <a mat-list-item [routerLink]="'page/totalLogins'">Total Logins</a>
				</mat-nav-list>
			  </mat-sidenav>
			</mat-sidenav-container>


	   2) Change the navbar.component.css to this:
			.navbar {
			  background: #364150;
			  color: white;
			}

			.mat-list-item {
			  font-family: Verdana, sans-serif;
			  font-size: 13px;
			  color: white
			}


			.mat-subheader{
			  font-family: Verdana, sans-serif;
			  font-size: 16px;
			  font-weight:bold;
			  height:8px;
			  margin-top:5px;
			}


    c. Remove the footer from the app.component.html
	   1) Remove this from the app.component.html
			  <div fxFlex="50px">
				<!-- Footer -->
				<app-footer></app-footer>
			  </div>

       2) Adjust the navbar so that it has no bottom gap
	      Edit navbar.component.html
		     Change this property from the mat-sidenav:
			    [fixedBottomGap]="100" 
		     To this:
			    [fixedBottomGap]="0" 
          
       3) Remove the footer component
	      -- Delete the frontend/src/app/footer directory
		  -- Remove the FooterComponent from the app.module.ts
 
 


 
12. Change the header so it's only 75 pixels high
    a. Change the app.component.html
	   Change this:
			<div fxFlex="100px">
				<!-- Header -->
				<app-header></app-header>
			</div>
	
		To this:
			<div fxFlex="75px">
				<!-- Header -->
				<app-header></app-header>
			</div>
		
    b. Change the navbar so it starts 75 pixels from the top (intead of 100)
       Edit the navbar.component.html
	   Change the  <mat-sidenav> tag 
		
		Change this:
		   [fixedTopGap]="100"
		
		To this:
		   [fixedTopGap]="75"		


13. Run the Debugger on 'Full Webapp'
    Verify that you see this kind of layout 

	 The layout now has 3 sections
	|------------------------------------|
	|              Header                |       Header is 75px in height
	|------------------------------------|
	| navbar |        Content            |
	|        |                           |       height is the remaining vertical space
	|        |                           |       navbar is always 225px wide
	|        |                           |       content is remaining width
	|------------------------------------|





14. Create 3 columns in the header
    a. Change the header.component.html to this:
		<div class="header">

		  <div fxFlex fxLayout="row" fxLayoutGap="0">
			<div fxFlex>
			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayout="row" fxLayoutGap="0">
				  <div fxFlex="45px">
					<!-- Navbar Toggle Button -->
					<button type="button" (click)="toggle()">
					  <i class="fa fa-bars"></i>
					</button>
				  </div>

				  <div fxFlex fxFlexAlign="start start">
					<!-- Application Title -->
					<h1 style="display: inline" class="app1Logo">Angular App1</h1>
				  </div>
				</div>
			</div>

			<div fxFlex  fxLayoutAlign="center center" style="border: 1px solid blue">
			  <!-- Center Part of the Header -->
			  Center
			</div>

			<div fxFlex fxLayoutAlign="end end" style="border: 1px solid white">
			  <!-- Right Part of the Header -->
			  Right
			</div>

		  </div>

		</div>

    b. Change the header.component.css to this:
		 .header {
		  background: #364150;
		  color: white;
		  height: 100%;
		}

		.app1Logo {
		  color: #fff;
		  padding: 3px 0 5px 5px;
		  font-size: 1.7em;
		  margin: 0;
		  font-family: "Verdana", san-serif;
		  text-decoration: none;
		}


15. Run the Debugger on 'Full Webapp'
    Verify that you see this kind of layout -- but the header now has 3 sections

	 The layout now has 3 sections
	|------------------------------------|
	|              Header                |       Header is 75px in height
	|------------------------------------|
	| navbar |        Content            |
	|        |                           |       height is the remaining vertical space
	|        |                           |       navbar is always 225px wide
	|        |                           |       content is remaining width
	|------------------------------------|

