How to Scroll into View (within an Angular Page)
------------------------------------------------
Problem:  You have a long page view in Angular
          You want to allow users to click a button and scroll to a place
          You do not want to change the url in the browser (so the user can refresh the page)


Procedure
---------
 1. Add a long report page to the web app
    unix> cd ~/intellijProjects/angularApp1/frontend
    unix> ng generate component reports/long-report
    
    
 2. Add a page route to the app.module.ts
    a. Edit app.module.ts
    b. Add to the appRoutes:
          { path: 'page/reports/longReport',         component: LongReport.component },
      
	   When completed, the appRoutes variable should look something like this:
		   const appRoutes: Routes = [
			  { path: 'page/addReport',    component: AddReportComponent },
			  { path: 'page/longReport',   component: LongReportComponent },
			  { path: 'page/viewReports',   component: ViewReportsComponent },
			  { path: '',    redirectTo: 'page/viewReports', pathMatch: 'full' }, // By default, redirect the user to this page (url does change)
			  { path: '**',                component: NotFoundComponent}        // No routes match, so take the user to the "NotFoundComponent"
			];

      
 3. Add a link to this new page within the navbar.component.html
      <!-- View Long Report -->
      <mat-list-item class="navItem" [routerLink]="'page/longReport'" routerLinkActive="active">
        <a title="View Long Report">View Long Report</a>
        <div fxFlex fxLayoutAlign="end end">
          <a [routerLink]="'page/longReport'" target="_blank">
            <i class="fas fa-external-link-alt navItemIcon" title="Open 'View Long Report' in a new window"></i>
          </a>
        </div>
      </mat-list-item>
 
 
 4. Add the public scrollToTarget() method to the long-report.component.ts
     public scrollToTarget(aTarget: string): void {
        // Get a reference to the HTML element
        const el: HTMLElement|null = document.getElementById(aTarget);

        // Use the setTimeout to call the scrollIntoView
        if (el) {
            setTimeout(() =>
                el.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'}), 0);
         }
    }
  
 
 5. Add a button that will scroll to the bottom of the long-report.component.html
    a. Edit long-report.component.html
    b. Add a button to the top of the page:
    
		<div style="text-align: center">
		  <a (click)="this.scrollToTarget('bottomSection')"  class="clickable">
						<span class="fa-stack fa-lg">
						  <i class="fa fa-exclamation fa-stack-2x fa-inverse" style="font-size:1.5em; padding-top:.2em"></i>
						  <i class="fa fa-exclamation-triangle fa-stack-2x" style="color:yellow;"></i>
						</span>
		  </a>
		</div>
    
    
    c. Add a large vertical space between the top and bottom
    
        <mat-card class="mat-elevation-z5">
          <!-- Large Details Section -->
          <mat-card-title>Large Details Section</mat-card-title>

          <mat-card-content>

            <p style="height: 1000px">
               This is a long details section
            </p>

          </mat-card-content>
        </mat-card>
    
    
    d. Add the destination to the bottom of the page:
        <div id="bottomSection">
		  	<!-- Bottom Section -->
            <mat-card class="mat-elevation-z5" style="margin-top: 10px; margin-bottom: 10px">
               <mat-card-title>Bottom Section</mat-card-title>

             </mat-card>
        </div>
    
    
 6. Activate the debugger
    a. Click on the "View Long Report" button
    b. Click on the triangle.
	   -- It should scroll to the bottom of the page
    
 
 7. Add a link (in the bottomSection) that scrolls back to the top
    a. Edit the long-report.component.html
	b. Add a target called "topSection" to the top of the page
	     <div id="topSection"> </div>

    c. Add a link to the bottom of the page (that scrolls to the top)
	     <div style="text-align: center">
		    <a (click)="this.scrollToTarget('topSection')" class="clickable" style="text-decoration: none" >[Back to Top]</a>
		</div>
	 

Assumption:
 1) The frontend/src/styles/css has this class
		.clickable {
		  cursor: pointer;
		}


When finished the long-report.component.ts should look something like this:
	import { Component, OnInit } from '@angular/core';

	@Component({
	  selector: 'app-long-report',
	  templateUrl: './long-report.component.html',
	  styleUrls: ['./long-report.component.css']
	})
	export class LongReportComponent implements OnInit {

	  constructor() { }

	  ngOnInit(): void {
	  }


	  public scrollToTarget(aTarget: string): void {
		// Get a reference to the HTML element
		const el: HTMLElement|null = document.getElementById(aTarget);

		// Use the setTimeout to call the scrollIntoView
		if (el) {
		  setTimeout(() =>
			el.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'}), 0);
		}
	  }

	}



When finished the long-report.component.html should look something like this:
	<div id="topSection"> </div>

	<div style="text-align: center">
	  <a (click)="this.scrollToTarget('bottomSection')"  class="clickable">
					<span class="fa-stack fa-lg">
					  <i class="fa fa-exclamation fa-stack-2x fa-inverse" style="font-size:1.5em; padding-top:.2em"></i>
					  <i class="fa fa-exclamation-triangle fa-stack-2x" style="color:yellow;"></i>
					</span>
	  </a>
	</div>


	<mat-card class="mat-elevation-z5">
	  <!-- Large Details Section -->
	  <mat-card-title>Large Details Section</mat-card-title>

	  <mat-card-content>

		<p style="height: 1000px">
		  This is a long details section
		</p>

	  </mat-card-content>
	</mat-card>



	<div id="bottomSection">
	  <!-- Bottom Section -->
	  <mat-card class="mat-elevation-z5" style="margin-top: 10px; margin-bottom: 10px">
		<mat-card-title>Bottom Section</mat-card-title>

	  </mat-card>
	</div>

	<div style="text-align: center">
	  <a (click)="this.scrollToTarget('topSection')" class="clickable" style="text-decoration: none" >[Back to Top]</a>
	</div>
