Lesson:  Have the frontend elasticsearch service invoke the REST call to run the AutoComplete
---------------------------------------------------------------------------------------------

Procedure
---------
 1. Create an AutoCompleteDTO.ts model
    a. Right-click on frontend/src/app/models -> New File
	   Filename:  autocomplete.DTO.ts
	
	b. Copy this to the new file
	
		export class AutoCompleteDTO {
		   index_name: string;
		   returned_field: string;
		   searched_field: string;
		   raw_query: string;
		   size: number;
		}
	
	
 2. Edit the elasticsearch.service.ts
    a. Remove this method (which generated hard-coded observables)
	
	   public getMatchingCompanyNames(name: string, totalResultsToShow: number): Observable<string[]> {
		if (name == '') {
		  // The searchbox is empty so return an empty list (and do not run a search)
		  return of( [] );
		}
		else if (name.startsWith('a')) {
		  // The rnd number is even

		  // Return hard-coded observable with 3 strings that start with A
		  return of(["Amazon", "Apple", "American Airlines"] );
		}
		else if (name.startsWith('b')) {
		  // The rnd number is odd

		  // Return hard-coded observable with 3 strings that start with B
		  return of(["Best Buy", "Boeing", "Bed, Bath, and Beyond"] );
		}
		else {
		  return of( [] );
		}
	  }
	  
	  
    b. Add this method 
	
	   public getMatchingCompanyNames(aRawQuery: string, aTotalResultsToShow: number): Observable<string[]> {

		if (aRawQuery == '') {
		  // The user is searching for an empty string.  SO, return an empty list (and do not run a search)
		  return of( [] );
		}

		// Construct the DTO that has the information this REST call needs
		let autoCompleteDTO: AutoCompleteDTO = {
		  index_name: "reports",
		  returned_field: "report_name",
		  searched_field: "report_name.filtered",
		  raw_query: aRawQuery,
		  size: aTotalResultsToShow
		}

       		
		const restUrl = environment.baseUrl + '/api/search/autocomplete';

		// Return an observable
		return this.httpClient.post <string[]> (restUrl, autoCompleteDTO);
	  }


    c. Make sure the httpClient is injected in the constructor 
	  	constructor(private httpClient: HttpClient) { }
		
		
    So, your elsaticsearch.services.ts should look *something* like this:
		import { Injectable } from '@angular/core';
		import {Observable, of} from "rxjs";
		import {AutoCompleteDTO} from "../models/autocomplete.DTO";
		import {HttpClient} from "@angular/common/http";
		import {environment} from "../../environments/environment";

		@Injectable({
		  providedIn: 'root'
		})
		export class ElasticsearchService {

		  constructor(private httpClient: HttpClient) { }


		  public getMatchingCompanyNames(aRawQuery: string, aTotalResultsToShow: number): Observable<string[]> {

			if (aRawQuery == '') {
			  // The user is searching for an empty string.  SO, return an empty list (and do not run a search)
			  return of( [] );
			}

			let autoCompleteDTO: AutoCompleteDTO = {
			  index_name: "reports",
			  returned_field: "report_name",
			  searched_field: "report_name.filtered",
			  raw_query: aRawQuery,
			  size: aTotalResultsToShow
			}

			const restUrl = environment.baseUrl + '/api/search/autocomplete';

			// Return an observable
			return this.httpClient.post <string[]> (restUrl, autoCompleteDTO);
		  }

		}

