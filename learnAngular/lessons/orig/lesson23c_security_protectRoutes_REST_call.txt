Add a REST call that returns the user's Granted Routes
-------------------------------------------------------
Problem:  We need a REST call that returns information about which routes are granted and not granted
          Also, the front-end UserService will *cache* the result so it doesn't have to keep invoking REST calls for UserInfo data


When protecting front-end elements, the business rules must be stored some where in the project
Problem:  There could be lots of roles and lots of pages = Lots of relationships
 1) Store the business rules all over the front-end
    by adding if statements throughout the front-end
    If (user is granted admin role), then allow this feature to appear or allow this page to be shown
    + Simple
    - Difficult to maintain
    
 2) Store the business rules in a database table
    + More flexible  (if you change the database records, then UI controls can appear/disappear)
	+ The same map can be used individual UI controls (and not just whole pages)
	+ If you store this data in a repeatable_migration file, then every time it changes, the webapp will pick it up
    - Still requires if statements in the front-end but they are *simple* if statement
    - More complex: Requires the creating database tables and the back-end to pull those values
     
 3) Store the business rules in the application.yaml configuraiton file
    - Store a list of roles there
	- Store a list of routes there
	- Store the relationships routes there
    
	

Implementation using approach 2
-------------------------------
 A) Create a database tables
      Create table called "roles"            that holds the roles -- e.g., admin, reader
      Create table called "uicontrols"       that holds the routes/controls (one route for each page)
      Create table called "roles_uicontrols" that holds the relationships

 B) Change the back-end to grant the user the admin role  
    NOTE:  Normally, this would come from some other service
    
 C) Add a map to the back-end UserInfo object (to hold the map of so that it includes a map<String, boolean> routesAllowed
       private Map<String, Boolean> uiControlAccessMap;
 
 D) Configure the back-end to populate the UserInfo.uiControlAccessMap object on authentication
    -- The key is the route
    -- The value holds true if the user is allowed to see that route.  False otherwise
 
 E) Create a REST call that returns this information back to the front-end
    GET /api/users/me
	
 F) Change the front-end UserService to invoke the real REST call
 
 G) Change the front-end UserService so it caches the data (so it does *NOT* invoke the same REST call multiple itmes)


Procedure
---------
 1. Add the database tables to the project
    a. Add this file:  angularApp1/backend/src/main/resources/db/migration/R__security.sql
	   NOTE:  It must start with a capital R to be a repeatable migration 
	   
	b. Fill-in this file with this:
		--------------------------------------------------------------------------------
		-- Filename:  r__security.sql
		--
		-- NOTE:  This is a repeatable migration file because this data does not change
		--        So, if anything changes in this file, this script is re-executed on startup
		--------------------------------------------------------------------------------
		drop table if exists roles_uicontrols;
		drop table if exists uicontrols;
		drop table if exists roles;


		-- Create this table:  roles
		create table roles (
		  id   integer not null,
		  name varchar(50) not null,
		  primary key(id)
		);

		comment on table  roles       is 'This table holds all of the application roles used by the web app.';;
		comment on column roles.id   is 'This number uniquely identifies this role.';
		comment on column roles.name is 'This identifies the name of the role.';



		-- Create this table:  uicontrols
		create table uicontrols (
		   id   integer not null,
		   name varchar(50) not null,
		   primary key(id)
		);

		comment on table  uicontrols       is 'This table holds all of the application roles used by the web app.';;
		comment on column uicontrols.id   is 'This number uniquely identifies this UI feature.';
		comment on column uicontrols.name is 'This identifies the name of the UI feature.';




		-- Create this table:  roles_uicontrols
		create table roles_uicontrols (
			role_id      integer not null,
			uicontrol_id integer not null
		);
		comment on table  roles_uicontrols   is 'This table holds the relationships between the roles and uicontrols tables.';


		--
		-- Add the security records
		--
		insert into roles(id, name) values (1, 'ADMIN');
		insert into roles(id, name) values(2, 'READER');


		--
		-- Add the uicontrols records
		--
		insert into uicontrols(id, name) values(1001, 'page/viewReports');
		insert into uicontrols(id, name) values(1002, 'page/addReport');
		insert into uicontrols(id, name) values(1003, 'page/longReport');
		insert into uicontrols(id, name) values(1004, 'page/searchResults');


		-- Assign ui controls for the 'admin' role
		insert into roles_uicontrols(role_id, uicontrol_id) values(1, 1001);
		insert into roles_uicontrols(role_id, uicontrol_id) values(1, 1002);
		insert into roles_uicontrols(role_id, uicontrol_id) values(1, 1003);
		insert into roles_uicontrols(role_id, uicontrol_id) values(1, 1004);


		-- Assign ui controls for the 'reader' role  (cannot get to addReport)
		insert into roles_uicontrols(role_id, uicontrol_id) values(2, 1001);
		insert into roles_uicontrols(role_id, uicontrol_id) values(2, 1003);
		insert into roles_uicontrols(role_id, uicontrol_id) values(2, 1004);





	b. Run flyway migrate
	   unix> cd ~/intellijProjects/angularApp1/backend
	   unix> mvn flyway:migrate
	
	c. Verify that it worked
	   1) Open up your Intellij Database Console
	   2) Refresh the databaes console
	   3) Look at the database tables
	      -- You should see roles, roles_uicontrols, and uicontrols as new tables
		  
	   
	
 2. Grant the ADMIN role to the hard-coded user
    a. Edit MyAuthenticationmanager.loadUserDetailsForDevelopment()
	   Add this line:
             grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));

       When completed, the method should look something like this:
			public UserDetails loadUserDetailsForDevelopment(Authentication authentication) {

				final String userUID = "my_test_user";
				final String userDN = "3.2.12.144549.1.9.1=#161760312e646576,CN=my_test_user,OU=Hosts,O=ZZTop.Org,C=ZZ";

				// Create a list of granted authorities
				List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
	
				// Create a bogus UserInfo object
				// NOTE:  I am hard-coding the user's userid=25
				UserInfo anonymousUserInfo = new UserInfo()
						.withId(25)
						.withUsernameUID(userUID)
						.withUsernameDn(userDN)
						.withGrantedAuthorities(grantedAuthorities);
				return anonymousUserInfo;
			}
	   
	   
  3. Edit UserInfo.java
     a. Edd this private class variable:
	     	private Map<String, Boolean> uiControlAccessMap;
 
     b. Add this getter:
			public Map<String, Boolean> getUiControlAccessMap() {
				return uiControlAccessMap;
			}
     
	 c. Add this with method
			public UserInfo withUiControlAccessMap(Map<String, Boolean> aAccessMap) {
				this.uiControlAccessMap = aAccessMap;
				return this;
			}

 4. Add a method to the DatabaseService that will get the map of UI controls
    a. Edit the DatabaseService.java
	b. Add this method:
	
		public Map<String, Boolean> getUiControlAccessMap(List<GrantedAuthority> aGrantedRoleAuthorities) {
			// Construct the SQL to get list of all ui-contols with true if allowed and false if not allowed
			String sql =
					"-- Get the uicontrols in this role\n" +
					"select distinct ui.name, true as access\n" +
					"from uicontrols ui\n" +
					"         join roles r on (r.name IN ( :roleList ))\n" +
					"         join roles_uicontrols ru ON (r.id=ru.role_id) AND (ui.id=ru.uicontrol_id)\n" +
					"\n" +
					"UNION\n" +
					"\n" +
					"-- Get the roles not in this role\n" +
					"select name, false as access\n" +
					"from uicontrols ui\n" +
					"where ui.id NOT IN (\n" +
					"    select distinct ui.id\n" +
					"    from uicontrols ui\n" +
					"        join roles r on (r.name IN (  :roleList ))\n" +
					"        join roles_uicontrols ru ON (r.id=ru.role_id) AND (ui.id=ru.uicontrol_id)\n" +
					")";


			// Convert the list of granted authority objects into a list of strings (and strip-off the _ROLE)
			List<String> roleList = aGrantedRoleAuthorities.stream().map(auth -> {
				String authString = auth.toString();
				if (authString.startsWith("ROLE_")) {
					return authString.substring(5);
				}
				else {
					return authString;
				}
			}).collect(Collectors.toList());

			// Create a parameter map (required to use bind variables with postgres IN clause)
			Map<String, Object> paramMap = new HashMap<>();
			paramMap.put("roleList", roleList);


			// Execute the query
			NamedParameterJdbcTemplate np = new NamedParameterJdbcTemplate(this.dataSource);
			SqlRowSet rs = np.queryForRowSet(sql, paramMap);

			// Create the map
			Map<String, Boolean> accessMap = new HashMap<>();

			// Loop through the SqlRowSet, putting the results into a map
			while (rs.next() ) {
				accessMap.put( rs.getString("name"), rs.getBoolean("access") );
			}

			// Return the map
			return accessMap;
		}
			
			
 5. Change the MyAuthenticationManager so it sets this information
    a. Inject the DatabaseService
	    @Resource
    	private DatabaseService databaseService;
	
	b. Change this method:  loadUserDetailsForDevelopment() 
			public UserDetails loadUserDetailsForDevelopment(Authentication authentication) {

				final String userUID = "my_test_user";
				final String userDN = "3.2.12.144549.1.9.1=#161760312e646576,CN=my_test_user,OU=Hosts,O=ZZTop.Org,C=ZZ";

				// Create a list of granted authorities
				List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER_FOUND_IN_VALID_LIST_OF_USERS"));
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));

				// Get the user's granted access map
				Map<String, Boolean> uiControlAccesMap = databaseService.getUiControlAccessMap(grantedAuthorities);

				// Create a bogus UserInfo object
				// NOTE:  I am hard-coding the user's userid=25
				UserInfo anonymousUserInfo = new UserInfo()
						.withId(25)
						.withUsernameUID(userUID)
						.withUsernameDn(userDN)
						.withGrantedAuthorities(grantedAuthorities)
						.withUiControlAccessMap(uiControlAccesMap);
				return anonymousUserInfo;
			}


	b. Change this method:  loadUserDetailsFromRealSource() 

			private UserDetails loadUserDetailsFromRealSource(Authentication authentication) {
				logger.debug("loadUserDetailsFromRealSource() started authentication={}", authentication);
				String userDN;
				PreAuthenticatedAuthenticationToken token = null;

				if (authentication.getPrincipal() instanceof String) {
					userDN = authentication.getPrincipal().toString();
				} else if (authentication.getPrincipal() instanceof UserInfo) {
					return (UserDetails) authentication.getPrincipal();
				} else {
					token = ( PreAuthenticatedAuthenticationToken ) authentication.getPrincipal();
					userDN = token.getName();
				}

				logger.debug("userDN={}", userDN);

				// Get the user's UID from the CN=<...>
				try {
					String userUID = getCnValueFromLongDnString(userDN);

					// Get the list of roles from the header
					List<GrantedAuthority> grantedRoleAuthorities = getAuthoritiesFromHeaderValue();

					if ((grantedRoleAuthorities != null) && (grantedRoleAuthorities.size() == 0)) {
						// This user has no roles so throw a runtime exception
						throw new RuntimeException("No roles were found for this user: " + userUID);
					}
					logger.info("{} successfully logged-in.", userUID);

					// Get the user's userid from the database
					int userId = 25;

					// Get the user's granted access map
					Map<String, Boolean> uiControlAccesMap = databaseService.getUiControlAccessMap(grantedRoleAuthorities);

					// Create the UserInfo object (using the database id retrieved)
					return new UserInfo()
							.withId(userId)
							.withUsernameDn(userDN)
							.withUsernameUID(userUID)
							.withGrantedAuthorities(grantedRoleAuthorities)
							.withUiControlAccessMap(uiControlAccesMap);
				} catch (Exception e) {
					throw new UsernameNotFoundException("Exception raised in loadUserDetailsFromRealSource():  This user will definitely not login", e);
				}
			}
			
 
 6.  Create the back-end DTO object that will hold user information returned back to the front-end
     a. Right-click on backend/src/main/java/com/lessons/models -> New Class
	    Class Name:  GetUserInfoDTO
	 
	 b. Copy this to your newly-created class:
		package com.lessons.models;

		import com.fasterxml.jackson.annotation.JsonProperty;

		import java.util.Map;

		public class GetUserInfoDTO {
			@JsonProperty("name")
			private final String name;

			@JsonProperty("pageRoutes")
			private final Map<String, Boolean> accessMap;


			public GetUserInfoDTO(String aName, Map<String, Boolean> aAccessMap) {
				this.name = aName;
				this.accessMap = aAccessMap;
			}

			public String getName() {
				return name;
			}

			public Map<String, Boolean> getAccessMap() {
				return accessMap;
			}
		}


 7. Create the REST call that will populate this DTO and return it back to the front-end
    a. Right-click on backend/src/main/java/com/lessons/controllers -> New Class
	   Class Name:  UserController
	 
	 b. Copy this to your newly-created class:
			package com.lessons.controllers;

			import com.lessons.models.GetUserInfoDTO;
			import com.lessons.services.UserService;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			import org.springframework.http.HttpStatus;
			import org.springframework.http.ResponseEntity;
			import org.springframework.stereotype.Controller;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RequestMethod;

			import javax.annotation.Resource;
			import java.util.Map;

			@Controller("com.lessons.controllers.UserController")
			public class UserController {
				private static final Logger logger = LoggerFactory.getLogger(UserController.class);

				@Resource
				private UserService userService;

				/**
				 * GET /api/users/me REST endpoint that returns information about the user
				 */
				@RequestMapping(value = "/api/users/me", method = RequestMethod.GET, produces = "application/json")
				public ResponseEntity<?> getUserInfo() {

					// Get the user's logged-in name
					String loggedInUsername = userService.getLoggedInUserName();

					// Get the user's access map
					Map<String, Boolean> accessMap = userService.getUiControlAccessMap();

					// Create the GetUserInfoDTO object
					GetUserInfoDTO dto = new GetUserInfoDTO(loggedInUsername, accessMap);

					// Return a response of 200 and the DTO object with information
					return ResponseEntity.status(HttpStatus.OK).body(dto);
				}
			}

 8. Try it out
    a. Startup the back-end
	b. Startup Postman
	c. Invoke a REST call to GET /api/users/me
	   Headers:  Accept  Application/json
	   Press "Send"
	   
	d. Change the MyAuthenticationManager.loadUserDetailsForDevelopment() so that the user only has the READER role
	   Change this line:
	          grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));

       To this:
	          grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_READER"));
			  
   e. Restart the back-end 
   f. Press "Send"
      -- You should get a different access map
	  -- You should see this:
			{
				"name": "my_test_user",
				"access_map": {
					"/page/viewReports": true,
					"/page/longReport": true,
					"/page/searchResults": true,
					"/page/addReport": false
				}
			}
	
	
	
