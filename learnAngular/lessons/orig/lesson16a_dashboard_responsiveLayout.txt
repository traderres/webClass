Lesson:  Add Dashboard Page w/Responsive Layout
-----------------------------------------------
Approach: The Dashboard is a layout of angular mat-cards

The BreakpointObserver can detect these:
    XSmall (599.99px or less)
    Small  (600 - 959.99px)
    Medium (960 - 1279.99px)
    Large  (1280 - 1919.99px)
    XLarge (1920px or greater)
	


Create a page with this format

+-------------------------------------+
| Page Title             Page Options |                                                angular flex row1 
+-------------------------------------+
| card1         card2           card3 |  <mat-grid-list>                               angular flex row2
|                                     |        <mat-grid-tile>...</mat-grid-tile> 
|                                     |        <mat-grid-tile>...</mat-grid-tile>   
| card4         card5           card6 |  </mat-grid-list> 
+-------------------------------------+


 card1 through card3 is in one mat-grid-tile with 

So, the page uses angular flex with two rows
 1) angular flex row1 holds the page title and page options
 2) angular flex row2 holds two rows
    <mat-grid-List>
	   card1 
	   card2
	   card3
	</mat-grid-list>
 
    <mat-grid-List>
	   card4
	   card5
	   card6
	</mat-grid-list>
 
   Each grid list looks like this:
        <mat-grid-list [cols]="this.totalColumns" rowHeight="400px">
		</mat-grid-list>
		
   
   Each card will look like this:
       <mat-grid-tile colspan="1" rowspan="1">
          <mat-card>
            <mat-card-content class="iev-card-content">

              <!-- Chart 1:  Pie Chart showing something -->
              <div id="chart1" style="width: 100%; height: 100%"></div>

            </mat-card-content>
          </mat-card>
	  </mat-grid-tile>
	  

Procedure
---------
 1. Add this module to your app.module.ts
         MatGridListModule
		 MatCardModule
		 
 2. Create the dashboard component
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> ng generate component dashboard


 3. Add a route to the new page (within app.module.ts)
    a. Edit app.modules.ts
	b. Add this line to the routes
  		{ path: 'page/dashboard',    component: DashboardComponent },

	  
 4. Add a link to the dashboards (from the navbar)
    a. Edit navbar.component.html
	b. After the "Upload Report" link, add this:
		
      <!-- Dashboard Page  -->
      <mat-list-item class="navItem" [routerLink]="'page/dashboard'" routerLinkActive="active">
        <a title="Dashboard">Dashboard</a>
        <div fxFlex fxLayoutAlign="end end" >
          <a [routerLink]="'page/dashboard'" target="_blank">
            <i class="fas fa-external-link-alt navItemIcon" title="Open 'Dashboard' a new window"></i>
          </a>
        </div>
      </mat-list-item>


5. Verify that the dashboard page works in the navbar
   a. Activate the debugger on "Full WebApp"
   b. Click on the "Dashboard" link
   

6. Add MatGridListModule to the app.module.ts
   a. Edit app.module.ts
   
   b. Add this to the top:
        import {MatGridListModule} from '@angular/material/grid-list';
		import {MatListModule} from '@angular/material/list';
		
   c. Add this to the imports:
        imports: [
		...
		   MatGridListModule,
		   MatListModule
		]


7. Setup the layout for the dashboard page
   a. Edit dashboard.component.html
   b. Replace it with this:

		<div class="grid-container">

		  <div fxFlexFill fxLayout="column" style="margin: 0; padding: 0">

			<div fxFlex fxLayout="row" fxLayoutGap="0" style="margin: 0; padding: 0;">

			  <!-- Left Side of the Top Row -->
			  <div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0" class="top-row">
				<h1 class="mat-h1">Dashboard</h1>
			  </div>


			  <!-- Right Side of the Top Row -->
			  <div fxFlex fxLayoutAlign="end center">

			  </div>

			</div>  <!-- End of top row -->


			<!-- Start of the second row -->
			<div fxFlex  fxLayout="column" fxLayoutGap="0">

			  <!-- Setup the 1st row of graphs -->
			  <mat-grid-list [cols]="3" rowHeight="400px">

				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>
					<mat-card-content class="iev-card-content">

					  <!-- Chart 1 -->
					  Chart 1

					</mat-card-content>
				  </mat-card>
				</mat-grid-tile>

				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>
					<mat-card-content class="iev-card-content">

					  <!-- Chart 2 -->
					  Chart 2

					</mat-card-content>
				  </mat-card>
				</mat-grid-tile>

				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>
					<mat-card-content class="iev-card-content">

					  <!-- Chart 3 -->
					  Chart 3

					</mat-card-content>
				  </mat-card>
				</mat-grid-tile>


				<!-- Setup the 2nd row of graphs -->
				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>

					<mat-card-content class="iev-card-content">

					  <!-- Chart 4 -->
					  Chart 4

					</mat-card-content>

				  </mat-card>
				</mat-grid-tile>

				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>
					<mat-card-content class="iev-card-content">

					  <!-- Chart 5 -->
					  Chart 5

					</mat-card-content>
				  </mat-card>
				</mat-grid-tile>

				<mat-grid-tile colspan="1" rowspan="1">
				  <mat-card>
					<mat-card-content class="iev-card-content">

					  <!-- Chart 6 -->
					  Chart 6

					</mat-card-content>
				  </mat-card>
				</mat-grid-tile>

			  </mat-grid-list>
			</div> <!-- End of 2nd row -->
		  </div> <!-- End of Angular flex -->
		</div>  <!-- End of grid container -->


 8. Add the dashboard.component.css
    a. edit dashboard.component.css
    b. Add this to the file:
  
		.mat-card {

		  /* Set spacing between cards */
		  position: absolute;
		  top: 10px;
		  left: 10px;
		  right: 10px;
		  bottom: 10px;
		  overflow-y: auto;
		}



		.grid-container {
		  margin: 10px;
		}


	 
 9. Verify that you can see the 6 empty cards
    PROBLEM:  The cards are not responsive.  If you reduce the width, the cards do not switch to 2-columns or 1-column
	
 
10. Make the layout responsive
    a. Edit the dashboard.component.ts
	
	b. Inject the breakpointObserver

		   constructor(private breakpointObserver: BreakpointObserver) 
		   { }

   
   
   c. In the ngOnInit(), we will subscribe to the breakpointObserver
		public totalColumns: number;
		private cardLayoutSubscription: Subscription;

		ngOnInit(): void {

		this.cardLayoutSubscription = this.breakpointObserver.observe(
		  [Breakpoints.XLarge, Breakpoints.Large, Breakpoints.Medium, Breakpoints.Small, Breakpoints.XSmall])
		  .subscribe((state: BreakpointState) => {

			if ((state.breakpoints[Breakpoints.XSmall]) || (state.breakpoints[Breakpoints.Small])) {
			  // The browser is Small or XSmall -- so reduce the number of columns to 1
			  console.log('Width is small or xsmall.  totalColumns=1');
			  this.totalColumns = 1;

			} else if (state.breakpoints[Breakpoints.Medium]) {
			  // The browser is Medium -- so set columns to 2
			  console.log('Width is medium.  totalColumns=2');
			  this.totalColumns = 2;

			} else {
			  // The browser is larger or greater -- so set the columns to 3
			  console.log('Width is large or greater.  totalColumns=3');
			  this.totalColumns = 3;
			}

		  });
		}

   
   d. Make sure you unsubscribe from the cardLayoutSubscription

		  ngOnDestroy(): void {
			// Unsubscribe from the subscription (to avoid memory leaks)
			this.cardLayoutSubscription.unsubscribe();
          }
		  
		  
   When finished, dashboard.component.ts should look like this:
		import {Component, OnDestroy, OnInit} from '@angular/core';
		import {BreakpointObserver, Breakpoints, BreakpointState} from "@angular/cdk/layout";
		import {Subscription} from "rxjs";

		@Component({
		  selector: 'app-dashboard',
		  templateUrl: './dashboard.component.html',
		  styleUrls: ['./dashboard.component.css']
		})
		export class DashboardComponent implements OnInit, OnDestroy {

		  constructor(private breakpointObserver: BreakpointObserver)
		  { }

		  private cardLayoutSubscription: Subscription;
		  public totalColumns: number = 3;

		  ngOnInit(): void {

			this.cardLayoutSubscription = this.breakpointObserver.observe(
			  [Breakpoints.XLarge, Breakpoints.Large, Breakpoints.Medium, Breakpoints.Small, Breakpoints.XSmall])
			  .subscribe((state: BreakpointState) => {

				if ((state.breakpoints[Breakpoints.XSmall]) || (state.breakpoints[Breakpoints.Small])) {
				  // The browser is Small or XSmall -- so reduce the number of columns to 1
				  console.log('Width is small or xsmall.  totalColumns=1');
				  this.totalColumns = 1;

				} else if (state.breakpoints[Breakpoints.Medium]) {
				  // The browser is Medium -- so set columns to 2
				  console.log('Width is medium.  totalColumns=2');
				  this.totalColumns = 2;

				} else {
				  // The browser is larger or greater -- so set the columns to 3
				  console.log('Width is large or greater.  totalColumns=3');
				  this.totalColumns = 3;
				}

			  });
		  }


		  ngOnDestroy(): void {
			// Unsubscribe from the subscription (to avoid memory leaks)
			this.cardLayoutSubscription.unsubscribe();
		  }
		}
   
   
11. Change the dashboard.component.html to <mat-grid-list> tag
    a. Edit dashboard.component.html
	b. Change this line:
	      <!-- Setup the 1st row of graphs -->
     	  <mat-grid-list [cols]="3" rowHeight="400px">
  
       To this:
	      <!-- Setup the 1st row of graphs -->
     	  <mat-grid-list [cols]="this.totalColumns" rowHeight="400px">


12. Try it out
    a. Activate the debugger
	b. Go to the Dashboard page
	c. Reduce/Expand the width of the page
	   -- The layout should increase/decrease from 1 column to 3 columns
	   -- Look at the console to see when the changes are made
	   
	   
