Lesson:  Add a Charts to the Dashboard
--------------------------------------
Problem:  We want to put a chart in a mat-card and load it with hard-coded data


Procedure
---------
 1. Add this css class:  chart-content
    a. Edit dashboard.component.css
	b. Add this class to it:
	
		.chart-content {
		  /* Cause the chart to fit perfectly within the mat-card tag */
		  flex-grow: 1;
		  display: flex;
		  flex-direction: column;
		  max-height: 100%;
		}

 
 2. Adjust the dashboard.component.html so there is a <div> tag for chart1
    a. Edit dashboard.component.html
	b. Replace this:

		<mat-grid-tile colspan="1" rowspan="1">
		  <mat-card>
			<mat-card-content class="chart-content">

			  <!-- Chart 1 -->
			  Chart 1

			</mat-card-content>
		  </mat-card>
		</mat-grid-tile>
	       
	
	  With this:  (NOTE, we are also using the chart-content css class)
        <mat-grid-tile colspan="1" rowspan="1">
          <mat-card>
            <mat-card-content class="chart-content">

              <!-- Chart 1 -->
              <div id="chart1" style="width: 100%; height: 100%"></div>

            </mat-card-content>
          </mat-card>
        </mat-grid-tile>
			  

 3. Adjust the dashboard.component.ts so that it initializes the chart
    a. Edit dashboard.component.ts
	
	b. Add the highchart imports and settings to the top (before the @Component section)
	
		import * as Highcharts from "highcharts";    // needed

		window.Highcharts = Highcharts;

		// Turn on the highchart context menu view/print/download options
		import HC_exporting from "highcharts/modules/exporting";
		HC_exporting(Highcharts);

		// Turn on the highchart context menu *export* options
		// NOTE:  This provides these menu options: Download CSV, Download XLS, View Data Table
		import HC_exportData from "highcharts/modules/export-data";
		HC_exportData(Highcharts);

		// Do client-side exporting (so that the exporting does *NOT* go to https://export.highcharts.com/
		// NOTE:  This does not work on all web browsers
		import HC_offlineExport from "highcharts/modules/offline-exporting";
		HC_offlineExport(Highcharts);

		// Turn on the drilldown capabilities
		import HC_drillDown from "highcharts/modules/drilldown";
		import {DashboardService} from "../services/dashboard.service";
		import {Chart} from "highcharts";
		HC_drillDown(Highcharts);


	
	c. Make sure your dashboard component implements OnInit, OnDestroy, and AfterViewInit
	     export class DashboardComponent implements OnInit, OnDestroy, AfterViewInit {
		 
		 }
		 
	
	d. Add this call to the ngOnInit() to set Higchart options:
	
		ngOnInit(): void {

			// Set options for all highchart menus on this page
			Highcharts.setOptions( {
				lang: {
				  thousandsSep: ','    // Set the thousand separator as a comma
				}
			});
		
		...
		
		}
		


	e. Add this method:  reloadData
		  private reloadData(): void {
			this.dataIsLoading = true;

			// Update chart 1 with hard-coded data
			this.chartOptions1.series[0].data = [
			  {
				name: "Item 3",
				y: 989
			  },
			  {
				name: "Item 3R",
				y: 249
			  },
			  {
				name: "Item 5",
				y: 1035
			  },
			  {
				name: "Item 5R",
				y: 324
			  }
			];
			Highcharts.chart('chart1', this.chartOptions1);


			// Redraw all of the charts on this page (so they fit perfectly within the mat-card tags
			Highcharts.charts.forEach(function (chart: Chart | undefined) {
			  chart?.reflow();
			});

			this.dataIsLoading = false;
		  }


	f. Create the ngAfterViewInit() method and make sure it calls reloadData();
	
		 ngAfterViewInit() {
			// Reload chart data
			// NOTE:  This call must be in ngAfterViewInit() and not in ngOnInit()
			this.reloadData();
		}
  	
   
   g. Add this variable:
         public dataIsLoading: boolean = false;
		 
		 
   h. Add this map with all of the chart settings:
		 private chartOptions1: any = {
			credits: {
			  enabled: false        // Hide the highcharts.com label
			},
			caption: {
			  text: ''
			},
			chart: {
			  type: 'pie'
			},
			title: {
			  text: 'Pending Case Distribution'
			},
			subtitle: {
			  text: ''
			},
			accessibility: {
			  announceNewData: {
				enabled: true
			  },
			  point: {
				valueSuffix: '%'
			  }
			},
			plotOptions: {
			  series: {
				dataLabels: {
				  enabled: true,
				  format: '<b>{point.name}</b>:<br>{point.percentage:.1f} %<br>value: {point.y}'
				}
			  }
			},
			tooltip: {
			  headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
			  pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b> or <b>{point.percentage:.1f}%</b> of total<br/>'
			},
			series: [
			  {
				name: "Browsers",
				colorByPoint: true,
				data: []
			  }
			]
		  };
  

    When done, the dashboard.component.ts should look something like this:
		import {AfterViewInit, Component, OnDestroy, OnInit} from '@angular/core';
		import {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';
		import {Observable, Subscription} from 'rxjs';
		import {FormControl} from "@angular/forms";
		import {debounceTime, distinctUntilChanged, startWith, switchMap} from "rxjs/operators";
		import {ElasticsearchService} from "../services/elasticsearch.service";
		import * as Highcharts from "highcharts";    // needed

		window.Highcharts = Highcharts;   // needed

		// Turn on the highchart context menu view/print/download options
		import HC_exporting from "highcharts/modules/exporting";
		HC_exporting(Highcharts);

		// Turn on the highchart context menu *export* options
		// NOTE:  This provides these menu options: Download CSV, Download XLS, View Data Table
		import HC_exportData from "highcharts/modules/export-data";
		HC_exportData(Highcharts);

		// Do client-side exporting (so that the exporting does *NOT* go to https://export.highcharts.com/
		// NOTE:  This does not work on all web browsers
		import HC_offlineExport from "highcharts/modules/offline-exporting";
		HC_offlineExport(Highcharts);

		// Turn on the drilldown capabilities
		import HC_drillDown from "highcharts/modules/drilldown";
		import {Chart} from "highcharts";
		HC_drillDown(Highcharts);


		@Component({
		  selector: 'app-dashboard',
		  templateUrl: './dashboard.component.html',
		  styleUrls: ['./dashboard.component.css']
		})
		export class DashboardComponent implements OnInit, OnDestroy, AfterViewInit {
		  public totalColumns: number;
		  private cardLayoutSubscription: Subscription;
		  public matchingNames: Observable<string[]>;
		  public companyNameCtrl:  FormControl = new FormControl();

		  public dataIsLoading: boolean = false;


		  constructor(private breakpointObserver: BreakpointObserver,
					  private elasticsearchService: ElasticsearchService) { }

		  ngOnInit(): void {

			// Set options for all highchart menus on this page
			Highcharts.setOptions( {
				lang: {
				  thousandsSep: ','    // Set the thousand separator as a comma
				}
			});

			this.matchingNames = this.companyNameCtrl.valueChanges
			  .pipe(
				startWith(''),
				debounceTime(500),
				distinctUntilChanged(),
				switchMap(enteredName => {
				  // NOTE:  We use switchMap for its cancelling effect:  On each observable, the previous observable is cancelled.
				  return this.filterResults(enteredName);
				})
			  );

			this.cardLayoutSubscription = this.breakpointObserver.observe(
			  [Breakpoints.XLarge, Breakpoints.Large, Breakpoints.Medium, Breakpoints.Small, Breakpoints.XSmall])
			  .subscribe((state: BreakpointState) => {

				if ((state.breakpoints[Breakpoints.XSmall]) || (state.breakpoints[Breakpoints.Small])) {
				  // The browser is Small or XSmall -- so reduce the number of columns to 1
				  console.log('Width is small or xsmall.  totalColumns=1');
				  this.totalColumns = 1;

				} else if (state.breakpoints[Breakpoints.Medium]) {
				  // The browser is Medium -- so set columns to 2
				  console.log('Width is medium.  totalColumns=2');
				  this.totalColumns = 2;

				} else {
				  // The browser is larger or greater -- so set the columns to 3
				  console.log('Width is large or greater.  totalColumns=3');
				  this.totalColumns = 3;
				}

			  });


		  }


		  ngOnDestroy(): void {
			// Unsubscribe from the subscription (to avoid memory leaks)
			this.cardLayoutSubscription.unsubscribe();
		  }

		  ngAfterViewInit() {
			// Reload chart data
			this.reloadData();
		  }

		  private filterResults(name: string): Observable<string[]> {

			// Return a real observable
			return this.elasticsearchService.getMatchingCompanyNames(name, 5);
		  }


		  private reloadData(): void {
			this.dataIsLoading = true;

			// Update chart 1 with hard-coded data
			this.chartOptions1.series[0].data = [
			  {
				name: "Item 3",
				y: 989
			  },
			  {
				name: "Item 3R",
				y: 249
			  },
			  {
				name: "Item 5",
				y: 1035
			  },
			  {
				name: "Item 5R",
				y: 324
			  }
			];
			Highcharts.chart('chart1', this.chartOptions1);


			// Redraw all of the charts on this page (so they fit perfectly within the mat-card tags
			Highcharts.charts.forEach(function (chart: Chart | undefined) {
			  chart?.reflow();
			});

			this.dataIsLoading = false;
		  }



		  private chartOptions1: any = {
			credits: {
			  enabled: false        // Hide the highcharts.com label
			},
			caption: {
			  text: ''
			},
			chart: {
			  type: 'pie'
			},
			title: {
			  text: 'Pending Case Distribution'
			},
			subtitle: {
			  text: ''
			},
			accessibility: {
			  announceNewData: {
				enabled: true
			  },
			  point: {
				valueSuffix: '%'
			  }
			},
			plotOptions: {
			  series: {
				dataLabels: {
				  enabled: true,
				  format: '<b>{point.name}</b>:<br>{point.percentage:.1f} %<br>value: {point.y}'
				}
			  }
			},
			tooltip: {
			  headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
			  pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b> or <b>{point.percentage:.1f}%</b> of total<br/>'
			},
			series: [
			  {
				name: "Browsers",
				colorByPoint: true,
				data: []
			  }
			]
		  };

		}


 4. Activate the debugger
    -- You should see a chart within one of the cards
	
