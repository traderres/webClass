Lesson:  Add Form Validation to the "Add Reports" page (using templates)
------------------------------------------------------------------------
Problem:  I don't want users to press the "Save" button on the "Add Reports" page
          until all required fields are provided
          
Solution: On the frontend, Use Form Validation  
          On the backend, use Java DTO validation
          

Part 1: Add frontend form validation to "Add Reports"
-----------------------------------------------------
 1. Add the required fields to the add-report.component.html
    a. Add the form tag WITHIN the mat-card-content tags
       NOTE:  We add a template reference variable called "form" that points to this form
       
        <mat-card-content>
           <form #form="ngForm" novalidate="true">

           ...
           
           </form>
        </mat-card-content>

    b. Make the report name textbox a *required* field
       NOTE:  Add #name="ngModel" to create a template reference to this text box
              Add required (so that the front-end knows that it's a required field)
       
          <input matInput type="text" name="report.name"  [(ngModel)]="report.name" required #name="ngModel"/>

          <mat-error>
            <!-- This mat-error tag is displayed if this form field is invalid AND touched -->
            Report Name is required
          </mat-error>
          
          
    c. Make the priority dropdown a *required* field
       NOTE:  Add #priority="ngModel" to create a template reference to this dropdown
              Add required (so that the front-end knows that it's a required field)
           
            <mat-select name="report.priority" [(ngModel)]="report.priority" required #priority="ngModel">
                <mat-option>.....</mat-option>
                <mat-option>.....</mat-option>
                <mat-option>.....</mat-option>
                <mat-option>.....</mat-option>
            </mat-select>

            <mat-error>
              <!-- This mat-error tag is displayed if this form field is invalid AND touched -->
              Priority is required
            </mat-error>
           
       
    
    d. Change the reset button so click events call reset(form) 
          <button type="button" (click)="reset(form)" style="margin-top: 20px" mat-raised-button>
             
        
    e. Change the save button so click events call save(form) 
       NOTE:  Do not make the "save" button as type="submit".  We want type="button"
          <button type="button" (click)="save(form)" mat-raised-button color="primary">
          
 
 2. Add a diagnostic <pre>...</pre> tag to the end of add-report.copmonent.html
          <pre>
			  report={{report | json}}

			  form.invalid={{form.invalid}}
			  name.errors.required={{name.errors?.required}}
			  name.touched={{name.touched}}
			  name.invalid={{name.invalid}}
          </pre>
      </mat-card>
      
      
 3. Change the add-report.component.ts so that the form object is passed-in on the reset() and save() methods
    a. Change the reset() method so that the form object is passed-in
        public reset(aForm:  NgForm): void {
            // Reset the form back to pristine/untouched condition
            aForm.resetForm();
         }
  
    b. Change the save() method so that the form object is psased-in
        public save(aForm: NgForm): void {
            if (aForm.valid) {
                // Invoke a service to save the record
                console.log("Save record.");

                // Reset the form
                aForm.reset();
            }
        }


 4. Change the component and HTML so that the Report Model fields can be null
    a. Change the Report model to allow for null fields
           export class Report {
              name: string | null;
              priority: number | null;
              source: number | null;
              authors: string | null
            }    
    
    b. Change the AddReportComponent.ngOnInit() so that unset values are null
          ngOnInit(): void {
            // Initialize the report object
            this.report = new Report();
            this.report.name = null;
            this.report.priority = null;
            this.report.source = null;
            this.report.authors = null;
          } 
      
     c. Change the priority dropdown so that null is the default value
        by changing the <mat-option> tags so that it uses [value]=null   
            <mat-select name="report.priority" [(ngModel)]="report.priority" required #priority="ngModel">
                <mat-option [value]=null>-Select Priority-</mat-option>
                <mat-option [value]=1>Low</mat-option>
                <mat-option [value]=2>Medium</mat-option>
                <mat-option [value]=3>High</mat-option>
                <mat-option [value]=4>Critical</mat-option>
            </mat-select>
        
     d. Change the Report source dropdown so that null is the default value
            <select matNativeControl name="report.source" [(ngModel)]="report.source">
                <option [value]=null>-Select Source-</option>
                <option [value]=100>Israel</option>
                <option [value]=101>United Kingdom</option>
                <option [value]=102>USA</option>
            </select>     
            
            
5. Activate the debugger to see if form field validation shows when a field is touched and left empty
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Type-in a name in the report-name and then clear it out (so it's touched and empty)
       -- You should see the "Name is required"  
    
    Problem:  If you press "Reset" and "Save", the user does not see the error messages
              (because the form fields were not touched)
  

 6. Change the save() button method so that pressing "Reset" and "Save" causes the errors to appear on the page
    Trick:  Cause the save() button to mark all form fields as *touched

    a. Edit the add-report.component.ts
    b. Change the save() method so that it has this line init:
        // Make all form fields as touched -- so that error validation displays
        aForm.form.markAllAsTouched();
   
    When completed, the save() method should look like this:
        public save(aForm: NgForm): void {
            // Mark all form fields as touched -- so that error validation displays
            aForm.form.markAllAsTouched();

            if (aForm.valid) {
                // Invoke a service to save the record
                console.log("Save record.");

                // Reset the form
                aForm.reset();
            }
        }
        
            
 7. Activate the debugger to see if pressing "Reset" and "Save" shows the errors
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Press "Reset" and then "Save"
       -- You should see the errors
       
    
 8. Disable the "Save" button as long as there are warnings
    -- We let users press the "Save" button the *first* time
    -- But, it's stays disabled until all validation errors are cleared
   
    a. Add a boolean flag to the add-report.component.ts
         public formSubmitted: boolean = false;

    b. Change the save() method to reset the formSubmitted flag (when a user presses "Save"
         public save(aForm: NgForm): void {
            this.formSubmitted = true;

            // Make all form fields as touched -- so that error validation displays
            aForm.form.markAllAsTouched();

            if (aForm.valid) {
              // Invoke a service to save the record
              console.log("Save record.");

              // Reset the form
              aForm.reset();
              this.formSubmitted = false;
            }
         }
  
  
    c. Adjust the "Save" button so it's disabled if the user has submitted the form once and there are warnings
          [disabled]="formSubmitted && form.invalid"
          
      So, the "Save" button looks like this:
         <button type="button" (click)="save(form)" mat-raised-button color="primary" [disabled]="formSubmitted && form.invalid">
         
  
    d. Change the reset() method to reset the flag
          public reset(aForm:  NgForm): void {
            // Reset the form back to pristine/untouched condition
            this.formSubmitted = false;
            aForm.resetForm();
          }   


 9. Activate the debugger to see if the "Save" button is disabled
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Press Save
       -- You should see the warnings
       -- Now, the "Save" button is disabled (until all form errors are resolved)
    d. Fill-in a report name
    e. Select a priority
       -- Now, the "Save" button is enabled
   
   
   
10. Set some mat-form-field tags with the apparance=" " field
    a. Edit add-report.component.html
	   Set one mat-form-field tag so it has appearance="fill"  [fills-in the background with a grey color]
       Set one mat-form-field tag so it has appearance="standard"      [hover causes an underline to appear]
	   Set one mat-form-field tag so it has appearance="legacy"        [there is no hover effect]
	   Set one mat-form-field tag so it has appearance="outline"       [hover causes an outline to appear]
	
	b. Startup the debugger
	c. Place the mouse over the mat-form-fields and notice the effects
	
	
	
11. Set a default appearance for *ALL* mat-form-field tags in your webapp
    a. Edit add-report.component.html
	   Remove all of the apperance=" " tags from the page
	
	b. Edit app.module.ts
	   Add this to the providers section:
	   
	   providers: [ 
		   { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'outline' } } 
	   ],
	   
	c. Startup the debugger
	d. All of your mat-form-fields should now be using the outline appearance
	

