Change the SearchController so that it runs a real search against ElasticSearch
-------------------------------------------------------------------------------
The back-end REST call in SearchController.runSearch() returns hard-coded data
Now, we want it to query against our ElasticSearch and return real results


Assumptions:
 A) You have Kibana running locally on localhost:5601
 B) You have the ElasticSearchResults, ElasticSearchResultsConfig classes configured
 C) You have elastic search settings in your application.yaml
 

Procedure
---------
 1. Create an ElasticSearch Index called "reports" and populate it with data
    a. Open your browser and connect to your kibana by going to http://localhost:5601
    b. Click on DevTools
    c. In the console, run these commands:
        GET _search
        {
          "query": {
            "match_all": {}
          }
        }


        # Delete the reports mapping and all data
        DELETE reports

        # Create a new reports mapping
        PUT reports
        {
                  "settings": {
                    "analysis": {
                      "analyzer" : {
                        "my_ngram_analyzer" : {
                          "tokenizer" : "my_ngram_tokenizer",
                          "filter": ["lowercase"]
                        }
                      },
                      "tokenizer" : {
                        "my_ngram_tokenizer" : {
                          "type" : "ngram",
                          "min_gram" : "1",
                          "max_gram" : "25",
                          "token_chars": [ ]
                        }
                      },
                      "normalizer": {
                        "case_insensitive_normalizer": {
                          "type": "custom",
                          "char_filter": [],
                          "filter": [ "lowercase", "asciifolding" ]
                        }
                      }
                    },
                    "max_result_window": 500000,
                    "refresh_interval": "2s"
                  },

              "mappings": {

                    "record": {
                      "dynamic": "strict",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },

                        "name": {
                          "type": "text",
                          "fields": {
                            "raw": {
                              "type": "keyword"
                            }
                          }
                        },

                        "priority": {
                          "type": "text",
                          "fields": {
                            "raw": {
                              "type": "keyword"
                            }
                          }
                        },


                        "start_year": {
                          "type": "integer"
                        },


                        "start_date": {
                          "type": "date",
                          "ignore_malformed": false,
                          "format": "epoch_millis||epoch_second||yyyy/MM/dd HH:mm:ss.SSS||yyyy-MM-dd HH:mm:ss.SSS||yyyy/MM/dd HH:mm:ss||yyyy-MM-dd HH:mm:ss.SSSZ||yyyy-MM-dd'T'HH:mm:ss||yyyy-MM-dd'T'HH:mm:ssZ||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd HH:mm:ssZ||yyyy/MM/dd||MM/dd/yyyy||S"
                        }

                      }
                    }
                  }
                }


        # Populate the index by setting these records
        POST _bulk
            { "index": { "_index": "reports", "_type": "record", "_id": 1 }}
            { "id": 1,  "priority": "low", "name": "Report 1", "start_year": 2010, "start_date": "01/05/2010" }
            { "index": { "_index": "reports", "_type": "record", "_id": 2 }}
            { "id": 2,  "priority": "low", "name": "Report 2", "start_year": 2011, "start_date": "02/01/2011" }
            { "index": { "_index": "reports", "_type": "record", "_id": 3 }}
            { "id": 3,  "priority": "high", "name": "Report 3", "start_year": 2011, "start_date": "02/02/2011" }



NOTE:  If using ES 6 or higher, then use this:

		PUT reports
		{
			"settings": {
			  "analysis": {
				"analyzer" : {
				  "my_ngram_analyzer" : {
					"tokenizer" : "my_ngram_tokenizer",
					"filter": ["lowercase"]
				  }
				},
				"tokenizer" : {
				  "my_ngram_tokenizer" : {
					"type" : "ngram",
					"min_gram" : "1",
					"max_gram" : "25",
					"token_chars": [ ]
				  }
				},
				"normalizer": {
				  "case_insensitive_normalizer": {
					"type": "custom",
					"char_filter": [],
					"filter": [ "lowercase", "asciifolding" ]
				  }
				}
			  },
			  "max_ngram_diff" : 25,
			  "max_result_window": 500000,
			  "refresh_interval": "2s"
			},

		"mappings": {

				"dynamic": "strict",
				"properties": {
				  "id": {
					"type": "integer"
				  },

				  "name": {
					"type": "text",
					"fields": {
					  "raw": {
						"type": "keyword"
					  }
					}
				  },

				  "priority": {
					"type": "text",
					"fields": {
					  "raw": {
						"type": "keyword"
					  }
					}
				  },

				  "start_year": {
					"type": "integer"
				  },

				  "start_date": {
					"type": "date",
					"ignore_malformed": false,
					"format": "epoch_millis||epoch_second||yyyy/MM/dd HH:mm:ss.SSS||yyyy-MM-dd HH:mm:ss.SSS||yyyy/MM/dd HH:mm:ss||yyyy-MM-dd HH:mm:ss.SSSZ||yyyy-MM-dd'T'HH:mm:ss||yyyy-MM-dd'T'HH:mm:ssZ||yyyy-MM-dd HH:mm:ss||yyyy-MM-dd HH:mm:ssZ||yyyy/MM/dd||MM/dd/yyyy||S"
				  }

				}
			  }

		  }
  

	# Populate the index by setting these records
	POST _bulk
		{ "index": { "_index": "reports",  "_id": 1 }}
		{ "id": 1,  "priority": "low", "name": "Report 1", "start_year": 2010, "start_date": "01/05/2010" }
		{ "index": { "_index": "reports",  "_id": 2 }}
		{ "id": 2,  "priority": "low", "name": "Report 2", "start_year": 2011, "start_date": "02/01/2011" }
		{ "index": { "_index": "reports",  "_id": 3 }}
		{ "id": 3,  "priority": "high", "name": "Report 3", "start_year": 2011, "start_date": "02/02/2011" }


         
 
 2. Create this method:  ElasticSearchService.runSearchGetMatches()
    a. Edit ElasticSearchService.java
    b. Add this empty method:
        public List<SearchResultDTO> runSearchGetMatches(SearchQueryDTO aSearchQueryDTO) {
            // Return an empty list
            List<SearchResultDTO> searchResults = new ArrayList<>();
            return searchResults;
        }
 
 
 3. Change your SearchController so that it injects your ElasticSearchService
    a. Edit SearchController.java
    b. Inject your ElasticSearchService using this:
          @Resource
          private ElasticSearchService elasticSearchService; 
          
          
 4. Change your SearchController so that it calls your ElasticSearchService runSearchGetmatches() method
    a. Edit SearchController.java
    b. Replace the runSearch() method with this:
        /**
         * REST endpoint /api/search
         * @return
         * @throws Exception
         */
        @RequestMapping(value = "/api/search", method = RequestMethod.POST, produces = "application/json")
        public ResponseEntity<?> runSearch(@RequestBody SearchQueryDTO aSearchQueryDTO) throws Exception {

            logger.debug("runSearch() started.");

            if (StringUtils.isBlank( aSearchQueryDTO.getIndexName() )) {
                // The index name was not specified
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .contentType(MediaType.TEXT_PLAIN)
                        .body("The index_name field is required.");
            }
            else if (aSearchQueryDTO.getSize() <= 0) {
                // The size must be greater than 1
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .contentType(MediaType.TEXT_PLAIN)
                        .body("The size field must be greater than 1.");
            }

            // Run a search
            List<SearchResultDTO> searchResults = elasticSearchService.runSearchGetMatches(aSearchQueryDTO);

            // Return a response with the hard-coded results
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(searchResults);
        }



 5. Verify it works and returns an empty result
 
 
 6. Edit the ElasticSearchService.runSearchGetMatches() to run a real search and pull results
    a. Edit ElasticSearchService.java
	
	b. Add the ObjectMapper to the top of the class
			 import com.fasterxml.jackson.databind.ObjectMapper;
				
	         
			 private ObjectMapper objectMapper;


    c. Change the @PostConstruct init() method so that it initializes the objectMapper
			@PostConstruct
			public void init() {
				logger.debug("init() started.");

				// In order to make outgoing calls to ElasticSearch you need 2 things:
				//   1) The elastic search url -- e.g., "http://localhost:9201"
				//   2) The initialiaed AsyncHttpClient object
				this.elasticSearchUrl = elasticSearchResources.getElasticSearchUrl();
				this.asyncHttpClient = elasticSearchResources.getAsyncHttpClient();

				// Initialize the objectMapper  (this is an expensive call)
				this.objectMapper = new ObjectMapper();

				logger.debug("init() finished.  elasticSearchUrl={}", this.elasticSearchUrl);
			}
	

	d. Remove the old runSearchGetMatches() method
	
	e. Add these methods:

			private String generateSearchJson(SearchQueryDTO aSearchQueryDTO) {
				String cleanedQuery = cleanupRawQuery( aSearchQueryDTO.getRawQuery() );

				// Convert the cleaned query to lowercaes (which is required as all ngrams are lowercase)
				cleanedQuery = cleanedQuery.toLowerCase();

				String jsonRequest =
						"{" +
								"  \"query\": {\n" +
								"    \"query_string\": {\n" +
								"      \"query\": \"" + cleanedQuery + "\"\n" +
								"    }" +
								"  }," +
								"  \"size\": " + aSearchQueryDTO.getSize()  +
								"}";

				return jsonRequest;
			}


			/**
			 * @param aRawQuery holds the raw query
			 * @return a cleaned-up string
			 */
			private String cleanupRawQuery(String aRawQuery) {
				String cleanedQuery = aRawQuery;

				if (cleanedQuery == null) {
					cleanedQuery = "";
				}

				return cleanedQuery;
			}


			/**
			 * Run an ElasticSearch and return a list of SearchResultDTO objects
			 *
			 *  1. Construct the JSON query
			 *  2. Invoke the REST call to ElasticSearch
			 *  3. If the response is invalid, then throw a RuntimeException
			 *  4. Else loop through the results
			 *       Add matches to the list of matches
			 * @param aSearchQueryDTO holds the DTO with the search criteria
			 * @return a list of SearchResultDTO objects
			 */
			public List<SearchResultDTO> runSearchGetMatches(SearchQueryDTO aSearchQueryDTO) throws Exception {

				// Construct the search query (as a json string)
				String jsonSearchQuery = generateSearchJson(aSearchQueryDTO);

				// Make a synchronous POST call to execute a search
				Response response = this.asyncHttpClient.prepareGet(this.elasticSearchUrl + "/" + aSearchQueryDTO.getIndexName() + "/_search")
						.setRequestTimeout(this.ES_REQUEST_TIMEOUT_IN_MILLISECS)
						.setHeader("accept", "application/json")
						.setHeader("Content-Type", "application/json")
						.setBody(jsonSearchQuery)
						.execute()
						.get();


				if (response.getStatusCode() != 200) {
					throw new RuntimeException("Critical error in runSearchGetMatches():  ElasticSearch returned a response status code of " +
							response.getStatusCode() + ".  Response message is " + response.getResponseBody() + "\n\n" + response.getResponseBody());
				}

				List<SearchResultDTO> searchResults = new ArrayList<>();


				// Convert the response JSON string into a map and examine it to see if the request really worked
				Map<String, Object> mapResponse = objectMapper.readValue(response.getResponseBody(), new TypeReference<Map<String, Object>>() {});

				Map<String, Object> outerHits = (Map<String, Object>) mapResponse.get("hits");
				if (outerHits == null) {
					throw new RuntimeException("Error in runSearchGetMatches():  The outer hits value was not found in the JSON response");
				}

				List<Map<String, Object>> innerHits = (List<Map<String, Object>>) outerHits.get("hits");
				if (innerHits == null) {
					throw new RuntimeException("Error in runSearchGetMatches():  The inner hits value was not found in the JSON response");
				}

				if (innerHits.size() > 0) {
					for (Map<String, Object> hit: innerHits) {
						Map<String, Object> sourceMap = (Map<String, Object>) hit.get("_source");
						if (sourceMap == null) {
							throw new RuntimeException("Error in runSearchGetMatches():  The source map was null in the JSON response");
						}

						// Create one SearchResultDTO object
						SearchResultDTO searchResult = new SearchResultDTO();

						Integer id = (Integer) sourceMap.get("id");
						searchResult.setId(id);

						String name = (String) sourceMap.get("name");
						searchResult.setName(name);

						String priority = (String) sourceMap.get("priority");
						searchResult.setPriority(priority);

						Integer startYear = (Integer) sourceMap.get("start_year");
						searchResult.setStartYear(startYear);

						String startDate = (String) sourceMap.get("start_date");
						searchResult.setStartDate(startDate);

						// Add this one SearchResultDTO object to the list
						searchResults.add(searchResult);
					}
				}

				// Return a list of SearchResultDTO objects
				return searchResults;
			}


 7. Verify it works
    a. Activate the debugger
	b. Run a search for "reports" -- you should find 3 matches
	
	
