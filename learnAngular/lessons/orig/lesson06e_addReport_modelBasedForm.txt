Lesson:  Change form validation from template-driven to model-based
-------------------------------------------------------------------
The previous form validation lessons relies on HTML elements and attributes 
to define the fields that make up the form.  

Pros & Cons of template-driven form validation
+ It's familiar
+ It's simple
- For large forms, it becomes complex
- For large forms, it becomes hard to maintain

Pros & Cons of model-based form validation
+ Easier to maintain for complex forms
- It requires more typescript code


Procedure
---------
 1. Add the CustomFormControl typescript class
    a. Right-click on frontend/src/app -> New Directory
	   Directory name:  validators
	
	b. Right-click on frontend/src/app/validators -> New File:
       Filename:  custom.form.control.ts
       
    b. Copy this to the newly-created file:
		import {FormControl, FormGroup} from "@angular/forms";

		export class CustomFormControl extends FormControl {
		  label: string;
		  modelProperty: string;

		  public constructor(aLabel: string, aModelProperty: string, aValue: any, aValidator: any) {
			super(aValue, aValidator);

			this.label = aLabel;
			this.modelProperty = aModelProperty
		  }


		  public getValidationMessages() {
			let messages: string[] = [];

			if (this.errors) {
			  for (let errorName in this.errors) {
				  switch(errorName) {
					case "required":
						messages.push(`The ${this.label} is required`);
						break;

					case "minlength":
						messages.push(`The ${this.label} must be at least ${this.errors['minlength'].requiredLength} characters`);
						break;

					case "maxlength":
						messages.push(`The ${this.label} must not exceed ${this.errors['maxlength'].requiredLength} characters`);
						break;

					case "pattern":
						messages.push(`The ${this.label} contains illegal characters`);
						break;

				  } // end switch
			  }
			}

			return messages;
		  }


		}





 2. Add the AddReportFormGroup typescript class
    NOTE:  The FormGroup is really a map that holds key=name value=CustomFormControl
	
    a. Right-click on frontend/src/app/reports/add-report -> New File:
       Filename:  add-report.form.group.ts
  
    b. Copy this to the newly-created file:
		import {FormGroup, Validators} from "@angular/forms";
		import {CustomFormControl} from "../../validators/custom.form.control";

		export class AddReportFormGroup extends FormGroup {

		  public constructor() {
			super({
				name: new CustomFormControl("Report Name", "name", null,
					  Validators.compose([
						  Validators.required,
						  Validators.minLength(3),
						  Validators.maxLength(25)
					  ])),

				priority: new CustomFormControl( "Priority", "priority", null,
						  Validators.required),

				source:     new CustomFormControl( "Source", "source", null, null),
				authors:    new CustomFormControl( "Authors", "authors", null, null),

				start_date: new CustomFormControl( "Start Date", "start_date", null, null),
				end_date:   new CustomFormControl( "End Date", "end_date", null, null),
			} )
		  }


		  public get formControls(): CustomFormControl[] {
			return Object.keys(this.controls)
			  .map(key => this.controls[key] as CustomFormControl)
		  }


		  public getAllValidationMessages() : string[] {
			let messages: string[] = [];

			this.formControls.forEach(c => c.getValidationMessages()
			  .forEach(m => messages.push(m))
			);

			return messages;
		  }

		}

 
 
 3. Adjust the add-report.component.ts
    a. Remove these two methods:   getValidationMessages() and getAllValidationMessages() 
	
	b. Remove the public Report declaration
	
	c. Add a public AddReportFormGroup object:
	    public form: AddReportFormGroup = new AddReportFormGroup();
 
    d. Add a @ViewChild so we have a reference to the report name textbox
 	    @ViewChild('name',  { read: ElementRef }) reportNameTextbox: ElementRef;

    e. Change the ngAfterViewInit by adding this comment:
		ngAfterViewInit(): void {

			// Set the focus to the report name textbox
			// WARNING:  By setting the focus on this textbox and making it a required field,
			//           this box will turn red as soon as the user clicks on any other control
			setTimeout(() => this.reportNameTextbox.nativeElement.focus(), 0);
		}
  
    f. Change the reset() method so that it uses the local form object
		  public reset(): void {
			this.formSubmitted = false;

			// Reset the form back to pristine/untouched condition
			this.form.reset();
		  }	
    
	g. Change the save() method to pull the values out of the form object
		  public save(): void {
			this.formSubmitted = true;

			// Make all form fields as touched -- so that error validation displays
			this.form.markAllAsTouched();

			if (this.form.valid) {

			  let report: Report = new Report();
			  report.priority = this.form.controls.priority.value;
			  report.name = this.form.controls.name.value;
			  report.authors = this.form.controls.authors.value;
			  report.start_date = this.form.controls.start_date.value;
			  report.end_date = this.form.controls.end_date.value;

			  // Invoke a service to save the record
			  console.log("Save record.");

			  // Reset the form
			  this.form.reset();
			  this.formSubmitted = false;
			}
		  }

	    
 4. Adjust the add-report.component.html
    a. Change the opening form tag so that it references the formGroup
	     <form novalidate [formGroup]="form" class="add_report_form">
		 
	b. Remove all template reference variables (except for the #name)
	   NOTE:  We need #name to set the focus on it
	   
	c. Remove all required tags   (this is now done in code)
	
	d. Remove the ngModel references  (this is now controlled by the formGroup
    
	e. Insert formControlName="..."
	
    
	When done, the report textbox looks like this:
	    <input matInput type="text" formControlName="name" #name />

	When done, the source dropdown looks like this:
	    <select matNativeControl name="report.source" formControlName="source" >
	
 	When done, the priority mat-select dropdown looks like this:
	    <mat-select formControlName="priority">
    
	When done, the authors multiple mat-select dropdown looks like this:
	    <mat-select multiple formControlName="authors">

	When done, the start date looks like this:
		<input  matInput name="start.date" formControlName="start_date" [matDatepicker]="startDatePicker" >
	
	When done, the end date looks like thiS:
		<input  matInput name="end.date" formControlName="end_date" [matDatepicker]="endDatePicker" >
    

 5. Activate the debugger 
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Click on "Save"
       -- You should see required fields in Red
       -- You should see a summary of all error messages at the top
       
 
