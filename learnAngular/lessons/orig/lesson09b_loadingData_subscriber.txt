Lesson:  Invoke a REST call using subscribe()
---------------------------------------------
Problem:  The page view needs to use a service to invoke a REST call to get information to display.
          This service will return an Observable
          
Solution: Subscribe to the Observable within ngOnInit()
          Store the information in a component instance variable
          Unsubscribe within ngOnDestroy()
          

Procedure
---------
 1. Adjust the add-report.component.ts so that 
    + The ngOnInit() will subscribe to the lookupService.getLookupWithType()
    + The ngOnDestroy() will unsubscribe
    
    a. Make sure the AddReportComponent implements OnInit and OnDestroy
        class AddReportComponent implements OnInit, AfterViewInit, OnDestroy {

    b. Make sure the LooupService is injected 
        constructor(private lookupService: LookupService)
        { }
    
    c. Add a private array of subscriptions
        private subscriptions: Subscription[] = [];

    d. Add a public prioritiesAreLoading flag
	    public prioritiesAreLoading: boolean;
		
    e. Add an ngOnDestroy() method that will unsubscribe from subscriptions
        ngOnDestroy(): void {
            // Unsubscribe all subscriptions (so we don't have any memory leaks)
            this.subscriptions.forEach(subscription => subscription.unsubscribe());
        }
  
    f. Change the ngOnInit() so that it subscribes to the lookupService.getLookupWithType()
		  ngOnInit(): void {
		  	// Set the loading flag to true (so we see the spinner)
			this.prioritiesAreLoading = true;

			// Get the lookup values from the LookupService
			this.subscriptions.push(
				this.lookupService.getLookupWithType("priority").subscribe(data => {
					// The REST call came back with some results
					this.priorities = data;
				}).add(() => {
					// Teardown
					
					// Unset the flag so that the dropdown appears
					this.prioritiesAreLoading = false;
				})
			);
		  }

  
 2. Change the template so that it uses the prioritiesAreLoading flag (to show a spinner)
    a. Edit the add-report.component.html
	b. Change the priorites dropdown section to this:

		  <ng-container *ngIf="!prioritiesAreLoading">
			  <!-- Priorities are fully loaded -->
			  <mat-form-field style="margin-top: 20px">
				<mat-label>Choose Priority</mat-label>

				  <!-- Priorities Drop Down -->
				  <mat-select formControlName="priority">
					<mat-option [value]=null>-Select Priority-</mat-option>
					<mat-option *ngFor="let priority of priorities"  value="{{priority.id}}">{{priority.name}}</mat-option>
				  </mat-select>

			  </mat-form-field>
		  </ng-container>

		  <ng-container *ngIf="prioritiesAreLoading">
			<!-- Priorities are loading message -->
			<div style="margin-top: 20px"><i class="fa fa-spin fa-spinner"></i> Loading Priorities...</div>
		  </ng-container>


 3. Add a 5-second delay to the lookup REST call
    a. Edit the backend/src/main/java/com/lessons/controllers/LookupController.java
	b. Add this call before the list is returned
			try {
				// Sleep for 5 seconds
				Thread.sleep(5000);
			}
			catch(Exception e) {
				// Do nothing
			}
 
 
 4. Verify that the REST call works when using the debugger
    a. Set a breakpoint in ngOnInit()
    b. Set a breakpoint in ngOnDestroy()
    c. Pull Run -> Debug 'Full WebApp'
    d. Click on "Add Report"
       -- You should see the spinner for 5 seconds
	   -- After 5 seconds, you should see the priorities loaded into the dropdown
       
 
 5. Add another method to the Angular lookup.service.ts to get the lookups by type *and* sort
    a. Edit lookup.service.ts
    b. Add this method:  getLookupWithTypeAndOrder()
          /*
           * Return a sorted list of LookupDTO objects that correspond to the passed-in type name -- e.g, 'priority'
           */
          public getLookupWithTypeAndOrder(aType: string, aOrderBy: string): Observable<LookupDTO[]>  {

            const restUrl = environment.baseUrl + '/api/lookups/' + aType + '/' + aOrderBy;

            return this.httpClient.get <LookupDTO[]>(restUrl);
          }
  
  
 6. Change the add-report.component.ts to call this new method:
    a. Edit add-report.component.ts
    b. Change the ngOnInit() to this:
		  ngOnInit(): void {
			this.prioritiesAreLoading = true;

			// Get the lookup values from the LookupService
			this.subscriptions.push(
				this.lookupService.getLookupWithTypeAndOrder("priority", "display_order").subscribe(data => {
					// The REST call came back with some results
					this.priorities = data;
				}).add(() => {
					// Teardown
					this.prioritiesAreLoading = false;
				})
			);
		  }
  
  
 7. Verify that the REST call works when using the debugger
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Look at the priorities dropdown
	   -- You should see a spinner for 5 seconds
       -- Then, you should see the dropdown entries listed by their display_order column
       
 

