Create a REST call that will Run a Search
-----------------------------------------
In this lesson, we will create a REST call that returns hard-coded data from the back-end to the front-end



Procedure
---------
 1. Change the search-results.component.ts so that it invokes a real REST call
    a. Edit search-results.component.ts
    
    b. Change this:
          this.elasticSearchService.runSearchHardCoded(searchQueryDTO).subscribe(rowData => {
          
       To this:
          this.elasticSearchService.runSearch(searchQueryDTO).subscribe(rowData => {
          
		  
2. Create this java class:  SearchQueryDTO
   a. Edit backend/src/main/java/com/lessons/models -> New -> Java Class
      Class Name:  SearchQueryDTO
   
   b. Copy this to the new class:
        package com.lessons.models;

        import com.fasterxml.jackson.annotation.JsonProperty;

        public class SearchQueryDTO {
            @JsonProperty("index_name")
            private String indexName;

            @JsonProperty("raw_query")
            private String rawQuery;

            @JsonProperty("size")
            private int size;


            // ---- Getters & Setters ----
            public String getIndexName() {
                return indexName;
            }

            public void setIndexName(String indexName) {
                this.indexName = indexName;
            }

            public String getRawQuery() {
                return rawQuery;
            }

            public void setRawQuery(String rawQuery) {
                this.rawQuery = rawQuery;
            }

            public int getSize() {
                return size;
            }

            public void setSize(int size) {
                this.size = size;
            }
        }


3. Create this java class:  SearchResultDTO
   a. Edit backend/src/main/java/com/lessons/models -> New -> Java Class
      Class Name:  SearchResultDTO
        package com.lessons.models;

        import com.fasterxml.jackson.annotation.JsonProperty;

        public class SearchResultDTO {

            @JsonProperty("id")
            private Integer id;

            @JsonProperty("name")
            private String name;

            @JsonProperty("country")
            private String country;

            @JsonProperty("priority")
            private String priority;

            @JsonProperty("start_year")
            private Integer startYear;

            @JsonProperty("start_date")
            private String startDate;


            // ---- Getters & Setters ----
            public Integer getId() {
                return id;
            }

            public void setId(Integer id) {
                this.id = id;
            }

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }

            public String getCountry() {
                return country;
            }

            public void setCountry(String country) {
                this.country = country;
            }

            public String getPriority() {
                return priority;
            }

            public void setPriority(String priority) {
                this.priority = priority;
            }

            public Integer getStartYear() {
                return startYear;
            }

            public void setStartYear(Integer startYear) {
                this.startYear = startYear;
            }

            public String getStartDate() {
                return startDate;
            }

            public void setStartDate(String startDate) {
                this.startDate = startDate;
            }
        }
   

4. Create the REST endpoint for /api/search
   a. Edit SearchController.java
   b. Add this method:

        /**
         * REST endpoint /api/search
         * @return
         * @throws Exception
         */
        @RequestMapping(value = "/api/search", method = RequestMethod.POST, produces = "application/json")
        public ResponseEntity<?> runSearch(@RequestBody SearchQueryDTO aSearchQueryDTO) throws Exception {

            logger.debug("runSearch() started.");

            List<SearchResultDTO> searchResults = new ArrayList<>();

            SearchResultDTO result1 = new SearchResultDTO();
            result1.setId(1);
            result1.setCountry("USA");
            result1.setPriority("Low");
            result1.setStartDate("01/02/2010");
            result1.setStartYear(2010);

            SearchResultDTO result2 = new SearchResultDTO();
            result2.setId(2);
            result2.setCountry("USA");
            result2.setPriority("Medium");
            result2.setStartDate("02/04/2010");
            result2.setStartYear(2011);


            searchResults.add(result1);
            searchResults.add(result2);

            // Return a response with the hard-coded results
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(searchResults);
        }


 5. Verify that the front-end gets results from the back-end
    a. Set a breakpoint in your SearchController.runSearch() method
    b. Activate the debugger
    c. Enter some search text (in the searchbox) and press enter
       -- You should hit your breakpoint
       -- The ag-grid should show "loading..." while you're stuck at your breakpoint
    
    d. Press F9 to conintue
       -- The ag-grid should see the results
       
       
