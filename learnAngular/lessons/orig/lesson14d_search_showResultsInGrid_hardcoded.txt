Show the Search Results in a Grid
---------------------------------
We have search results.  Now, we want to display it in a grid.


Procedure
---------
 1. Change the search-results.component.ts so that it initializes a grid and gets data from an observable
    a. Edit search-results.component.ts
	b. Replace its contents with this:
		import { Component, OnInit } from '@angular/core';
		import {ActivatedRoute} from "@angular/router";
		import {ElasticsearchService} from "../../services/elasticsearch.service";
		import {SearchQueryDTO} from "../../models/search-query-dto";
		import {GridOptions} from "ag-grid-community";

		@Component({
		  selector: 'app-search-results',
		  templateUrl: './search-results.component.html',
		  styleUrls: ['./search-results.component.css']
		})
		export class SearchResultsComponent implements OnInit {

		  public query: string;


		  public gridOptions: GridOptions = {
			pagination: true,
			paginationPageSize: 20,
			rowGroupPanelShow: 'always'    // Possible options are 'never', 'always', and 'onlyWhenGrouping'
		  };

		  public defaultColDefs: any = {
			flex: 1,
			sortable: true,
			filter: true,
			floatingFilter: true    // Causes the filter row to appear below column names
		  };


		  // enableRowGroup: true --> makes it possible to group by row
		  // rowGroup: true       --> perform row grouping on load

		  public columnDefs = [
			{field: 'id' ,        headerName: 'Id',           filter: 'agNumberColumnFilter'},
			{field: 'name',       headerName: 'Report Name'},
			{field: 'country',    headerName: 'Country',    rowGroup: false, enableRowGroup: true},
			{field: 'priority',   headerName: 'Priority',   rowGroup: false, enableRowGroup: true},
			{field: 'start_year', headerName: 'Start Year',  filter: 'agNumberColumnFilter',   rowGroup: false, enableRowGroup: true},
			{field: 'start_date', headerName: 'Start Date',   filter: 'agDateColumnFilter'},
			{field: 'end_date',   headerName: 'End Date',     sortable: true}
		  ];


		  constructor(private route: ActivatedRoute,
					  private elasticSearchService: ElasticsearchService) { }



		  ngOnInit(): void {
			this.route.queryParams.subscribe(params => {
			  // Get the passed-in query=
			  this.query = params["query"];

			  // Build a searchQueryDTO object
			  let searchQueryDTO = new SearchQueryDTO();
			  searchQueryDTO.index_name = "reports";
			  searchQueryDTO.raw_query = this.query;
			  searchQueryDTO.size = 20;

			  this.gridOptions.onGridReady = () => {
				// The grid is ready

				this.elasticSearchService.runSearchHardCoded(searchQueryDTO).subscribe(rowData => {
				  // The REST call came back.  Now, load the matches into the grid

				  if (this.gridOptions.api) {
					this.gridOptions.api.setRowData(rowData)
				  }
				});
			  };

			});

		  }  // end of ngOnInit()

		}

 
 
 2. Change the search-results.component.html to show the grid
    a. Edit search-results.component.html
	b. Replace its contents with this:
		<div style="height: 60px">
		  <mat-card style="box-shadow: none">

			<!-- Page Title -->
			<mat-card-title>Search Results for {{this.query}}</mat-card-title>

			<!-- Page Buttons -->
			<mat-card-content>
			</mat-card-content>
		  </mat-card>
		</div>


		<!-- Set the grid to use the entire height (except for 60px for header and 60px for the content above -->
		<div style="height: calc(100vh - 120px);">

		  <!-- Angular Grid:  NOTE: Angular flex layout does not work with ag-grid-angular -->
		  <ag-grid-angular
			style="width: 100%; height: 100%;"
			class="ag-theme-alpine-dark"
			[gridOptions]="this.gridOptions"
			[defaultColDef]="this.defaultColDefs"
			[columnDefs]="this.columnDefs">
		  </ag-grid-angular>

		</div>


 3. Verify it works
    a. Activate the debugger
	b. Enter some text in the search box and press Enter
	   -- You should see the grid with the hard-coded matches
	   
	   


