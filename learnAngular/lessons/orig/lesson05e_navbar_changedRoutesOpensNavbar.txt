Lesson:  How to ensure that a bookmarked page opens the navbar with the correct navgroups opened/closed
-------------------------------------------------------------------------------------------------------
Problem:  If a user opens a route from a bookmark, then the navgroups are not opened
          Going to http://localhost:4200/page/addReport 
	        -- should open the Reports navgroup 
	        -- should close all of the other navgroups
            -- should show the "Add Report" item as active
            
Approach:
 A) Inject the Router into the navbar.component.ts
 B) Listen (or subscribe) to router events
 C) If a NavigationEnd event is detected then
    -- Look at the event url
	-- If the event url is for a report page, 
	      then open the Reports navbar group and close the others
		  
	-- If the event url is for an analytics page, 
	      then open the Analytics navbar group and close the others


Procedure       
---------
 1. Modify the navbar.component.ts
 
 2. Add a private variable with the routeSubscription:
		private routeSubscription: Subscription;
	   
 3. In the ngOnDestroy() method, make sure you unsubscribe
		public ngOnDestroy(): void {
			this.routeSubscription.unsubscribe();
		} 
		
 4. In the constructor(), inject the Router and listen for events
	   constructor(private router: Router) {
			this.routeSubscription =  router.events.pipe(
			  	filter(event => event instanceof NavigationEnd)
			).subscribe((event: NavigationEnd) => {
				  // The user has navigated to a different page (or opened a new browser to that page)

				  if ((event.url == '/page/addReport') || (event.url == '/page/viewReports') ) {
					// User is going to one of the Report navbar pages
					this.analyticsGroupClosed = true;
					this.reportsNavGroupClosed = false;
				  }
				  else if ((event.url == '/page/chart1') || (event.url == '/page/chart2') ) {
					// User is going to one of the Analytics navbar pages
					this.analyticsGroupClosed = false;
					this.reportsNavGroupClosed = true;
				  }
				  else if ((event.url == '/') || (event.url == '')) {
					// Showing default page (which is view reports)
					this.analyticsGroupClosed = true;
					this.reportsNavGroupClosed = false;
				  }
			});
	  }
 
   
   When completed, navbar.component.ts looks like this:

		import {Component, OnDestroy, OnInit} from '@angular/core';
		import {Subscription} from "rxjs";
		import {NavigationEnd, Router} from "@angular/router";
		import {filter} from "rxjs/operators";

		@Component({
		  selector: 'app-navbar',
		  templateUrl: './navbar.component.html',
		  styleUrls: ['./navbar.component.css']
		})
		export class NavbarComponent implements OnInit, OnDestroy {
		  public reportsNavGroupClosed: boolean = true;
		  public analyticsGroupClosed: boolean = true;
		  private routeSubscription: Subscription;

		  constructor(private router: Router) {
			this.routeSubscription =  router.events.pipe(
			  filter(event => event instanceof NavigationEnd)
			).subscribe((event: NavigationEnd) => {
			  // The user has navigated to a different page (or opened a new browser to that page)

			  if ((event.url == '/page/addReport') || (event.url == '/page/viewReports') ) {
				// User is going to one of the Report navbar pages
				this.analyticsGroupClosed = true;
				this.reportsNavGroupClosed = false;
			  }
			  else if ((event.url == '/page/chart1') || (event.url == '/page/chart2') ) {
				// User is going to one of the Analytics navbar pages
				this.analyticsGroupClosed = false;
				this.reportsNavGroupClosed = true;
			  }
			  else if ((event.url == '/') || (event.url == '')) {
				// Showing default page (which is view reports)
				this.analyticsGroupClosed = true;
				this.reportsNavGroupClosed = false;
			  }
			});
		  }

		  ngOnInit(): void {
		  }

		  public ngOnDestroy(): void {
			this.routeSubscription.unsubscribe();
		  }

		  public toggleNavGroup(aNavGroupNumber: number) {
			if (aNavGroupNumber == 1) {
			  // User clicked on the Reports navgroup (so hide the other navgroup)
			  this.analyticsGroupClosed = true;

			  // Toggle the Reports navgroup (So, it switches from opened to close)(
			  this.reportsNavGroupClosed = ! this.reportsNavGroupClosed;
			}
			else if (aNavGroupNumber == 2) {
			  // User clicked on the Analytics navgroup (so hide the other navgroups)
			  this.reportsNavGroupClosed = true;

			  // Toggle the Analytics navgroup
			  this.analyticsGroupClosed = ! this.analyticsGroupClosed;
			}
		  }

	}


 5. Run the Debugger on 'Full WebApp'
    -- Open the Reports menu
	-- Click on the icon to open "Add Report" in a new page
	-- The navigation bar show "Add Report" as highlighted (even though it's a new browser tab)
	
