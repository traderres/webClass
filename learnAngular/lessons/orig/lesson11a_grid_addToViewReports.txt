Lesson:  Add a Grid Page using ag-grid community edition
--------------------------------------------------------


References
----------
https://www.ag-grid.com/javascript-grid-npm/
https://www.ag-grid.com/angular-grid/




Procedure
---------
 1. Install the ag-grid
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> npm install --save ag-grid-community ag-grid-angular

    IF USING THE ENTERPRISE GRID, then use this command to install  (yes, you install ag-grid-community *AND* ag-grid-enterprise)
	unix> npm install --save ag-grid-community  ag-grid-enterprise ag-grid-angular
	
	
	NOTE:  Yes, you need to install *ALL* of these NPM modules to make it work
	
	
 2. Verify that your angularApp1/frontend/package.json has these dependencies
     "ag-grid-angular": "25.0.1",
     "ag-grid-community": "25.0.1",
     "ag-grid-enterprise": "25.0.1",
	
	  
 3. Import the AgGridModule module
    a. Edit app.module.ts
	b. Add this to the imports:
	     imports: [ ....     AgGridModule, .... ]


 4. Add the CSS files for the angular-grid alpine theme
    a. Edit the angular.json
	b. Change the "styles": [  ] section so that it has these css files
              "./node_modules/ag-grid-community/dist/styles/ag-grid.css",
              "./node_modules/ag-grid-community/dist/styles/ag-theme-alpine.css",	
       
	   When finished the "styles" section looks like this:
            "styles": [
              "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
              "./node_modules/@fortawesome/fontawesome-free/css/all.css",
              "./node_modules/ag-grid-community/dist/styles/ag-grid.css",
              "./node_modules/ag-grid-community/dist/styles/ag-theme-alpine.css",
              "src/styles.css"
            ],	   
	   
 5. Add a grid to the view-reports page
    a. Edit view-reports.component.html
	b. Replace the contents with this grid
		<ag-grid-angular
			style="width: 500px; height: 150px;"
			class="ag-theme-alpine"
			[rowData]="rowData"
			[defaultColDef]="this.defaultColDefs">
			[columnDefs]="columnDefs"
		</ag-grid-angular>


    NOTE:  If you change the theme, you must two 2 things:
	  A) Change the angular.json to include the correct CSS
	  B) Change the <ag-grid-angular.... class=" "> tag
	  

 6. Create public variables with the rowData and ColumnsDefs
    a. Edit view-reports.components.ts
	b. Add these 3 public variables:
	
		public defaultColDefs: any = {
			flex: 1,
			sortable: true,
			filter: true,
			floatingFilter: true,    // Causes the filter row to appear below column names
		};
	
	   	public columnDefs = [
			{field: 'id' },
			{field: 'name' },
			{field: 'priority'},
			{field: 'start_date'},
			{field: 'end_date'}
		];

		public rowData = [
			{ id: 1, name: 'Report 1', priority: 'low', 'start_date': '05/01/2019', 'end_date': '05/05/2019'},
			{ id: 2, name: 'Report 2', priority: 'medium', 'start_date': '06/01/2019', 'end_date': '06/06/2019'},
			{ id: 3, name: 'Report 3', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'}
		];

 7. Try it out.  You should see a light-colored grid in the view reports page
 
 8. Change the AG-Grid theme to ag-theme-alpine-dark
    a. Edit the angular.json
	b. Change the "styles": [  ] section so that it has these css files
              "./node_modules/ag-grid-community/dist/styles/ag-grid.css",
              "./node_modules/ag-grid-community/dist/styles/ag-theme-alpine-dark.css",	
			  
    c. Edit the view-reports.component.html
	d. Change the CSS class so that class="ag-theme-alpine-dark"
			<ag-grid-angular
				style="width: 500px; height: 150px;"
				class="ag-theme-alpine-dark"
				[rowData]="rowData"
				[defaultColDef]="this.defaultColDefs"
				[columnDefs]="columnDefs">
			</ag-grid-angular>	
			
 9. Try it out.  You should see a dark-colored grid in the view reports page

10. Adjust the grid so it takes the full width of the screen
    a. Edit view-reports.components.html
	b. Replace the contents with this:
	
		<!-- Set the grid to use the entire height (except for 60px consumed by the header) -->
		<div style="height: calc(100vh - 60px)">

			<!-- Angular flex layout does not work with ag-grid-angular -->
			<ag-grid-angular
			  style="width: 100%; height: 100%;"
			  class="ag-theme-alpine-dark"
			  [rowData]="this.rowData"
			  [defaultColDef]="this.defaultColDefs"
			  [columnDefs]="this.columnDefs">
			</ag-grid-angular>

		</div>

11. Try it out.  You should see a dark-colored grid consume the entire page

12. Add a page title, section for buttons, move the grid down
    a. Edit view-reports.components.html
	b. Replace the contents with this:
		<div style="height: 100px">
		  <mat-card style="box-shadow: none">

			<!-- Page Title -->
			<mat-card-title>View All Reports</mat-card-title>

			<!-- Page Buttons -->
			<mat-card-content>
			  Buttons would go here<br/>
			  And here<br/>
			  And here<br/>
			</mat-card-content>
		  </mat-card>
		</div>


		<!-- Set the grid to use the entire height (except for 60px for header and 100px for the content above -->
		<div style="height: calc(100vh - 160px);">

			<!-- Angular Grid:  NOTE: Angular flex layout does not work with ag-grid-angular -->
			<ag-grid-angular
			  style="width: 100%; height: 100%;"
			  class="ag-theme-alpine-dark"
			  [rowData]="this.rowData"
		      [defaultColDef]="this.defaultColDefs"
			  [columnDefs]="this.columnDefs">
			</ag-grid-angular>

		</div>

13. Try it out.  You should see the page title and the grid below it

14. Add more data to make sure that the vertical scrollbar appears on the grid (but not on the webpage itself)
    a. Edit view-reports.components.ts
	b. Set the rowData to this:
		  public rowData = [
			{ id: 1, name: 'Report 1', priority: 'low', 'start_date': '05/01/2019', 'end_date': '05/05/2019'},
			{ id: 2, name: 'Report 2', priority: 'medium', 'start_date': '06/01/2019', 'end_date': '06/06/2019'},
			{ id: 3, name: 'Report 3', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 4, name: 'Report 4', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 5, name: 'Report 5', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 6, name: 'Report 6', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 7, name: 'Report 7', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 8, name: 'Report 8', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id: 9, name: 'Report 9', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'},
			{ id:10, name: 'Report 10', priority: 'high', 'start_date': '07/01/2019', 'end_date': '07/07/2019'}
		  ];
		  
15. Try it out.  You should only see a vertical scrollbar if the grid does not fit in the page
    NOTE:  You should not see two vertical scrollbars (only one on the grid itself)
	

16. Add Header Names to the grid
    a. Edit view-reports.components.ts
    b. Change the columnsDefs so that they have a headerName:
		  public columnDefs = [
			{field: 'id' ,        headerName: 'Id'},
			{field: 'name',       headerName: 'Report Name'},
			{field: 'priority',   headerName: 'Priority'},
			{field: 'start_date', headerName: 'Start Date'},
			{field: 'end_date',   headerName: 'End Date'}
		  ];	

17. Try it out.  Now, all of the headers should match the headerName property

