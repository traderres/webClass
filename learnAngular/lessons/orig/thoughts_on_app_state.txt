Thoughts on Application State
-----------------------------
When building web apps, I try to avoid state at all costs -- it's harder than it looks.


For example:  Suppose, the user needs to fill-out a 5-page form (there's lots of fields)

Approach 1: Keep state in the back-end
--------------------------------------
+ Appropriate if you believe the user will fill-in all of the data in *MULTIPLE VISITS*
  -- e.g., there are so many questions that a user will fill definitely come back
+ Front-end needs to maintain some recordId in sessionStroage
+ If the user refreshes the web page, the data is not lost (as we are storing it in sessionStorage)
- You still need to maintain a little state:  Need to pass-around the unique record id from page to page
- You need to create additional REST endpoints
- You need to invoke additional REST endpoints
- You may have work-in-progress records in the back-end (if the user stops half way through)

 1. User goes to page 1
 2. On page load, the front-end invoke a REST call to get data from the back-end
 3. User fills-in the page
 4. User presses  "Continue"
    a. Invokes a REST call to save this data
    b. Take user to the next page
 5. On the last page, user presses "Finish"
    a. Invoke a REST call to save the data *and* mark the data as complete
    

Approach 2: Keep state in the front-end and save on the last page
-----------------------------------------------------------------
+ Appropriate if you believe the user will fill-in all of the data in *ONE VISIT*
+ You only need one REST call (for the final submit)
+ There are no partial records in the back-end
+ Faster navigation between pages (as we are not invoking REST calls to save data between pages)
- Requires a front-end state
- If the user refreshes the web page, you need to make sure the data is *NOT* lost

 1. User goes to page 1
 2. On page load, the front-end pulls info from a front-end state 
 3. User fills-in the page
 4. User presses "Continue"
    a. Front-end saves data to a front-end state
    b. Take user to the next page
 5. On the last page, user presses "Finish"
    a. Invoke a REST call to save the data




How do maintain state in the front-end
--------------------------------------
 1. Use Angular services w/BehaviorSubject
 2. Use browser's localSorage or sessionStorage?
    sessionStorage stores data while the browser is open (and holds it between page refreshes)
	localStorage stores data even when the browser is closed (by storing data to disk)
	
 3. Use URL Parameters
 4. Use HTML data* attributes
 5. Use ngrx
 



My preference:  Combine 1 and 2
-------------------------------
 1. Create an Angular Service w/BehaviorSubject.
    The BehaviorSubject is like a subject except that you can set an initial value
	
 2. As data is updated, write the data to sessionStorage (so if a user refreshes the page, the app state is still present)
 

References
----------
https://medium.com/ngconf/angular-state-management-with-behaviorsubject-e33df0456ff8
https://stackoverflow.com/questions/51693115/angular-6-behaviorsubject-using-localstorage
https://thabo-ambrose.medium.com/replacing-sessionstorage-instances-with-behaviorsubjects-for-angular-app-state-11a1e7af7114

   
    
