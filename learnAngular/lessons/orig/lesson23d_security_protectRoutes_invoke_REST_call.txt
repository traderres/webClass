Lesson:  Have the front-end invoke the security REST call
---------------------------------------------------------
We have a REST call that returns allowed security routes.  Now, we need the front-end to invoke and use it

Assumption:
 A) You have a REST call 
      GET /api/users/me
	That returns a map of key=ui_control.name  value=true/false   (true if granted / false if not granted)


Procedure
---------
 1. Verify that the front-end UserInfoDTO exists (that holds information returned from the back-end)
    a. Go to frontend/src/app/modesl
	b. Verify that this class exists:  user-info-dto.ts
		export class UserInfoDTO {
		  name: string;
		  pageRoutes: Map<string, boolean>;
		}


 2. Verify that the front-end UserService has this method in it:
    a. Edit user.services.ts
	b. Verify that this method exists 

		  /*
		   * Return an observable that holds an object with information about the user -- e.g., user's name, user's role
		   */
		  public getUserInfo(): Observable<UserInfoDTO>  {

			const restUrl = environment.baseUrl + '/api/users/me';

			return this.httpClient.get <UserInfoDTO>(restUrl);
		  }
  
  
     So, the entire user.services.ts should look something like this:
		import { Injectable } from '@angular/core';
		import {HttpClient} from "@angular/common/http";
		import {Observable, of} from "rxjs";
		import {UserInfoDTO} from "../models/user-info-dto";
		import {environment} from "../../environments/environment";


		@Injectable({
		  providedIn: 'root'
		})
		export class UserService {

		  constructor(private httpClient: HttpClient) { }

		  /*
		   * Return an observable that holds an object with information about the user -- e.g., user's name, user's role
		   */
		  public getUserInfo(): Observable<UserInfoDTO>  {

			const restUrl = environment.baseUrl + '/api/users/me';

			return this.httpClient.get <UserInfoDTO>(restUrl);
		  }



		  /*
		   * Return an observable that holds an object with information about the user -- e.g., user's name, user's role
		   */
		  public getUserInfoHardCoded(): Observable<UserInfoDTO>  {

			let userInfo: UserInfoDTO = new UserInfoDTO();

			userInfo.name = 'John Smith';
			userInfo.pageRoutes = new Map<string, boolean>([
			  ['page/addReport', false],
			  ['page/longReport', true],
			  ['page/viewReports', true],
			  ['page/searchResults', true]
			 ]);


			// Return the hard-coded observable
			return of(userInfo);
		  }
		}


 3. Change the PageGuard.canActivate so it calls the UserService method that invokes the REST call
    a. Edit page.guard.ts
	b. Change the canActivate method so it looks like this:
		  /*
		   * Determines if the user proceeds to the next.routeUrl or is redirected to 403
		   */
		  public canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {

			return this.userService.getUserInfo().pipe(
			  map((userInfoDTO: UserInfoDTO) => {

				// Get the next url from the routeConfig
				let nextUrl: string | undefined = next.routeConfig?.path;
				if (! nextUrl) {
				  return false;
				}

				let pageRoutes: Map<string, boolean> = new Map(Object.entries(userInfoDTO.pageRoutes));

				// Check if the url is allowed
				let routeAllowed: boolean | undefined = pageRoutes.get(nextUrl);
				if (! routeAllowed) {
				  this.router.navigate(['page/403']).then();

				  // Return false so that the router will not route the user to the new page
				  return false;
				}


				// The route is allowed.  So, proceed
				return true;
			  }));

		  }
	
	
    So, the entire page.guard.ts should look *something* like this:
		import { Injectable } from '@angular/core';
		import {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';
		import {Observable} from 'rxjs';
		import {UserService} from "../services/user.service";
		import {UserInfoDTO} from "../models/user-info-dto";
		import {map} from "rxjs/operators";

		@Injectable({
		  providedIn: 'root'
		})
		export class PageGuard implements CanActivate {


		  constructor(private router: Router,
					  private userService: UserService)
		  { }


		  /*
		   * Determines if the user proceeds to the next.routeUrl or is redirected to 403
		   */
		  public canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {

			return this.userService.getUserInfo().pipe(
			  map((userInfoDTO: UserInfoDTO) => {

				// Get the next url from the routeConfig
				let nextUrl: string | undefined = next.routeConfig?.path;
				if (! nextUrl) {
				  return false;
				}

				let pageRoutes: Map<string, boolean> = new Map(Object.entries(userInfoDTO.pageRoutes));

				// Check if the url is allowed
				let routeAllowed: boolean | undefined = pageRoutes.get(nextUrl);
				if (! routeAllowed) {
				  this.router.navigate(['page/403']).then();

				  // Return false so that the router will not route the user to the new page
				  return false;
				}


				// The route is allowed.  So, proceed
				return true;
			  }));

		  }

		}


 4. Grant your backend bogus user the READER role  (so the user does not have access to add-reports
    a. Edit MyAuthenticationManager.loadUserDetailsForDevelopment()
	b. Make sure it grants ROLE_READER
          grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_READER"));
		  

 5. Verify that the add-reports page is restricted
    a. Startup the Full WebApp
	b. Attempt to go to the Add Reports page 
	   -- You should get the 403 forbidden error
	   
	   
