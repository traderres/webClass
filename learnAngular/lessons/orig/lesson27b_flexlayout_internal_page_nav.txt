Lesson:  Use Angular Flex Layout for an Internal Page Navigation Mechanism
--------------------------------------------------------------------------
Problem:  I have a really long page
          I need a way for the user to navigate to different sections of the page
          I want the navigation section to *not* scroll move


Assumptions:
 A) The page layout is as follows
    
    +--------------------------------------------+
    | Page Title                   | Page Title  |
    |                              | Section 1   |
    |  Section 1                   | Section 2   |
    |    section 1 is here         | Section 3   |
    |                              |             |
    |  Section 2                   |             |
    |    section 2 is here         |             |
    |                              |             |
    |  Section 3                   |             |
    |    section 3 is here         |             |
    +--------------------------------------------+
    
    As the user scrolls down, the right column is *STAYS FIXED* at the top
    Clicking on items in the internal nav page, scrolls left column down
    
    
Procedure
---------
 1. Add a new page to the angularApp1
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> ng generate component longPage --skipTests
	
	
 2. Add a route for the new page
    a. Edit app.module.ts
	b. Add this to the routes
	     { path: 'page/longPage',  component: LongPageComponent },
		 
		 
	 When finished, your appRoutes should look *something* like this:
	   
		const appRoutes: Routes = [
		  { path: 'page/addReport',     component: AddReportComponent,  canActivate: [PageGuard] },
		  { path: 'page/longReport',    component: LongReportComponent, canActivate: [PageGuard] },
		  { path: 'page/viewReports',   component: ViewReportsComponent, canActivate: [PageGuard] },
		  { path: 'page/searchResults', component: SearchResultsComponent, canActivate: [PageGuard] },
		  { path: 'page/403',           component: ForbiddenComponent},      
		  { path: 'page/welcome',       component: WelcomeComponent },
		  { path: 'page/longPage',      component: LongPageComponent },
		  { path: '',   redirectTo:  'page/welcome', pathMatch: 'full'},
		  { path: '**',                 component: NotFoundComponent}    // No routes match, so take the user to the "NotFoundComponent"
		];   

 3. Add a link to the page in the navigation bar
    a. Edit navbar.component.html
	
	b. Add this to it:
		  <!-- View Long Page -->
		  <mat-list-item class="navItem" [routerLink]="'page/longPage'" routerLinkActive="active">
			<a title="View Long Page">View Long Page</a>
			<div fxFlex fxLayoutAlign="end end">
			  <a [routerLink]="'page/longPage'" target="_blank">
				<i class="fas fa-external-link-alt navItemIcon" title="Open 'View Long Page' in a new window"></i>
			  </a>
			</div>
		  </mat-list-item>


 4. Add some sections to this long page
    a. Edit long-page.component.html
	b. Replace its contents with this:
		<mat-card style="height: 300px">
		  <!-- Section for Title -->
		  <mat-card-title>Title Section</mat-card-title>

		  <mat-card-content>
			This is the title section and it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 1 -->
		  <mat-card-title>Section 1</mat-card-title>

		  <mat-card-content>
			Section 1 starts here it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 2 -->
		  <mat-card-title>Section 2</mat-card-title>

		  <mat-card-content>
			Section 2 starts here it goes on an one

		  </mat-card-content>

		</mat-card>



		<mat-card style="height: 300px; margin-top: 15px">
		  <!-- Section 3 -->
		  <mat-card-title>Section 3</mat-card-title>

		  <mat-card-content>
			Section 3 starts here it goes on an one

		  </mat-card-content>

		</mat-card>


 5. Add angular-flex divs so that we have 2 columns
    a. Edit long-page.component.html
	b. Replace its contents with this:


		<div fxFlex fxLayout="row" fxLayoutGap="10px">

		  <div fxFlex fxLayoutAlign="start start"  fxLayoutGap="0" style="border: 1px solid black">
			<!-- Left Column -->

			<div fxFill fxLayout="column">

				<mat-card style="height: 300px">
				  <!-- Section for Title -->
				  <mat-card-title>Title Section</mat-card-title>

				  <mat-card-content>
					This is the title section and it goes on an one

				  </mat-card-content>

				</mat-card>


				<mat-card style="height: 300px; margin-top: 15px">
				  <!-- Section 1 -->
				  <mat-card-title>Section 1</mat-card-title>

				  <mat-card-content>
					Section 1 starts here it goes on an one

				  </mat-card-content>

				</mat-card>




				<mat-card style="height: 300px; margin-top: 15px">
				  <!-- Section 2 -->
				  <mat-card-title>Section 2</mat-card-title>

				  <mat-card-content>
					Section 2 starts here it goes on an one

				  </mat-card-content>

				</mat-card>



				<mat-card style="height: 300px; margin-top: 15px">
				  <!-- Section 3 -->
				  <mat-card-title>Section 3</mat-card-title>

				  <mat-card-content>
					Section 3 starts here it goes on an one

				  </mat-card-content>

				</mat-card>
			</div>
		  </div>



		  <div fxFlex="200px" fxLayoutAlign="start start" style="border: 1px solid green">
			<!-- Right Column that is always 200 pixels wide -->
			Right
		  </div>
		</div>



 6. Add the scrollToTarget method to your long-page.component.ts
    a. Edit long-page.component.ts
	b. Add this method:
		  public scrollToTarget(aTarget: string): void {
			// Get a reference to the HTML element
			const el: HTMLElement|null = document.getElementById(aTarget);

			// Use the setTimeout to call the scrollIntoView
			if (el) {
			  setTimeout(() =>
				el.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'}), 0);
			}
		  }

 7. Add the internal navigation links
    a. Edit long-page.component.html
	b. Replace the right column
		 <div fxFlex="200px" fxLayoutAlign="start start" style="border: 1px solid green">
			<!-- Right Column that is always 200 pixels wide -->
			Right
		 </div>
		
	   With this:
		<div fxFlex="200px" fxLayoutAlign="start start" style="border: 1px solid green">
			<!-- Right Column that is always 200 pixels wide -->

			<div fxLayout="column">
			  <!-- Internal Navigation Links -->
			  <a (click)="this.scrollToTarget('titleSection')"  class="clickable">Title Section</a>
			  <a (click)="this.scrollToTarget('section1')"  class="clickable">Section 1</a>
			  <a (click)="this.scrollToTarget('section2')"  class="clickable">Section 2</a>
			  <a (click)="this.scrollToTarget('section3')"  class="clickable">Section 3</a>
			</div>

		</div>   



 8. Add id=" " to the mat-card tags (so that the internal hyperlinks work)
    a. Edit long-page.component.html
    b. Replace the 1st mat-card from this:
	   		<mat-card style="height: 300px">
	   
	   To this:
	   		<mat-card id="titleSection" style="height: 300px">
      
	
    b. Replace the 2nd mat-card from this:
	   		<mat-card style="height: 300px; margin-top: 15px">
	   
	   To this:
	   		<mat-card id="section1" style="height: 300px; margin-top: 15px">
        
      

    c. Replace the 3rd mat-card from this:
	   		<mat-card style="height: 300px; margin-top: 15px">
	   
	   To this:
	   		<mat-card id="section2" style="height: 300px; margin-top: 15px">
        
      
  

    d. Replace the 4th mat-card from this:
	   		<mat-card style="height: 300px; margin-top: 15px">
	   
	   To this:
	   		<mat-card id="section3" style="height: 300px; margin-top: 15px">
        
      
Problem:  If the user clicks on the "Section 3" hyperlink, both the right and left columns scroll down
          We only want the scrollbar to scroll on the *left* column
	


 9. Adjust the html so that the right-side column does *NOT* move on scroll
    a. Edit long-page.component.css
	b. Add this class:
		.fixed {
		  position: fixed;
	      width: 200px;     /* should have same width as the column */
		}

	c. Edit long-page.component.html
	
	d. Add a div class="fixed" around the div that holds the hyperlinks
       <div class="fixed">
	      
		  
	   </div>
	   

		When finished, the right column looks like this:
		 <div fxFlex="200px"  style="border: 1px solid green;" >
		     <!-- Right Column that is always 200 pixels wide -->
		  
			  <div class="fixed">

				<div fxLayout="column" fxFlexFill>
				  <!-- Internal Navigation Links -->
				  <a (click)="this.scrollToTarget('titleSection')" class="clickable">Title Section</a>
				  <a (click)="this.scrollToTarget('section1')" class="clickable">Section 1</a>
				  <a (click)="this.scrollToTarget('section2')" class="clickable">Section 2</a>
				  <a (click)="this.scrollToTarget('section3')" class="clickable">Section 3</a>
				</div>

			  </div>
		</div>
	

 
When finished, the long-page.component.html looks like this:
	<div fxFlexFill fxLayoutAlign="start start" fxLayout="row" fxLayoutGap="10px">

	  <div fxFlex fxLayoutGap="0" style="overflow: auto">
		<!-- Left Column -->

		<div fxFill fxLayout="column">

		  <mat-card id="titleSection" style="height: 300px">
			<!-- Section for Title -->
			<mat-card-title>Title Section</mat-card-title>

			<mat-card-content>
			  This is the title section and it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section1" style="height: 300px; margin-top: 15px">
			<!-- Section 1 -->
			<mat-card-title>Section 1</mat-card-title>

			<mat-card-content>
			  Section 1 starts here it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section2" style="height: 300px; margin-top: 15px">
			<!-- Section 2 -->
			<mat-card-title>Section 2</mat-card-title>

			<mat-card-content>
			  Section 2 starts here it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section3" style="height: 300px; margin-top: 15px">
			<!-- Section 3 -->
			<mat-card-title>Section 3</mat-card-title>

			<mat-card-content>
			  Section 3 starts here it goes on an one

			</mat-card-content>

		  </mat-card>
		</div>
	  </div>


	  <div fxFlex="200px" style="border: 1px solid green;">
		<!-- Right Column that is always 200 pixels wide -->
		<div class="fixed">

		  <div fxLayout="column" fxFlexFill>
			<!-- Internal Navigation Links -->
			<a (click)="this.scrollToTarget('titleSection')" class="clickable">Title Section</a>
			<a (click)="this.scrollToTarget('section1')" class="clickable">Section 1</a>
			<a (click)="this.scrollToTarget('section2')" class="clickable">Section 2</a>
			<a (click)="this.scrollToTarget('section3')" class="clickable">Section 3</a>
		  </div>

		</div>
	  </div>


	</div>


10. Add some styling to the navigation links
    a. Edit long-page.component.css 
	b. Append these CSS classes and styling:
		ul {
		  list-style-type: none;
		  margin: 5px;
		  padding: 5px;
		}

		a {
		  /* The user is not hovering over an anchor on this page */
		  font-size: 1.5em;
		  margin: 0;
		  font-family: "Verdana", san-serif;
		}

		a:hover {
		  /* The user has hovered over any anchor on this page */
		  color: #007bff;
		  font-size: 1.5em;
		  margin: 0;
		  font-family: "Verdana", san-serif;
		}	

	c. Edit long-page.component.html
	d. Replace these hyperlinks
			<!-- Internal Navigation Links -->
			<a (click)="this.scrollToTarget('titleSection')" class="clickable">Title Section</a>
			<a (click)="this.scrollToTarget('section1')" class="clickable">Section 1</a>
			<a (click)="this.scrollToTarget('section2')" class="clickable">Section 2</a>
			<a (click)="this.scrollToTarget('section3')" class="clickable">Section 3</a>
			
	   With this:
		    <!-- Internal Navigation Links -->
			<ul>
			  <li><a (click)="this.scrollToTarget('titleSection')" class="clickable">Title Section</a></li>
			  <li><a (click)="this.scrollToTarget('section1')" class="clickable">Section 1</a></li>
			  <li><a (click)="this.scrollToTarget('section2')" class="clickable">Section 2</a></li>
			  <li><a (click)="this.scrollToTarget('section3')" class="clickable">Section 3</a></li>
			</ul>


When finished, the long-page.component.html looks like this:
	<div fxFlexFill fxLayoutAlign="start start" fxLayout="row" fxLayoutGap="10px">



	  <div fxFlex fxLayoutGap="0" style="overflow: auto">
		<!-- Left Column -->

		<div fxFill fxLayout="column">

		  <mat-card id="titleSection" style="height: 300px">
			<!-- Section for Title -->
			<mat-card-title>Title Section</mat-card-title>

			<mat-card-content>
			  This is the title section and it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section1" style="height: 300px; margin-top: 15px">
			<!-- Section 1 -->
			<mat-card-title>Section 1</mat-card-title>

			<mat-card-content>
			  Section 1 starts here it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section2" style="height: 300px; margin-top: 15px">
			<!-- Section 2 -->
			<mat-card-title>Section 2</mat-card-title>

			<mat-card-content>
			  Section 2 starts here it goes on an one

			</mat-card-content>

		  </mat-card>


		  <mat-card id="section3" style="height: 300px; margin-top: 15px">
			<!-- Section 3 -->
			<mat-card-title>Section 3</mat-card-title>

			<mat-card-content>
			  Section 3 starts here it goes on an one

			</mat-card-content>

		  </mat-card>
		</div>
	  </div>


	  <div fxFlex="200px">
		<!-- Right Column that is always 200 pixels wide -->
		<div class="fixed">

		  <div fxLayout="column" fxFlexFill>
			<!-- Internal Navigation Links -->
			<ul>
			  <li><a (click)="this.scrollToTarget('titleSection')" class="clickable">Title Section</a></li>
			  <li><a (click)="this.scrollToTarget('section1')" class="clickable">Section 1</a></li>
			  <li><a (click)="this.scrollToTarget('section2')" class="clickable">Section 2</a></li>
			  <li><a (click)="this.scrollToTarget('section3')" class="clickable">Section 3</a></li>
			</ul>

		  </div>

		</div>
	  </div>

	</div>


When finished, the long-page.component.css looks like this:
	.fixed {
	  position: fixed;
	  width: 200px; /* should have same width as the column */
	}

	ul {
	  list-style-type: none;
	  margin: 5px;
	  padding: 5px;
	}

	a {
	  /* The user is not hovering over an anchor on this page */
	  font-size: 1.5em;
	  margin: 0;
	  font-family: "Verdana", san-serif;
	}

	a:hover {
	  /* The user has hovered over any anchor on this page */
	  color: #007bff;
	  font-size: 1.5em;
	  margin: 0;
	  font-family: "Verdana", san-serif;
	}


When finished, the long-page.component.ts looks like this:
	import { Component, OnInit } from '@angular/core';

	@Component({
	  selector: 'app-long-page',
	  templateUrl: './long-page.component.html',
	  styleUrls: ['./long-page.component.css']
	})
	export class LongPageComponent implements OnInit {

	  public fixedSizeData = Array(10000).fill(50);


	  constructor() { }

	  ngOnInit(): void {
	  }

	  public scrollToTarget(aTarget: string): void {
		// Get a reference to the HTML element
		const el: HTMLElement|null = document.getElementById(aTarget);

		// Use the setTimeout to call the scrollIntoView
		if (el) {
		  setTimeout(() =>
			el.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'}), 0);
		}
	  }

	}
