Lesson:  Setup a Navigation Bar like the Washington Post
--------------------------------------------------------

References
----------
https://material.angular.io/components/sidenav/examples
http://www.dotnetspeak.com/angular/controlling-scrolling-with-angularflex-layout/
https://stackblitz.com/angular/ybgmagmydrr?file=src%2Fapp%2Fsidenav-fixed-example.html


--------------------------------------------------------------------------------
| search icon | app menu |              Title                       User icon  |
--------------------------------------------------------------------------------
| App Navbar |                   Content Area                    | User Navbar |
|            |                                                   |             |
|            |                                                   |             |
--------------------------------------------------------------------------------

Menu Behavior:
 1) Top header is fixed and 60 pixels tall
 2) App menu  appears/disappears on left  when user clicks app menu
 3) User menu appears/disappears on right when user clicks on the User Icon
 4) Only one side menu appears at a time
 5) Vertical/Horizontal Scrollbars only appears in Content areA  (no vertical scrollbar in the App Menu)
 6) App Title is centered in the header
 7) Clicking on the search icon opens a searchbox (and closes the menus)
 
Colors
 A) Header    has background=#111     foreground=white
 B) App Menu  has background=#2a2a2a  foreground=white
 C) User Menu has background=#172a52  foreground=white
 D) Hover on User Menu Item has background=black foreground=white and indents about 5 pixels
 

Procedure
---------
 1. Update the browser tab to show the Application Title
    a. Edit frontend/src/index.html.dev
	   Change this:
	  		<title>Frontend</title>
	   To this:
	  		<title>Angular App1</title>

    b. Repeat for the frontend/src/index.html.prod
	

 2. Update the header
    a. Change the header so it's only 60 pixels
       1) Edit app.component.html 
	      Change the header div from this:
				<div fxFlex="75px">
					<!-- Header is 75 pixels high -->
					<app-header></app-header>
				</div>
  
		  To this:
				<div fxFlex="60px">
					<!-- Header is 60 pixels high -->
					<app-header></app-header>
				</div> 
	
	   2) Edit navbar.component.html
	      Add a css style property margin-top: 60px
		  Chang fixedTopGap="75" to fixedTopGap="60"
		  
		  When done, the tag should look like this:
		    <mat-sidenav class="navbar" style="width:200px" mode="side" opened="true" [fixedInViewport]="true" [fixedTopGap]="60" [fixedBottomGap]="0">


    b. Change the header background so it's near-black  #111
	   1) Edit header.component.css
	      Change the .header CSS class so the background is #111
			.header {
			  background: #111;
			  color: white;
			  height: 100%;
			  padding-left: 16px;
			  padding-right: 16px;
			}
		

   c. Move the title to the center part of the header 
      1) Edit header.component.html
	  2) Move the Application Title to the center part of the header
	     So, the Center Part of the Header looks like this:
		 
		  <!-- Center Part of the Header -->
		  <div fxFlex  fxLayoutAlign="center center">
			<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

			<!-- Application Title -->
			<h1 style="display: inline" class="app1Logo">Angular App1</h1>
		  </div>
         
		 
	  3) Add a [routerLink="'/'" to the title (so clicking on the title takes you to the default page)
	  	  
	     Change this:

			<!-- Application Title -->
			<h1 style="display: inline" class="app1Logo">Angular App1</h1>
		
		 To this:
			<!-- Application Title -->
			<h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
		
		
	  When finished, header.component.html looks like this:
		<div class="header">

		  <div fxFlex fxLayout="row" fxLayoutGap="0">
			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayout="row" fxLayoutGap="0">
				<div fxFlex="45px">
				  <!-- Navbar Toggle Button -->
				  <button type="button" (click)="toggle()">
					<i class="fa fa-bars"></i>
				  </button>
				</div>

			  </div>

			  <!-- Center Part of the Header -->
			  <div fxFlex  fxLayoutAlign="center center">
				<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

				<!-- Application Title -->
				<h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
			  </div>

			  <div fxFlex fxLayoutAlign="end end" style="border: 1px solid white">
				<!-- Right Part of the Header -->
				Right
			  </div>

		  </div>

		</div>



		 

		
   d. Add a search hourglass to the left side of the header
      1) Edit header.component.html
	  2) Update the Left Side of the Header so it looks like this:
			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0">

				  <!-- Search Hourglass -->
				  <a class="button" (click)="toggleAppNavbar()">
					<i class="fa fa-search"></i>
				  </a>

				  <!-- Separator -->
				  &nbsp;&nbsp;&nbsp;&nbsp;

				  <!-- App Navbar -->
				  <a  class="button" (click)="toggleAppNavbar()">
					Sections
					<i class="fa fa-bars"></i>
				  </a>
			  </div>

 
    e. Add a "User Menu" and person icon to the right side of the header
	   1) Edit the header.component.html
	   2) Update the Right Side of the Header so it looks like this:
	   
			  <!-- Right Side of the Header -->
			  <div fxFlex fxLayoutAlign="end center">
				<!-- fxLayoutAlign="end center" is right-aligned horizontally and centered vertically   -->

				<!-- User Menu -->
				<a class="button">
				  <span class="username">John.Smith</span>&nbsp;
				  <span class="fa fa-user"></span>
				</a>
			  </div>
    
	f. Change the header icon buttons to look prettier 
	   -- They are in a box
	   -- They have a white border when hovered over
       -- Each button box has: margin-top: 11px
	   -- Each button box has: background-color: #1f1f1f;
	   
	   Edit header.component.css
	   
		a.button {
		  background-color: #1f1f1f;
		  border: 1px solid #444;
		  border-radius: 4px;
		  font-size: 14px;
		  line-height: 20px;
		  color: #f7f7f7;
		  padding: 7px 14px 7px 14px;
		  height: 20px;
		  cursor: pointer;
		  -webkit-transition: 200ms all linear;
		  -moz-transition: 200ms all linear;
		  -o-transition: 200ms all linear;
		  transition: 200ms all linear;
		  background-image: none;
		}

		a.button:hover {
		  background-color: black;
		  color: white;
		  border-color: #f9f9f9;
		}
    
	When completed, the header.component.html looks like this:
		<div class="header">

		  <div fxFlex fxLayout="row" fxLayoutGap="0">

			  <!-- Left Side of the Header -->
			  <div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0">

				  <!-- Search Hourglass -->
				  <a class="button" (click)="toggleAppNavbar()">
					<i class="fa fa-search"></i>
				  </a>

				  <!-- Separator -->
				  &nbsp;&nbsp;&nbsp;&nbsp;

				  <!-- App Navbar -->
				  <a  class="button" (click)="toggleAppNavbar()">
					Sections
					<i class="fa fa-bars"></i>
				  </a>
			  </div>


			  <!-- Center Part of the Header -->
			  <div fxFlex  fxLayoutAlign="center center">
				<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

				<!-- Application Title -->
				<h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
			  </div>


			  <!-- Right Side of the Header -->
			  <div fxFlex fxLayoutAlign="end center">
				<!-- fxLayoutAlign="end center" is right-aligned horizontally and centered vertically   -->

				<!-- User Menu -->
				<a class="button">
				  <span class="username">John.Smith</span>&nbsp;
				  <span class="fa fa-user"></span>
				</a>
			  </div>

		  </div>
		</div>
	
	When completed, the header.component.css looks like this:
		.header {
		  background: #111;
		  color: white;
		  height: 100%;
		  padding-left: 16px;
		  padding-right: 16px;
		}

		.app1Logo {
		  color: #fff;
		  padding: 3px 0 5px 5px;
		  font-size: 1.7em;
		  margin: 0;
		  font-family: "Verdana", san-serif;
		  text-decoration: none;

		  /* Outline of zero gets rid of the annoying box around the link */
		  outline: 0;
		}

		a.button {
		  background-color: #1f1f1f;
		  border: 1px solid #444;
		  border-radius: 4px;
		  font-size: 14px;
		  line-height: 20px;
		  color: #f7f7f7;
		  padding: 7px 14px 7px 14px;
		  height: 20px;
		  cursor: pointer;
		  -webkit-transition: 200ms all linear;
		  -moz-transition: 200ms all linear;
		  -o-transition: 200ms all linear;
		  transition: 200ms all linear;
		  background-image: none;
		}
		
		a.button:hover {
		  background-color: black;
		  color: white;
		  border-color: #f9f9f9;
		}


 3. Change the header.component.html and header.component.ts to call toggleAppNavBar() and toggleUserNavbar()
    a. Edit header.component.ts
	   1) Change toggle() to toggleAppNavbar()
		  	  public toggleAppNavbar(): void {
				this.navbarService.toggleAppNavbar();
			  }
			
      2) Change the (click)="toggle()" to (click)="toggleAppNavbar()"
   
      3) Change the name so that clicking on it calls toggleUserNavbar()
		   <!-- User Menu -->
		  <a class="button" (click)="toggleUserNavbar()">
			<span class="username">John.Smith</span>&nbsp;
			<span class="fa fa-user"></span>
		  </a>
	  
     When finished, header.component.html looks like this:
		<div class="header">

		  <div fxFlex fxLayout="row" fxLayoutGap="0">

			<!-- Left Side of the Header -->
			<div fxFlex fxLayoutAlign="left center" fxLayout="row" fxLayoutGap="0">

			  <!-- Search Hourglass -->
			  <a class="button" (click)="toggleAppNavbar()">
				<i class="fa fa-search"></i>
			  </a>

			  <!-- Separator -->
			  &nbsp;&nbsp;&nbsp;&nbsp;

			  <!-- App Navbar -->
			  <a  class="button" (click)="toggleAppNavbar()">
				Sections
				<i class="fa fa-bars"></i>
			  </a>
			</div>


			<!-- Center Part of the Header -->
			<div fxFlex  fxLayoutAlign="center center">
			  <!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

			  <!-- Application Title -->
			  <h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
			</div>


			<!-- Right Side of the Header -->
			<div fxFlex fxLayoutAlign="end center">
			  <!-- fxLayoutAlign="end center" is right-aligned horizontally and centered vertically   -->

			  <!-- User Menu -->
			  <a class="button" (click)="toggleUserNavbar()">
				<span class="username">John.Smith</span>&nbsp;
				<span class="fa fa-user"></span>
			  </a>
			</div>

		  </div>
		</div>
	 
	 
   
    b. Create a new method in the header.component.ts
		public toggleUserNavbar(): void {
			this.navbarService.toggleUserNavbar();
		}
		
	   When finished, header.component.ts looks like this:
			import { Component, OnInit } from '@angular/core';
			import {NavbarService} from "../services/navbar.service";

			@Component({
			  selector: 'app-header',
			  templateUrl: './header.component.html',
			  styleUrls: ['./header.component.css']
			})
			export class HeaderComponent implements OnInit {

			  constructor(private navbarService: NavbarService)
			  {}

			  ngOnInit(): void {
			  }

			  public toggleAppNavbar(): void {
				// Send a message to the navbarService (to tell it to toggle)
				this.navbarService.toggleAppNavbar();
			  }

			  public toggleUserNavbar(): void {
				this.navbarService.toggleUserNavbar();
			  }
			}



		
 4. Change the navbarService so that it holds 2 boolean properties
    -- One is for the app-navbar
	-- One is for the user-navbar
	a. Edit navbar.service.ts
	
	b. Add this class to the top:
		class NavbarState {
		  isAppNavbarDisplayed: boolean;
		  isUserNavbarDisplayed: boolean;
		}

	
	c. Change the navbar.service.ts to this:
		import {Injectable} from '@angular/core';
		import {Observable, Subject} from "rxjs";

		class NavbarState {
		  isAppNavbarDisplayed: boolean;
		  isUserNavbarDisplayed: boolean;
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class NavbarService  {

		  private navbarStateSubject = new Subject<NavbarState>();
		  private navbarState: NavbarState = new NavbarState();

		  public constructor() {
			// Initialize the navbarState

			// The AppNavBar will be visible on startup
			this.navbarState.isAppNavbarDisplayed = true;

			// The UserNavBar will not be visible on startup
			this.navbarState.isUserNavbarDisplayed = false;
		  }

		  public getNavbarStateAsObservable(): Observable<NavbarState> {
			return this.navbarStateSubject.asObservable();
		  }

		 public toggleUserNavbar(): void {
			this.navbarState.isUserNavbarDisplayed = !this.navbarState.isUserNavbarDisplayed;

			// Send a message to the app-component (to tell it to show/hide navbars)
			this.navbarStateSubject.next(this.navbarState);
		  }

		  public toggleAppNavbar(): void {
			this.navbarState.isAppNavbarDisplayed = !this.navbarState.isAppNavbarDisplayed;

			// Send a message to the app-component (to tell it to show/hide navbars)
			this.navbarStateSubject.next(this.navbarState);
		  }
		}



 5. Add the User Navbar (for the right side)
    a. Create the userNavbar component
	   unix> cd ~/intellijProjects/angularApp1/frontend
	   unix> ng generate component userNavbar
	   
    b. Replace the user-navbar.component.html with this:
		<mat-sidenav-container autosize>
		  <mat-sidenav class="navbar" style="width:200px; margin-top: 60px" mode="side" opened="true"
					   [fixedInViewport]="true" [fixedTopGap]="0" [fixedBottomGap]="0">
			<mat-nav-list style="margin-top: 0; padding-top: 0">

				<!-- View Reports -->
				<mat-list-item class="navItem" [routerLink]="'page/viewReports'" routerLinkActive="active">
				  <a title="View Reports">View Reports</a>
				  <div fxFlex fxLayoutAlign="end end">
					<a [routerLink]="'page/viewReports'" target="_blank">
					  <i class="fas fa-external-link-alt navItemIcon" title="Open View Reports in a new window"></i>
					</a>
				  </div>
				</mat-list-item>

				<!-- Add Report -->
				<mat-list-item class="navItem" [routerLink]="'page/addReport'" routerLinkActive="active">
				  <a title="Add Report">Add Report</a>
				  <div fxFlex fxLayoutAlign="end end">
					<a [routerLink]="'page/addReport'" target="_blank">
					  <i class="fas fa-external-link-alt navItemIcon" title="Open Add Report in a new window"></i>
					</a>
				  </div>
				</mat-list-item>

			</mat-nav-list>
		  </mat-sidenav>
		</mat-sidenav-container>

    c. Replace the user-navbar.component.css with this:
		.navbar {
		  background: #364150;
		  color: white;
		}

		.mat-list-item {
		  font-family: Verdana, sans-serif;
		  font-size: 13px;
		  color: white;
		  height: 25px;
		}

		.mat-list-item.active{
		  /* Set the color for the actively clicked navbar item */
		  /* Active mat-list-item has a background gradient that goes to the right */
		  color: #fff;
		  background: linear-gradient(to right, #5e6b7b, rgba(94, 107, 123, 0));
		  font-weight: bold;
		}


		.navHeader{
		  /* The navHeader as a gradient that goes to the left */
		  background: linear-gradient(to left, #5e6b7b, rgba(94, 107, 123, 0));
		  font-family: Verdana, sans-serif;
		  font-size: 16px;
		  font-weight:bold;
		  padding: 0;
		  margin-top: 0;
		  height: 44px;
		  display: flex;
		  align-items: center;
		}

		.navHeaderIcon {
		  margin-left: 7px;
		}

		.navHeaderTitle {
		  margin-left: 8px;
		}

		.mat-list-item.navItem {
		  height: 40px;
		}

		.navItem:hover  {
		  color: #fff;
		  background: linear-gradient(to right, #5e6b7b, rgba(94, 107, 123, 0));
		  font-weight: bold;
		}

		.navItemIcon {
		  /* By default, the navItemIcon is invithubsible (It's the same color as the navbar background) */
		  color: #364150
		}

		.navItem:hover .navItemIcon {
		  /* When hovering over navItem change the color of the navItemIcon so it appears */
		  color: #999
		}

	
	
 6. Change the app.component.ts to listen for the navbar properties
 	a. Edit the app.component.ts
	b. Rename isSideNavVisible        to isAppNavVisible 
	c. Rename showSideNavSubscription to showAppNavSubscription
	d. Add a 2nd public boolean:
	     public isUserNavVisible = false;    // The right nav starts out as not visible
		
    e. Change the ngOnInit() so that it subscribes to the observable and returns a NavbarState object
	   NOTE:  This NavbarState object holds 2 booleans
	   
	   
      When finished, app.component.ts should look like this:
		import {Component, OnDestroy, OnInit} from '@angular/core';
		import {Subscription} from "rxjs";
		import {NavbarService} from "./services/navbar.service";

		@Component({
		  selector: 'app-root',
		  templateUrl: './app.component.html',
		  styleUrls: ['./app.component.css']
		})
		export class AppComponent implements OnInit, OnDestroy {
		  title = 'AngularApp1';

		  public isAppNavVisible = true;    // The left nav starts out as visible
		  public isUserNavVisible = false;    // The right nav starts out as not visible

		  private showNavSubscription: Subscription;

		  constructor(private navbarService: NavbarService)
		  { }


		  public ngOnInit(): void {

			// This app-component will listen for messages from the navbarService
			this.showNavSubscription = this.navbarService.getNavbarStateAsObservable().subscribe((navbarState) => {
			  // We received a message from the navbarService
			  // -- Someone has toggled the one of the navbars

			  // Set the public properties based on the navbarState properties returned
			  this.isAppNavVisible = navbarState.isAppNavbarDisplayed;
			  this.isUserNavVisible = navbarState.isUserNavbarDisplayed;
			});
		  }

		  public ngOnDestroy() {
			this.showNavSubscription.unsubscribe();
		  }

		}


 7. Edit the app.component.html to listen for the new properties 
    a. Edit the app.component.html
	b. Add the right-side navigation
	    <div fxFlex="200px" style="padding: 0" *ngIf="this.isUserNavVisible">
      		<!-- Right Side Navigation -->
      	<app-user-navbar></app-user-navbar>
    
	
	 When finished, app.component.html looks like this:
		<div fxFlexFill fxLayout="column">

			  <div fxFlex="60px">
				<!-- Header is 60 pixels high -->
				<app-header></app-header>
			  </div>


			  <div fxFlex fxLayout="row" fxLayoutGap="0px">
				<div fxFlex="200px" style="padding: 0" *ngIf="this.isAppNavVisible">
				  <!-- Left Side Navigation -->
				  <app-navbar></app-navbar>
				</div>

				<div fxFlex>
				  <!-- Main Viewing Area -->
				  <router-outlet></router-outlet>
				</div>

				<div fxFlex="200px" style="padding: 0" *ngIf="this.isUserNavVisible">
				  <!-- Right Side Navigation -->
				  <app-user-navbar></app-user-navbar>
				</div>
			  </div>

		</div>



 8. Move the .clickable .css class from navbar.component.css to src/app/styles.css
		.clickable {
		  cursor: pointer;
		}



 9. Chang the navbar.service.ts so that only *one* navbar appears at a time
    a. Edit navbar.service.ts
	b. Change the toggleAppNavbar() method by adding this if statement
		 public toggleAppNavbar(): void {
			this.navbarState.isAppNavbarDisplayed = !this.navbarState.isAppNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the App Navbar and the User Navbar is presently visible

			  // So, hide the User Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isUserNavbarDisplayed = false;
			}

			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }

 	c. Change the toggleUserNavbar() method by adding this if statement
		  public toggleUserNavbar(): void {
			this.navbarState.isUserNavbarDisplayed = !this.navbarState.isUserNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the User Navbar and the App Navbar is presently visible

			  // So, hide the App Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isAppNavbarDisplayed = false;
			}

			// Send a message to the user-navbar (to tell the navbar to show or hide)
			this.navbarStateSubject.next(this.navbarState);
		  }


    When completed, the navbar.service.ts should look like this:
		import {Injectable} from '@angular/core';
		import {Observable, Subject} from "rxjs";

		class NavbarState {
		  isAppNavbarDisplayed: boolean;
		  isUserNavbarDisplayed: boolean;
		}

		@Injectable({
		  providedIn: 'root'
		})
		export class NavbarService  {

		  private navbarStateSubject = new Subject<NavbarState>();
		  private navbarState: NavbarState = new NavbarState();

		  public constructor() {
			// Initialize the navbarState

			// The AppNavBar will be visible on startup
			this.navbarState.isAppNavbarDisplayed = true;

			// The UserNavBar will not be visible on startup
			this.navbarState.isUserNavbarDisplayed = false;
		  }


		  public getNavbarStateAsObservable(): Observable<NavbarState> {
			return this.navbarStateSubject.asObservable();
		  }


		 public toggleUserNavbar(): void {
			this.navbarState.isUserNavbarDisplayed = !this.navbarState.isUserNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the User Navbar and the App Navbar is presently visible

			  // So, hide the App Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isAppNavbarDisplayed = false;
			}

			// Send a message to the app-component (to tell it to show/hide navbars)
			this.navbarStateSubject.next(this.navbarState);
		  }

		  public toggleAppNavbar(): void {
			this.navbarState.isAppNavbarDisplayed = !this.navbarState.isAppNavbarDisplayed;

			if ((this.navbarState.isUserNavbarDisplayed) && (this.navbarState.isAppNavbarDisplayed)) {
			  // The user is showing the App Navbar and the User Navbar is presently visible

			  // So, hide the User Navbar (so that only *ONE* navbar is visible at a time)
			  this.navbarState.isUserNavbarDisplayed = false;
			}

			// Send a message to the app-component (to tell it to show/hide navbars)
			this.navbarStateSubject.next(this.navbarState);
		  }
		}

	
	
 9. Make the header fixed. 
    -- We want the header to not move if a user scrolls down or if there is not enough vertical space in the browser window
	-- The fix is to add style="overflow: auto" to the row beneath the header
	
	overflow: visible | hidden | scroll | auto
    NOTE:  overflow only works on a a block level element that has a defined height
  
    visible: Default.  If the content overflows, we will still be able to see it:
	hidden:  Content is clipped and the overflow is hidden:
    scroll:  Show scrollbars all of the time
    auto:    Show scrollbars when needed
	


	a. Edit app.component.html
	   Change the content window from this:
	     <div fxFlex fxLayout="row" fxLayoutGap="0px">
	   
	   To this:
	     <div fxFlex fxLayout="row" fxLayoutGap="0px" style="overflow: auto">
	
    
	When finished, the app.component.html should look like this:
		<div fxFlexFill fxLayout="column">

		  <div fxFlex="60px">
			<!-- Header is 60 pixels high -->
			<app-header></app-header>
		  </div>


          <!-- Use overflow: auto so that the header is fixed and the content window gets the scrollbars (when needed) -->
          <div fxFlex fxLayout="row" fxLayoutGap="0px" style="overflow: auto">
			<!-- This Div holds the Content Window -->

			<div fxFlex="200px" style="padding: 0" *ngIf="this.isAppNavVisible">
			  <!-- Left Side Navigation -->
			  <app-navbar></app-navbar>
			</div>

			<div fxFlex>
			  <!-- Main Viewing Area -->
			  <router-outlet></router-outlet>
			</div>

			<div fxFlex="200px" style="padding: 0" *ngIf="this.isUserNavVisible">
			  <!-- Right Side Navigation -->
			  <app-user-navbar></app-user-navbar>
			</div>
		  </div>

		</div>
	
	NOTE:  To hide the scrollbar completely, you could add this to your style.css
	         ::-webkit-scrollbar { 
			 	display: none;
			 }
	
	
10. Add animation to the navigation bars by moving the <mat-sidenav-container> to app.component.html
    a. Change the app.component.html to this:
	   
	   NOTES
        1) Use mat-sidenav with mode="side" so that the sidenav appears side-by-side with the main content, shrinking the main content's width to make space for the sidenav.
	    2) Use style="overflow: auto" to ensure that the scrollbar only appears in the content window (and not the header)
		3) Use [opened]= to control opening/closing of the sidenavs
		4) Use position="start" for the left sidenav and positoin="end" for the right sidenav
	   
		<div fxFlexFill fxLayout="column">

		  <div fxFlex="60px">
			<!-- Header is 60 pixels high -->
			<app-header></app-header>
		  </div>


          <!-- The overflow: auto ensures that the scrollbars appear only in the content window if needed -->
		  <div fxFlex fxLayout="row" fxLayoutGap="0px" style="overflow: auto">

			<!-- The sidenav container must have fxFlexFill so it uses the entire width  -->
			<mat-sidenav-container fxFlexFill hasBackdrop="false" >

			  <mat-sidenav position="start" mode="side" [opened]="this.isAppNavVisible">
				<!-- Left Side Navigation -->
				<app-navbar></app-navbar>
			  </mat-sidenav>

			  <div>
				<!-- Main Viewing Area -->
				<router-outlet></router-outlet>
			  </div>

			  <mat-sidenav position="end" mode="side" [opened]="this.isUserNavVisible">
				<!-- Right Side Navigation -->
				<app-user-navbar></app-user-navbar>
			  </mat-sidenav>

			</mat-sidenav-container>
		  </div>

		</div>

  
  b. Edit navbar.component.html
     1) Remove <mat-sidenav> and <mat-sidenav-container> tags from the navbar.component.html
     2) Add a div to the top:
	          <div class="navbar" style="width:200px">

     When finished, navbar.component.html looks like this:
		<div class="navbar" style="width:200px">
		  <mat-nav-list style="margin-top: 0; padding-top: 0">

			<!-- Menu Group 1 -->
			<div class='navHeader clickable'  (click)="toggleNavGroup(1)">
			  <i class="fa fa-file-alt navHeaderIcon"></i>
			  <span class="navHeaderTitle">Reports</span>
			</div>

			<!-- Menu Group 1 Items -->
			<div class='navGroup' [ngClass]="{'navGroupClosed': reportsNavGroupClosed == true}">

			  <!-- View Reports -->
			  <mat-list-item class="navItem" [routerLink]="'page/viewReports'" routerLinkActive="active">
				<a title="View Reports">View Reports</a>
				<div fxFlex fxLayoutAlign="end end">
				  <a [routerLink]="'page/viewReports'" target="_blank">
					<i class="fas fa-external-link-alt navItemIcon" title="Open View Reports in a new window"></i>
				  </a>
				</div>
			  </mat-list-item>

			  <!-- Add Report -->
			  <mat-list-item class="navItem" [routerLink]="'page/addReport'" routerLinkActive="active">
				<a title="Add Report">Add Report</a>
				<div fxFlex fxLayoutAlign="end end">
				  <a [routerLink]="'page/addReport'" target="_blank">
					<i class="fas fa-external-link-alt navItemIcon" title="Open Add Report in a new window"></i>
				  </a>
				</div>
			  </mat-list-item>

			  <!-- Audit History -->
			  <mat-list-item class="navItem" [routerLink]="'page/auditHistory'" routerLinkActive="active">
				<a title="Audit History">Audit History</a>
				<div fxFlex fxLayoutAlign="end end" >
				  <a [routerLink]="'page/auditHistory'" target="_blank">
					<i class="fas fa-external-link-alt navItemIcon" title="Open Audit History in a new window"></i>
				  </a>
				</div>
			  </mat-list-item>
			</div>  <!-- End of navMenuGroup -->

			<!-- Menu Group 2 -->
			<div class='navHeader clickable'   (click)="toggleNavGroup(2)">
			  <i class="fa fa-file-alt navHeaderIcon"></i>
			  <span class="navHeaderTitle">Analytics</span>
			</div>

			<!-- Menu Group 2 Items -->
			<div class='navGroup' [ngClass]="{'navGroupClosed': analyticsGroupClosed == true}">

			<!-- Chart 1 -->
			  <mat-list-item class="navItem" [routerLink]="'page/chart1'" routerLinkActive="active">
				<a title="Chart 1">Chart 1</a>
				<div fxFlex fxLayoutAlign="end end">
				  <a [routerLink]="'page/chart1'" target="_blank">
					<i class="fas fa-external-link-alt navItemIcon" title="Open Chart 1 in a new window"></i>
				  </a>
				</div>
			  </mat-list-item>

			  <!-- Chart 2 -->
			  <mat-list-item class="navItem" [routerLink]="'page/chart2'" routerLinkActive="active">
				<a title="Chart 2">Chart 2</a>
				<div fxFlex fxLayoutAlign="end end">
				  <a [routerLink]="'page/chart2'" target="_blank">
					<i class="fas fa-external-link-alt navItemIcon" title="Open Chart 2 in a new window"></i>
				  </a>
				</div>
			  </mat-list-item>

			</div>  <!-- End of Menu Group 2 Items -->

		  </mat-nav-list>
		</div>    


  c. Edit user-navbar.component.html
     1) Remove <mat-sidenav> and </mat-sidenav> tags from the user-navbar.component.html
     2) Insert a div at the top:
	        <div class="navbar">
			
			</div>

	 When finished, user-navbar.component.html looks like this:
		<div class="navbar">
		  <mat-nav-list style="margin-top: 0; padding-top: 0">

			<!-- View Reports -->
			<mat-list-item class="navItem" [routerLink]="'page/viewReports'" routerLinkActive="active">
			  <a title="View Reports">View Reports</a>
			  <div fxFlex fxLayoutAlign="end end">
				<a [routerLink]="'page/viewReports'" target="_blank">
				  <i class="fas fa-external-link-alt navItemIcon" title="Open View Reports in a new window"></i>
				</a>
			  </div>
			</mat-list-item>

			<!-- Add Report -->
			<mat-list-item class="navItem" [routerLink]="'page/addReport'" routerLinkActive="active">
			  <a title="Add Report">Add Report</a>
			  <div fxFlex fxLayoutAlign="end end">
				<a [routerLink]="'page/addReport'" target="_blank">
				  <i class="fas fa-external-link-alt navItemIcon" title="Open Add Report in a new window"></i>
				</a>
			  </div>
			</mat-list-item>

		  </mat-nav-list>
		</div>	 
	 
	 
  d. Change the "navbar" css class in user-navbar.component.css so that it has overflow: hidden
		.navbar {
		  background: #364150;
		  color: white;
		  height: 100%;
		  overflow: hidden;
		}
		
		
  e. Change the "navbar" css class in navbar.component.css so that it has overflow: hidden
     -- This ensures that scrollbars do *not* appear in the navbar
		.navbar {
		  background: #364150;
		  color: white;
		  height: 100%;
		  overflow: hidden;
		} 
  
  
11. Try it Out
    -- Clicking to show/hide the left and right navbars should animate open/closed
		
  
12. If you want to disable the mat-sidenav animations
    a. Add this to the element you wish to disable animation
	       [@.disabled]="true"
		   
	   Change this:
	      <mat-sidenav position="start" mode="side" [opened]="this.isAppNavVisible">

       To this:
   	      <mat-sidenav [@.disabled]="true" position="start" mode="side" [opened]="this.isAppNavVisible">

    
	***OR***
	
	b. Add this to your code to disable animation everywhere within the component
	    @HostBinding('@.disabled') disabled = true;
		


