Lesson:  Add PKI Authentication using PreAuthorize Annotation (so it runs on a BDP)
-----------------------------------------------------------------------------------
Problem:  You want your webapp to require users to login with a PKI certificate
Solution:
 1) Configure Spring security to protect your REST endpoints
 2) Configure Spring security to not protect your javascript, HTML, and images  [they are public]


Assumptions:
 A) You have been provided a BDP Client Certificate p12 file (to run locally)
 B) You have been provided a server cert jks file  (or you created one)
 C) You have been provided a server trust jks file (or you created one)
 
 
Your web application will have different modes based on properties set in application.yaml
------------------------------------------------------------------------------------------
 1) Running in local http mode (using http but get roles from hard-coded principal)
     	# Use hard-coded security principal
	 	use.hardcoded.authenticated.principal: true

		# Do not use SSL
		server.ssl.enabled: false


 2) Running in local https mode (using https but get roles from hard-coded principal)
     	# Use hard-coded security principal
	 	use.hardcoded.authenticated.principal: true

		# We are running "prod mode" locally, get the CN info from the PKI cert
		# On the BDP, we run "prod mode" to get CN info from the header
		ssl.security.mode: pki

		server:
			port: 8443
			ssl:
				key-store: backend/src/main/dev_resources/myKeystore.jks
				key-store-password: changeit
				key-store-type: JKS
				client-auth: need
				trust-store: backend/src/main/dev_resources/myTruststore.jks
				trust-store-password: changeit
				trust-store-type: JKS
				enabled: true



 3) Running in BDP mode (using https, get roles from headers)
      	# Use hard-coded security principal
	 	use.hardcoded.authenticated.principal: false

		# We are running "prod mode" locally, get the CN info from the PKI cert
		# On the BDP, we run "prod mode" to get CN info from the header
		ssl.security.mode: header

		server:
			port: 8443
			ssl:
				key-store: backend/src/main/dev_resources/myKeystore.jks
				key-store-password: changeit
				key-store-type: JKS
				client-auth: need
				trust-store: backend/src/main/dev_resources/myTruststore.jks
				trust-store-password: changeit
				trust-store-type: JKS
				enabled: true
				
		# Secure the cookies
		server.servlet.session.cookie.secure: true
		server.servlet.session.cookie.http-only: true
 
 
 
Procedure
---------
 1. Import your client p12 certificate into your firefox browser
 
 2. Open your angularApp1 project in Intellij


 3. Update maven so that it does *NOT* include the application.yaml from backend/src/main/resources when using the buildRda profile
    a. Edit the backend/pom.xml
	
	b. Add this profiles section to the end *BUT INSIDE THE CLOSING </project TAG*
	
		  <profiles>
			<profile>
			  <!-- When running the buildRda profile, exclude the backend/src/main/resources/application.yaml from the JAR file -->
			  <id>buildRda</id>
			  <activation>
				<activeByDefault>false</activeByDefault>
			  </activation>
			  <build>
				<resources>
				  <resource>
					<filtering>true</filtering>
					<directory>src/main/resources</directory>
					<excludes>
					  <exclude>application.yaml</exclude>
					</excludes>
				  </resource>
				</resources>
			  </build>
			</profile>

			<profile>
			  <!-- When running any other build profile, include *ALL* files from the backend/src/main/resources into the JAR file -->
			  <id>defaultProfile</id>
			  <activation>
				<activeByDefault>true</activeByDefault>
			  </activation>
			  <build>
				<resources>
				  <resource>
					<directory>src/main/resources</directory>
					<filtering>true</filtering>
				  </resource>
				</resources>
			  </build>
			</profile>
		  </profiles>


    When finished, your backend/pom.xml should look something like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>backend</artifactId>
		  <version>1.0-SNAPSHOT</version>

		  <name>backend</name>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>

		  <dependencyManagement>
			<!-- Set Spring Boot Dependencies -->
			<dependencies>
			  <dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>2.2.1.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			  </dependency>
			</dependencies>
		  </dependencyManagement>

		  <dependencies>

			<dependency>
			  <!-- Include the front-end as a dependency so the front-end is compiled *BEFORE* the backend is compiled -->
			  <groupId>com.lessons</groupId>
			  <artifactId>frontend</artifactId>
			  <version>${project.version}</version>
			</dependency>

			<dependency>
			  <!-- Spring Boot Web -->
			  <groupId>org.springframework.boot</groupId>
			  <artifactId>spring-boot-starter-web</artifactId>

			  <exclusions>
				<exclusion>
				  <!-- Remove Tomcat from Spring Boot -->
				  <groupId>org.springframework.boot</groupId>
				  <artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>

				<exclusion>
				  <!-- Remove logging from spring as we will use logback -->
				  <groupId>org.springframework.boot</groupId>
				  <artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			  </exclusions>
			</dependency>

			<dependency>
			  <!-- Add Dependency for the Undertow App Server -->
			  <groupId>org.springframework.boot</groupId>
			  <artifactId>spring-boot-starter-undertow</artifactId>

			  <exclusions>
				<exclusion>
				  <!-- Remove logging from undertow as we will use logback -->
				  <groupId>org.springframework.boot</groupId>
				  <artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			  </exclusions>
			</dependency>

			<dependency>
			  <!-- Send logging from Java Common Logging to SLF4J -->
			  <groupId>org.slf4j</groupId>
			  <artifactId>jcl-over-slf4j</artifactId>
			  <version>1.7.5</version>
			</dependency>

			<dependency>
			  <!-- SLF4J will use Logback-classic as its logging implementation -->
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
			</dependency>

			<dependency>
			  <groupId>org.springframework</groupId>
			  <artifactId>spring-jdbc</artifactId>
			  <version>5.2.1.RELEASE</version>
			</dependency>

			<dependency>
			  <groupId>org.springframework</groupId>
			  <artifactId>spring-web</artifactId>
			  <version>5.2.1.RELEASE</version>
			</dependency>

			<dependency>
			  <!-- Implementation for converting objects to JSON -->
			  <groupId>com.fasterxml.jackson.core</groupId>
			  <artifactId>jackson-databind</artifactId>
			  <version>2.9.3</version>
			</dependency>

			<dependency>
			  <groupId>org.flywaydb</groupId>
			  <artifactId>flyway-core</artifactId>
			  <version>5.2.4</version>
			</dependency>

			<dependency>
			  <!-- Database Driver that Flyway will use to talk to the database -->
			  <groupId>org.postgresql</groupId>
			  <artifactId>postgresql</artifactId>
			  <version>42.1.4</version>
			</dependency>

			<dependency>
			  <!-- Hikari Data Source / JDBC Connection Pool -->
			  <groupId>com.zaxxer</groupId>
			  <artifactId>HikariCP</artifactId>
			  <version>2.6.0</version>
			</dependency>

			<dependency>
			  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.12</version>
			  <scope>test</scope>
			</dependency>
		  </dependencies>

		  <build>

			<plugins>
			  <plugin>
				<!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
					 Run this command to generate the runnable Spring Boot Jar
						mvn clean package  *or*
						mvn clean package spring-boot:repackage
				 -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.2.1.RELEASE</version>
				<configuration>
				  <addResources>true</addResources>
				</configuration>

				<executions>
				  <execution>
					<goals>
					  <goal>repackage</goal>
					</goals>
					<configuration>
					  <classifier>exec</classifier>
					</configuration>
				  </execution>
				</executions>

			  </plugin>

			  <plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>5.2.4</version>

				<configuration>
				  <!-- Set the postgres credentials when running mvn flyway:migrate from command-line -->
				  <user>app1_user</user>
				  <password>secret</password>
				  <url>jdbc:postgresql://localhost:5432/app1_db</url>
				  <schemas>app1_db</schemas>
				</configuration>
			  </plugin>
			</plugins>

		  </build>

		  <profiles>
			<profile>
			  <!-- When running the buildRda profile, exclude the backend/src/main/resources/application.yaml from the JAR file -->
			  <id>buildRda</id>
			  <activation>
				<activeByDefault>false</activeByDefault>
			  </activation>
			  <build>
				<resources>
				  <resource>
					<filtering>true</filtering>
					<directory>src/main/resources</directory>
					<excludes>
					  <exclude>application.yaml</exclude>
					</excludes>
				  </resource>
				</resources>
			  </build>
			</profile>

			<profile>
			  <!-- When running any other build profile, include *ALL* files from the backend/src/main/resources into the JAR file -->
			  <id>defaultProfile</id>
			  <activation>
				<activeByDefault>true</activeByDefault>
			  </activation>
			  <build>
				<resources>
				  <resource>
					<directory>src/main/resources</directory>
					<filtering>true</filtering>
				  </resource>
				</resources>
			  </build>
			</profile>
		  </profiles>

		</project>


 4. Setup a directory to hold dev keystores
    a. Create your own myKeystore.jks and myTruststore.jks using the procedures in learnSSL
	
    b. Create this directory:  backend/src/main/dev_resources
	
    c. Copy the myKeystore.jks and myTrustStore.jks to your new dev_resources directory
       unix> cp /tmp/server_cert/myKeystore.jks ~/intellijProjects/angularApp1/backend/src/main/dev_resources/
       unix> cp /tmp/server_cert/myTruststore.jks ~/intellijProjects/angularApp1/backend/src/main/dev_resources/
       -- Now, the dev_resources/ directory holds the two JKS files
  

 5. Update your application.yaml so that *incoming* calls require PKI authentication
    and use your recently generated myKeystore.jks and myTruststore.jks files

    a. Edit your backend/src/main/resources/application.yaml


    b. Change the context-path to slash  (because the bdp will have /app1 in nginx to get to this url)
	      server.servlet.context-path: /
		 
		 
    c. Add a "prod" spring profile that listens on https://localhost:8443/app1 
	    
	   Add the prod profile section to the the *END* of your application.yaml 
		
		#######################################
		# Default Profile
		#######################################
		
		# Use hard-coded security principal
		use.hardcoded.authenticated.principal: true

		# Do not use SSL
		server.ssl.enabled: false
         
		 
		 
		---
		#######################################
		# P R O D        P R O F I L E
		#######################################
		spring.profiles: prod

  		# Get principal from the PKI certificate
		use.hardcoded.authenticated.principal: false
		
		# We are running "prod mode" locally, get the CN info from the PKI cert
		# On the BDP, we run "prod mode" to get CN info from the header
		ssl.security.mode: pki

		server:
			  port: 8443
			  ssl:
					key-store: backend/src/main/dev_resources/myKeystore.jks
					key-store-password: changeit
					key-store-type: JKS
					client-auth: need
					trust-store: backend/src/main/dev_resources/myTruststore.jks
					trust-store-password: changeit
					trust-store-type: JKS
					enabled: true

		# Secure the cookies
		server.servlet.session.cookie.secure: true
		server.servlet.session.cookie.http-only: true




 6. Add the Spring Security dependencies to your backend/pom.xml file
    NOTE:  Make sure the version used here matches your other spring versions
	
        <!-- Add the dependencies for Spring-Security -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>5.2.4.RELEASE</version>
        </dependency>


    Also, add common-lang3 (StringUtils) if you have not already added it
        <dependency>
            <!-- StringUtils Dependency -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>
   
    
	Right-click on backend/pom.xml -> Maven -> Reload Project


 7. Add this package:  security
    a. In Intellij, backend/src/main/java/com/lessons/ -> New Package
       Package Name:  com.lessons.security


 8. Add this java class:  UserInfo
    a. Right-click on security -> New Java Class
       Class Name:  UserInfo

    b Copy this to your new class

            package com.lessons.security;


            import org.apache.commons.lang3.StringUtils;
            import org.springframework.security.core.GrantedAuthority;
            import org.springframework.security.core.userdetails.UserDetails;

            import java.io.Serializable;
            import java.util.Collection;
            import java.util.Comparator;
            import java.util.List;
            import java.util.stream.Collectors;


            public class UserInfo implements UserDetails, Serializable{

                private String usernameUID;                           // The part of the Cn=.... that holds this user's client name (from PKI client cert)
                private String usernameDN;                            // The entire DN string    (from the PKI client cert)
                private List<GrantedAuthority> grantedAuthorities;    // List of roles for this user (found in the database)
                private Integer id;                                   // Holds the user's ID in the database

                public String getPassword() {
                    // Must implement this method in order to implement the UserDetails interface
                    // NOTE:  There is no password as we are using PKI authentication
                    return null;
                }

                public String getUsername() {
                    return this.usernameUID;
                }

                public boolean isAccountNonExpired() {
                    // Must implement this method in order to implement the UserDetails interface
                    return true;
                }

                public boolean isAccountNonLocked() {
                    // Must implement this method in order to implement the UserDetails interface
                    return true;
                }

                public boolean isCredentialsNonExpired() {
                    // Must implement this method in order to implement the UserDetails interface
                    return true;
                }

                public boolean isEnabled() {
                    // Must implement this method in order to implement the UserDetails interface
                    return true;
                }


                /**
                 * @return an array of GrantedAuthority objects for this user
                 */
                public Collection<? extends GrantedAuthority> getAuthorities() {
                    // Must implement this method in order to implement the UserDetails interface
                    return this.grantedAuthorities;
                }


                /**
                 * @return an array of Strings (for this user)
                 */
                public List<String> getRoles() {
                    return grantedAuthorities.stream().map(auth -> auth.toString()).collect(Collectors.toList());
                }


                public String getUsernameDN() {
                    return this.usernameDN;
                }

                public List<GrantedAuthority> getGrantedAuthorities() {
                    return grantedAuthorities;
                }

                public void setGrantedAuthorities(List<GrantedAuthority> grantedAuthorities) {
                    this.grantedAuthorities = grantedAuthorities;
                }

                private static class GrantedAuthorityComparator implements Comparator<GrantedAuthority> {
                    public int compare(GrantedAuthority object1, GrantedAuthority object2) {
                        return object1.getAuthority().compareTo(object2.getAuthority());
                    }
                }

                public Integer getId() {
                    return id;
                }

                public String toString() {
                    return ("Roles=" + StringUtils.join(this.grantedAuthorities, ",") +
                            " UID=" + this.usernameUID +
                            " DN=" + this.usernameDN);
                }

                public UserInfo withId(Integer id) {
                    this.id = id;
                    return this;
                }

                public UserInfo withUsernameUID(String usernameUID) {
                    this.usernameUID = usernameUID;
                    return this;
                }

                public UserInfo withUsernameDn(String usernameDN) {
                    this.usernameDN = usernameDN;
                    return this;
                }

                public UserInfo withGrantedAuthorities(List<GrantedAuthority> grantedAuthorities) {
                    this.grantedAuthorities = grantedAuthorities;
                    return this;
                }

            }


 9. Add this java class:  MyAuthenticationManager
    a. Right-click on security -> New Java Class
       Class Name:  MyAuthenticationManager

	b. Copy this to your new class
		package com.lessons.security;

		import org.apache.commons.lang3.StringUtils;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.beans.factory.annotation.Value;
		import org.springframework.security.authentication.AuthenticationManager;
		import org.springframework.security.core.Authentication;
		import org.springframework.security.core.AuthenticationException;
		import org.springframework.security.core.GrantedAuthority;
		import org.springframework.security.core.authority.SimpleGrantedAuthority;
		import org.springframework.security.core.context.SecurityContextHolder;
		import org.springframework.security.core.userdetails.UserDetails;
		import org.springframework.security.core.userdetails.UsernameNotFoundException;
		import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
		import org.springframework.stereotype.Component;

		import javax.annotation.Resource;
		import javax.servlet.http.HttpServletRequest;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.regex.Matcher;
		import java.util.regex.Pattern;

		@Component("com.lessons.security.MyAuthenticationManager")
		public class MyAuthenticationManager implements AuthenticationManager {
			private static final Logger logger = LoggerFactory.getLogger(MyAuthenticationManager.class);

			private static final Pattern patExtractCN = Pattern.compile("cn=(.*?)(?:,|/|\\z)", Pattern.CASE_INSENSITIVE);
			private static final Pattern patMatchRole = Pattern.compile("ROLE:(.*?)(?:;|\\z)", Pattern.CASE_INSENSITIVE);

			@Resource
			private HttpServletRequest httpServletRequest;

			@Value("${use.hardcoded.authenticated.principal}")
			private boolean useHardcodedAuthenticatedPrincipal;

			@Override
			public Authentication authenticate(Authentication authentication) throws AuthenticationException {
				logger.debug("authenticate() started.   authentication={}", authentication);

				if (SecurityContextHolder.getContext().getAuthentication() != null) {
					// Users is already authenticated, so do nothing
					return  SecurityContextHolder.getContext().getAuthentication();
				}

				UserDetails userDetails;

				if (! useHardcodedAuthenticatedPrincipal) {
					// We are in production mode and we are getting information from headers
					// -- So get the roles from a real source -- e.g., ActiveDirectory, Database, or BDP headers
					userDetails = loadUserDetailsFromRealSource(authentication);
				}
				else {
					// Get the hard-coded bogus user details
					userDetails = loadUserDetailsForDevelopment(authentication);
				}

				// Return an AuthenticationToken object
				PreAuthenticatedAuthenticationToken preapproved = new PreAuthenticatedAuthenticationToken(userDetails, null, userDetails.getAuthorities());
				preapproved.setAuthenticated(true);
				logger.debug("authenticate() finished.  preapproved={}", preapproved.toString());
				return preapproved;
			}


			private UserDetails loadUserDetailsFromRealSource(Authentication authentication) {
				logger.debug("loadUserDetailsFromRealSource() started authentication={}", authentication);
				String userDN;
				PreAuthenticatedAuthenticationToken token;

				if (authentication.getPrincipal() instanceof String) {
					userDN = authentication.getPrincipal().toString();
				} else if (authentication.getPrincipal() instanceof UserInfo) {
					return (UserDetails) authentication.getPrincipal();
				} else {
					token = ( PreAuthenticatedAuthenticationToken ) authentication.getPrincipal();
					userDN = token.getName();
				}

				logger.debug("userDN={}", userDN);

				// Get the user's UID from the CN=<...>
				try {
					String userUID = getCnValueFromLongDnString(userDN);

					// Get the list of roles from the header
					List<GrantedAuthority> grantedRoleAuthorities = getAuthoritiesFromHeaderValue();

					if ((grantedRoleAuthorities != null) && (grantedRoleAuthorities.size() > 0)) {
						// This user has atleast one role found in my authorizatoin service
						// NOTE:  All granted authorities must start with the "ROLE_" prefix
						grantedRoleAuthorities.add(new SimpleGrantedAuthority("ROLE_USER_FOUND_IN_VALID_LIST_OF_USERS"));
					}
					else {
						// This user has no roles so throw a runtime exception
						throw new RuntimeException("No roles were found for this user: " + userUID);
					}

					logger.info("{} successfully logged-in.", userUID);

					// User is about to login
					// -- This would be the place to add/update a database record indicating that the user logged-in

					// Get the user's userid from the database
					int userId = 25;

					logger.debug("loadUserDetailsFromRealSource() about to return new UserInfo object");

					// We *MUST* set the database ID in the UserInfo object here
					return new UserInfo()
							.withId(userId)
							.withUsernameDn(userDN)
							.withUsernameUID(userUID)
							.withGrantedAuthorities(grantedRoleAuthorities);
				} catch (Exception e) {
					throw new UsernameNotFoundException("Exception raised in loadUserDetailsFromRealSource():  This user will definitely not login", e);
				}
			}

			/**
			 * header(X-BDP-User) holds -AUTH:FOUO;AUTH:U;AUTH:USA;GROUP:BDPUSERS;NAME:bdptest_u_fouo;ROLE:ANALYTIC_RUNNER;ROLE:BDP_ADMIN;ROLE:CITE_USER;ROLE:DATA_ADMIN;ROLE:KIBANA_ADMIN;ROLE:LOGS;ROLE:METRICS;ROLE:OWF_ADMIN;ROLE:OWF_USER;ROLE:UNITY_ADMIN<---
			 * Pull every ROLE:role name entry out of the header and insert it into a list of GrantedAuthority objects
			 * @return List of GrantedAuthority objects
			 */
			private List<GrantedAuthority> getAuthoritiesFromHeaderValue() {
				List<GrantedAuthority> grantedRoles = new ArrayList<>();

				// header(X-BDP-User) holds -AUTH:FOUO;AUTH:U;AUTH:USA;GROUP:BDPUSERS;NAME:bdptest_u_fouo;ROLE:ANALYTIC_RUNNER;ROLE:BDP_ADMIN;ROLE:CITE_USER;ROLE:DATA_ADMIN;ROLE:KIBANA_ADMIN;ROLE:LOGS;ROLE:METRICS;ROLE:OWF_ADMIN;ROLE:OWF_USER;ROLE:UNITY_ADMIN<---
				String xbdpUserHeaderValue = httpServletRequest.getHeader("X-BDP-User");
				logger.debug("In getAuthoritiesFromHeaderValue():  header-->{}<--", xbdpUserHeaderValue);
				if (StringUtils.isEmpty(xbdpUserHeaderValue)) {
					// The header is empty -- so return an empty list
					logger.warn("Warning in getAuthoritiesFromHeaderValue():  The X-BDP-User header had nothing in it.  This should never happen.");
					return grantedRoles;
				}

				// Pull every string that starts with ROLE: and add it to the list
				Matcher matcher = patMatchRole.matcher(xbdpUserHeaderValue);
				while (matcher.find()) {
					String roleName = matcher.group(1);
					logger.debug("Found a role:  roleName={}", roleName);
					String roleNameWithPrefix = "ROLE_" + roleName;
					grantedRoles.add(new SimpleGrantedAuthority(roleNameWithPrefix));
				}

				logger.debug("getAuthoritiesFromHeaderValue() returns -->{}<--", StringUtils.join(grantedRoles, ","));
				return grantedRoles;
			}


			public UserDetails loadUserDetailsForDevelopment(Authentication authentication) {

				final String userUID = "my_test_user";
				final String userDN = "3.2.12.144549.1.9.1=#161760312e646576,CN=my_test_user,OU=Hosts,O=ZZTop.Org,C=ZZ";

				// Create a list of granted authorities
				List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_SUPERUSER"));
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER_FOUND_IN_VALID_LIST_OF_USERS"));

				// Create a bogus UserInfo object
				// NOTE:  I am hard-coding the user's userid=25
				UserInfo anonymousUserInfo = new UserInfo()
						.withId(25)
						.withUsernameUID(userUID)
						.withUsernameDn(userDN)
						.withGrantedAuthorities(grantedAuthorities);
				return anonymousUserInfo;
			}


			private static String getCnValueFromLongDnString(String userDN) {
				logger.debug("getCnValueFromLongDnString()  userDN={}", userDN);
				String cnValue = null;
				// Use the regular expression pattern to getByUserId the value part of "CN=value"
				Matcher matcher = patExtractCN.matcher(userDN);
				if (matcher.find()) {
					cnValue = matcher.group(1);
				}

				logger.debug("getCnValueFromLongDnString() returns -->{}<--", cnValue);
				return cnValue;
			}

		}




10. Add this java class:  MyRequestHeaderAuthFilter
    a. Right-click on security -> New Java Class
       Class Name:  MyRequestHeaderAuthFilter

    b. Copy this to your new class

		package com.lessons.security;

		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.beans.factory.annotation.Value;
		import org.springframework.security.web.authentication.preauth.RequestHeaderAuthenticationFilter;
		import org.springframework.stereotype.Component;
		import javax.annotation.PostConstruct;
		import javax.annotation.Resource;
		import javax.servlet.http.HttpServletRequest;
		import java.util.Enumeration;


		@Component("com.lessons.security.RequestHeaderAuthFilter")
		public class MyRequestHeaderAuthFilter extends RequestHeaderAuthenticationFilter
		{
			private static final Logger logger = LoggerFactory.getLogger(MyRequestHeaderAuthFilter.class);

			@Resource
			private MyAuthenticationManager myAuthenticationManager;

			@Value("${use.hardcoded.authenticated.principal}")
			private boolean useHardcodedAuthenticatedPrincipal;

			@PostConstruct
			public void init() {
				this.setAuthenticationManager(myAuthenticationManager);
			}


			/**************************************************************
			 * getPreAuthenticatedPrincipal()
			 *
			 * This is called when a request is made, the returned object identifies the
			 * user and will either be {@literal null} or a String.
			 *
			 * This method will throw an exception if
			 * exceptionIfHeaderMissing is set to true (default) and the required header is missing.
			 **************************************************************/
			@Override
			protected Object getPreAuthenticatedPrincipal(HttpServletRequest request)
			{
				logger.debug("getPreAuthenticatedPrincipal() called");

				// Get the principal from the header
				String userDnFromHeader = request.getHeader("SSL_CLIENT_S_DN");
				logger.debug("userDnFromHeader from header -->{}<---", userDnFromHeader);

				if (userDnFromHeader == null) {

					if (useHardcodedAuthenticatedPrincipal) {
						// No header was found, but I am in dev mode or "local prod" mode.  So, set a hard-coded user name
						logger.debug("No header was found, so husing hard-dcoded header 'Bogus_user'");
						userDnFromHeader = "Bogus_user";
					}
				}

				// If this method returns null, then the user will see a 403 Forbidden Message
				logger.debug("getPreAuthenticatedPrincipal() returns -->{}<--", userDnFromHeader);
				return userDnFromHeader;
			}

			/**************************************************************
			 * logHeaders()
			 **************************************************************/
			private void logHeaders(HttpServletRequest aRequest)
			{
				if (logger.isDebugEnabled())
				{
					Enumeration<String> enumHeaders = aRequest.getHeaderNames();
					while (enumHeaders.hasMoreElements()) {
						String sHeaderName = enumHeaders.nextElement();
						String sHeaderValue = aRequest.getHeader(sHeaderName);
						logger.debug("header({}) holds -->{}<---", sHeaderName, sHeaderValue);
					}
				}
			}

		}

11. Add this java class:  SubjectX509PrincipalExtractor
    a. Right-click on security -> New Java Class
       Class Name:  SubjectX509PrincipalExtractor

    b. Copy this to your new class

            package com.lessons.security;

            import org.springframework.security.web.authentication.preauth.x509.X509PrincipalExtractor;
            import org.springframework.stereotype.Component;

            import java.security.cert.X509Certificate;


            /**
             * Extractor for the principal from the certificate.
             */
            @Component("com.lessons.security.SubjectX509PrincipalExtractor")
            public class SubjectX509PrincipalExtractor implements X509PrincipalExtractor
            {

                public Object extractPrincipal(X509Certificate clientCertificate)
                {
                    // Get the Distinguished Name (DN) from the cert
                    return clientCertificate.getSubjectX500Principal().getName();
                }
            }



12. Add this java class:  SpringSecurityConfig
    a. Right-click on security -> New Java Class
       Class Name:  SpringSecurityConfig

    b. Copy this to your new class
		package com.lessons.security;

		import org.apache.commons.lang3.StringUtils;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.beans.factory.annotation.Value;
		import org.springframework.security.authentication.AuthenticationManager;
		import org.springframework.security.core.Authentication;
		import org.springframework.security.core.AuthenticationException;
		import org.springframework.security.core.GrantedAuthority;
		import org.springframework.security.core.authority.SimpleGrantedAuthority;
		import org.springframework.security.core.context.SecurityContextHolder;
		import org.springframework.security.core.userdetails.UserDetails;
		import org.springframework.security.core.userdetails.UsernameNotFoundException;
		import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
		import org.springframework.stereotype.Component;

		import javax.annotation.Resource;
		import javax.servlet.http.HttpServletRequest;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.regex.Matcher;
		import java.util.regex.Pattern;

		@Component("com.lessons.security.MyAuthenticationManager")
		public class MyAuthenticationManager implements AuthenticationManager {
			private static final Logger logger = LoggerFactory.getLogger(MyAuthenticationManager.class);

			private static final Pattern patExtractCN = Pattern.compile("cn=(.*?)(?:,|/|\\z)", Pattern.CASE_INSENSITIVE);
			private static final Pattern patMatchRole = Pattern.compile("ROLE:(.*?)(?:;|\\z)", Pattern.CASE_INSENSITIVE);

			@Resource
			private HttpServletRequest httpServletRequest;

			@Value("${use.hardcoded.authenticated.principal}")
			private boolean useHardcodedAuthenticatedPrincipal;

			@Override
			public Authentication authenticate(Authentication authentication) throws AuthenticationException {
				logger.debug("authenticate() started.   authentication={}", authentication);

				if (SecurityContextHolder.getContext().getAuthentication() != null) {
					// Users is already authenticated, so do nothing
					return  SecurityContextHolder.getContext().getAuthentication();
				}

				UserDetails userDetails;

				if (! useHardcodedAuthenticatedPrincipal) {
					// We are in production mode and we are getting information from headers
					// -- So get the roles from a real source -- e.g., ActiveDirectory, Database, or BDP headers
					userDetails = loadUserDetailsFromRealSource(authentication);
				}
				else {
					// Get the hard-coded bogus user details
					userDetails = loadUserDetailsForDevelopment(authentication);
				}

				// Return an AuthenticationToken object
				PreAuthenticatedAuthenticationToken preapproved = new PreAuthenticatedAuthenticationToken(userDetails, null, userDetails.getAuthorities());
				preapproved.setAuthenticated(true);
				logger.debug("authenticate() finished.  preapproved={}", preapproved.toString());
				return preapproved;
			}


			private UserDetails loadUserDetailsFromRealSource(Authentication authentication) {
				logger.debug("loadUserDetailsFromRealSource() started authentication={}", authentication);
				String userDN;
				PreAuthenticatedAuthenticationToken token;

				if (authentication.getPrincipal() instanceof String) {
					userDN = authentication.getPrincipal().toString();
				} else if (authentication.getPrincipal() instanceof UserInfo) {
					return (UserDetails) authentication.getPrincipal();
				} else {
					token = ( PreAuthenticatedAuthenticationToken ) authentication.getPrincipal();
					userDN = token.getName();
				}

				logger.debug("userDN={}", userDN);

				// Get the user's UID from the CN=<...>
				try {
					String userUID = getCnValueFromLongDnString(userDN);

					// Get the list of roles from the header
					List<GrantedAuthority> grantedRoleAuthorities = getAuthoritiesFromHeaderValue();

					if ((grantedRoleAuthorities != null) && (grantedRoleAuthorities.size() > 0)) {
						// This user has atleast one role found in my authorizatoin service
						// NOTE:  All granted authorities must start with the "ROLE_" prefix
						grantedRoleAuthorities.add(new SimpleGrantedAuthority("ROLE_USER_FOUND_IN_VALID_LIST_OF_USERS"));
					}
					else {
						// This user has no roles so throw a runtime exception
						throw new RuntimeException("No roles were found for this user: " + userUID);
					}

					logger.info("{} successfully logged-in.", userUID);

					// User is about to login
					// -- This would be the place to add/update a database record indicating that the user logged-in

					// Get the user's userid from the database
					int userId = 25;

					logger.debug("loadUserDetailsFromRealSource() about to return new UserInfo object");

					// We *MUST* set the database ID in the UserInfo object here
					return new UserInfo()
							.withId(userId)
							.withUsernameDn(userDN)
							.withUsernameUID(userUID)
							.withGrantedAuthorities(grantedRoleAuthorities);
				} catch (Exception e) {
					throw new UsernameNotFoundException("Exception raised in loadUserDetailsFromRealSource():  This user will definitely not login", e);
				}
			}

			/**
			 * header(X-BDP-User) holds -AUTH:FOUO;AUTH:U;AUTH:USA;GROUP:BDPUSERS;NAME:bdptest_u_fouo;ROLE:ANALYTIC_RUNNER;ROLE:BDP_ADMIN;ROLE:CITE_USER;ROLE:DATA_ADMIN;ROLE:KIBANA_ADMIN;ROLE:LOGS;ROLE:METRICS;ROLE:OWF_ADMIN;ROLE:OWF_USER;ROLE:UNITY_ADMIN<---
			 * Pull every ROLE:role name entry out of the header and insert it into a list of GrantedAuthority objects
			 * @return List of GrantedAuthority objects
			 */
			private List<GrantedAuthority> getAuthoritiesFromHeaderValue() {
				List<GrantedAuthority> grantedRoles = new ArrayList<>();

				// header(X-BDP-User) holds -AUTH:FOUO;AUTH:U;AUTH:USA;GROUP:BDPUSERS;NAME:bdptest_u_fouo;ROLE:ANALYTIC_RUNNER;ROLE:BDP_ADMIN;ROLE:CITE_USER;ROLE:DATA_ADMIN;ROLE:KIBANA_ADMIN;ROLE:LOGS;ROLE:METRICS;ROLE:OWF_ADMIN;ROLE:OWF_USER;ROLE:UNITY_ADMIN<---
				String xbdpUserHeaderValue = httpServletRequest.getHeader("X-BDP-User");
				logger.debug("In getAuthoritiesFromHeaderValue():  header-->{}<--", xbdpUserHeaderValue);
				if (StringUtils.isEmpty(xbdpUserHeaderValue)) {
					// The header is empty -- so return an empty list
					logger.warn("Warning in getAuthoritiesFromHeaderValue():  The X-BDP-User header had nothing in it.  This should never happen.");
					return grantedRoles;
				}

				// Pull every string that starts with ROLE: and add it to the list
				Matcher matcher = patMatchRole.matcher(xbdpUserHeaderValue);
				while (matcher.find()) {
					String roleName = matcher.group(1);
					logger.debug("Found a role:  roleName={}", roleName);
					String roleNameWithPrefix = "ROLE_" + roleName;
					grantedRoles.add(new SimpleGrantedAuthority(roleNameWithPrefix));
				}

				logger.debug("getAuthoritiesFromHeaderValue() returns -->{}<--", StringUtils.join(grantedRoles, ","));
				return grantedRoles;
			}


			public UserDetails loadUserDetailsForDevelopment(Authentication authentication) {

				String userUID = "my_test_user";
				String userDN = "3.2.12.144549.1.9.1=#161760312e646576,CN=my_test_user,OU=Hosts,O=ZZTop.Org,C=ZZ";

				if ((authentication != null) && (authentication.getPrincipal() != null)) {
					userDN = authentication.getPrincipal().toString();
					userUID = getCnValueFromLongDnString(userDN);
				}

				// Create a list of granted authorities
				List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_SUPERUSER"));
				grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER_FOUND_IN_VALID_LIST_OF_USERS"));

				// Create a bogus UserInfo object
				// NOTE:  I am hard-coding the user's userid=25
				UserInfo anonymousUserInfo = new UserInfo()
						.withId(25)
						.withUsernameUID(userUID)
						.withUsernameDn(userDN)
						.withGrantedAuthorities(grantedAuthorities);
				return anonymousUserInfo;
			}


			private static String getCnValueFromLongDnString(String userDN) {
				logger.debug("getCnValueFromLongDnString()  userDN={}", userDN);
				String cnValue = null;
				// Use the regular expression pattern to getByUserId the value part of "CN=value"
				Matcher matcher = patExtractCN.matcher(userDN);
				if (matcher.find()) {
					cnValue = matcher.group(1);
				}

				logger.debug("getCnValueFromLongDnString() returns -->{}<--", cnValue);
				return cnValue;
			}

		}




13. Update the HomeController.getDateTime() REST call so that it has the @PreAuthorization annotation
    a. Add this to the getDate() method:
			@PreAuthorize("hasRole('SUPERUSER')")
		   
	   Or, if you want to check multiple roles
	        @PreAuthorize("hasAnyRole('SUPERUSER', 'REGULAR_USER')")
		   
		   
		   
	   When finished, your HomeController.getDateTime() looks like this:
			@RequestMapping(value = "/api/time", method=RequestMethod.GET)
			@PreAuthorize("hasRole('SUPERUSER')")
			public ResponseEntity<?> getDateTime() {
				logger.debug("getDateTime() started.");

				DateFormat dateFormat = new SimpleDateFormat("yyyy/mm/dd HH:mm:ss");
				Date date = new Date();
				String formattedDateTime = dateFormat.format(date);

				// Return the date/time string as plain text
				return ResponseEntity
							.status(HttpStatus.OK)
							.contentType(MediaType.TEXT_PLAIN)
							.body(formattedDateTime);
			}	   
	   


14. Create a backend (prod) mode
    a. Pull Run / Edit Configurations
    b. Select Application -> Backend
    c. Press Control-D to duplicate
	d. In the VM Options, add this:
           -Dspring.profiles.active=prod
    d. Change the name to backend (prod) 
	
	
15 Run your backend in "prod" profile mode
    a. Pull Run / Edit Configurations
    b. Select Application -> Backend (prod)


16. Connect to an *authorized* REST endpoint using PKI authentication
    a. Open a browser (that you have imported your client cert into)
    b. Go to https://localhost:8443/app1/api/time
       -- Your authorizations should let you see this


17. Connect to your webapp using PKI authentication
    a. Open a browser (that you have imported your client cert into) 
    b. Go to https://localhost:8443/app1
	


How to Debug in local prod mode (approach 1: dev compile)
---------------------------------------------------------
  1. Change the environment.ts so that baseurl: '.'
  
  2. Compile front-end jar
     unix> cd ~/intellijProjects/angularApp1/frontend
	 unix> mvn clean install
	 
  3. Run the backend (prod)
  
  4. Connect to https://localhost:8443/app1



How to Debug in local prod mode (approach 2: prod compile)
----------------------------------------------------------
  1. Compile front-end jar in prod mode
     unix> cd ~/intellijProjects/angularApp1/frontend
	 unix> mvn clean install -Pprod
	 
  2. Run the backend (prod)
     unix> java -Dspring.profiles.active=prod -jar backend/target/backend-1.0-SNAPSHOT-exec.jar 
	 
  3. Open a browser (that has a pki client cert installed
     Go to https://localhost:8443/app1
 
