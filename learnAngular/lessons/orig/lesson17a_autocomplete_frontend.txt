Lesson:  Add an AutoComplete textbox to the Dashboard
-----------------------------------------------------
Problem:  As the user starts typing-in company names, we want to show up to 5 matching names in a dropdown


Procedure
---------
 1. Add the MatAutocompleteModule to the app.module.ts
    a. Edit app.module.ts
	b. Add this to the imports: [ ] section
		MatAutocompleteModule,
		  
	c. Add this to the top:
		import {MatAutocompleteModule} from "@angular/material/autocomplete";
	
	
 2. Add the AutoComplete textbox to the top right of the dashboard page
    a. Edit the dashboard.component.html
	b. Change this:
		  <!-- Right Side of the Top Row -->
		  <div fxFlex fxLayoutAlign="end center">

		  </div>	
		  
	   To this:
		  <!-- Right Side of the Top Row -->
		  <div fxFlex fxLayoutAlign="end center">

			<mat-form-field>
			  <!-- Create the textbox that is bound to the auto complete -->
			  <input type="text" placeholder="Company Name" matInput
								[formControl]="this.companyNameCtrl"
								[matAutocomplete]="autocomplete1">

			  <!-- Create the popup autocomplete entries -->
			  <mat-autocomplete #autocomplete1="matAutocomplete">
				<mat-option *ngFor="let name of this.matchingNames | async" [value]="name">
				  {{name}}
				</mat-option>
			  </mat-autocomplete>
			</mat-form-field>

		  </div>
	  
	   
 3. Add an elasticsesarch Service to the frontend
    a. Create the elasticsearch.service
	   unix> cd ~/intellijProjects/angularApp1/frontend
  	   unix> ng generate service services/elasticsearch

    b. Replace its contents wiht a method that return hard-coded observables
		import { Injectable } from '@angular/core';
		import {Observable, of} from "rxjs";

		@Injectable({
		  providedIn: 'root'
		})
		export class ElasticsearchService {

		  constructor() { }


		  public getMatchingCompanyNames(name: string, totalResultsToShow: number): Observable<string[]> {
			if (name == '') {
			  // The searchbox is empty so return an empty list (and do not run a search)
			  return of( [] );
			}
			else if (name.startsWith('a')) {
			  // The rnd number is even

			  // Return hard-coded observable with 3 strings that start with A
			  return of(["Amazon", "Apple", "American Airlines"] );
			}
			else if (name.startsWith('b')) {
			  // The rnd number is odd

			  // Return hard-coded observable with 3 strings that start with B
			  return of(["Best Buy", "Boeing", "Bed, Bath, and Beyond"] );
			}
			else {
			  return of( [] );
			}
		  }

		}


 4. Add the remaining elements to the dashboard.component.ts
    a. Add the matchingNames and companyNameCtrl
	  	public matchingNames: Observable<string[]>;
  		public companyNameCtrl:  FormControl = new FormControl();
    
	b. Inject your ElasticsearchService by add it to your constructor
		  constructor(private breakpointObserver: BreakpointObserver,
					  private elasticsearchService: ElasticsearchService) { }
		
    c. Add this to your ngOnInit() method:
			this.matchingNames = this.companyNameCtrl.valueChanges
			  .pipe(
				startWith(''),
				debounceTime(500),             // Wait for 500ms pause in events
				distinctUntilChanged(),        // Ignore if next term is same as previous
				switchMap(enteredName => {
				  // NOTE:  Use switchMap for its cancelling effect:  On each observable, the previous observable is cancelled.
				  return this.filterResults(enteredName);
				})
			  );
	
	d. Add this private method
		  private filterResults(name: string): Observable<string[]> {

			// Invoke the REST call 
			return this.elasticsearchService.getMatchingCompanyNames(name, 5);
		  }
  
  

How do I get the selected value from a FormControl object?
----------------------------------------------------------
If you want to get the value that was typed-in or selected from the textbox, it is here:
       this.companyNameCtrl.value
	   
	You can see the value, by adding this to the top of your page:
	  <pre>
    	this.companyNameCtrl.value={{companyNameCtrl?.value}}
 	 </pre> 

