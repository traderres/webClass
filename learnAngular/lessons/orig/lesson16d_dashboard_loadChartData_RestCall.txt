Lesson:  Add Charts to the Dashboard (w/hard-coded data)
--------------------------------------------------------
Problem:  Charts data should come from a REST call



 

Procedure
---------
 1. Create a model object called DashboardDTO
    a. Right-click on backend/src/main/com/lessons/models -> New Java Class
	   Class Name:  DashboardDTO
	   
	b. Copy this to your newly-created class
		package com.lessons.models;

		import java.util.List;
		import java.util.Map;

		public class DashboardDTO {
			List<Map<String, Object>> chartData1;

			public List<Map<String, Object>> getChartData1() {
				return chartData1;
			}

			public void setChartData1(List<Map<String, Object>> chartData1) {
				this.chartData1 = chartData1;
			}
		}

	
 2. Create a back-end REST call that will return data
    a. Right-click on backend/src/main/com/lessons/controllers -> New Java Class
	   Class Name:  DashboardController
	
	b. Copy this to your newly-created class
		package com.lessons.controllers;

		import com.lessons.models.DashboardDTO;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.http.HttpStatus;
		import org.springframework.http.ResponseEntity;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;

		import java.util.*;

		@Controller
		public class DashboardController {
			private static final Logger logger = LoggerFactory.getLogger(DashboardController.class);

			/**
			 * REST endpoint /api/dashboard/get
			 * @return DashboardDTO object with information for all of the charts
			 */
			@RequestMapping(value = "/api/dashboard/get", method = RequestMethod.GET, produces = "application/json")
			public ResponseEntity<?> getDashboardInfo() {

				logger.debug("getDashboardInfo() started.");

				// Create the maps
				Map<String, Object> map1 = new HashMap<>();
				map1.put("name", "Unit 3");
				map1.put("y", 989);

				Map<String, Object> map2 = new HashMap<>();
				map2.put("name", "Unit 3R");
				map2.put("y", 249);

				Map<String, Object> map3 = new HashMap<>();
				map3.put("name", "Unit 5");
				map3.put("y", 1035);

				Map<String, Object> map4 = new HashMap<>();
				map4.put("name", "Unit 5R");
				map4.put("y", 324);

				// Put the maps into a list
				List<Map<String, Object>> listOfMaps = Arrays.asList(map1, map2, map3, map4);

				// Put the list of maps into the DTO
				DashboardDTO dto = new DashboardDTO();
				dto.setChartData1(listOfMaps);

				// Return the DTO back to the caller
				return ResponseEntity
						.status(HttpStatus.OK)
						.body(dto);
			}

		}


 3. Adjust the dashboard service getDashboardDTO() to invoke the REST call
    a. Edit dashboard.service.ts
	
	b. Inject the httpClient
	
         constructor(private httpClient: HttpClient)
 	     {}
  
    c. Change the getDashboardDTO() to invoke the REST call
		  /*
		   * Return an observable with the DashboardDTO object
		   * NOTE:  This object has information for multiple charts
		   */
		  public getDashboardDTO(): Observable<DashboardDTO>
		  {
			// Construct the URL of the REST call
			const restUrl = environment.baseUrl + '/api/dashboard/get';

			// Return an observable
			return this.httpClient.get <DashboardDTO>(restUrl);
		  }
	
	
 4. Try it out
 
