Lesson:  Create a MessageService that displays messages/errors
--------------------------------------------------------------
Problem:  We want all success/error messages to be displayed in a central place (console component)
          So, when a user saves a new report, the message shows in the console and then disappears

Improvement: Change it from a console.component.html to using the Snackbar


Approach
 A) Create a message.service.ts that allows other components to send a message
    -- The messageService has a send() method that adds a message
    -- It sends the message by calling subject.next()
    -- The messageService has a getMessage() that listens on an observable
 B) Create a message.component.ts that subscribes (or listens) to the message service
    -- It dispays the last message
    -- It keeps a history of messages (so users can scroll back to see previous messages)
 C) The message itself should hold a few fields:
       time: Date
	   text: string
	   type: string -- e.g., Success/Error


References
----------
https://stackoverflow.com/questions/50371582/angular-6-passing-messages-via-service-to-from-component-to-message-component
https://github.com/govorov/ng-radio/blob/master/src/ng_radio.ts


Procedure
---------
 1. Create the message service
    unix> cd ~/intellijProjects/angularApp1/frontend
	unix> ng generate service services/message


 2. Setup the MessageService class to use a subject to act as a message bus
    a. Edit the frontend/services/message.service.ts
    b. Replace the contents of message.service.ts with this:

		import { Injectable } from '@angular/core';
		import {Observable, Subject} from "rxjs";

		@Injectable({
		  providedIn: 'root'
		})
		export class MessageService {

		  private subject = new Subject<any>();

		  public constructor() { }

		  public sendMessage(message: string) {
			this.subject.next({ text: message });
		  }

		  public clearMessage() {
			this.subject.next();
		  }

		  public getMessage(): Observable<any> {
			return this.subject.asObservable();
		  }

		}

 2. Create a console-component that subscribes to the MessageService and displays each message
    a. Create the console component
	   unix> cd ~/intellijProjects/angularApp1/frontend
	   unix> ng generate component console

    b. Replace the console.component.ts with this:

		import {Component, OnDestroy, OnInit} from '@angular/core';
		import {MessageService} from "../services/message.service";
		import {Subscription} from "rxjs";

		@Component({
		  selector: 'app-console',
		  templateUrl: './console.component.html',
		  styleUrls: ['./console.component.css']
		})
		export class ConsoleComponent implements OnInit, OnDestroy {
		  public message: any = {};
		  private subscription: Subscription;

		  public constructor(private messageService: MessageService)
		  {
			// Subscribe to the message service
			this.subscription = this.messageService.getMessage().subscribe(newMessage => {
			  // Display the new incoming message
			  this.message = newMessage;

			  // Clear the message after 5 seconds
			  setTimeout(() => {
				this.message = "";
			  }, 5000)
			})
		  }

		  ngOnInit(): void {
		  }

		  ngOnDestroy() {
			this.subscription.unsubscribe();
		  }

		}

	c. Change the console.component.html so that it looks like this:
			<div class="consoleMessage" *ngIf="message?.text">
			  <!-- Console Message -->
			  {{message?.text}}
			</div>

    d. Create a consoleMessage css class by editing console.component.css
		.consoleMessage {
		  margin-top: 20px;
		  padding: 5px;
		  font-family: Verdana;
		  background-color: black;
		  border: 2px solid #78FA89;
		}



	

 3. Modify the add-report.component.ts to inject the MessageService and send a message upon save()
    a. Edit the add-report.component.ts
	b. Inject the MessageService by changing the constructor to this:
			constructor(private lookupService: LookupService,
					    private messageService: MessageService)
			{ }


    c. Change the save() method so that it uses the messageService.sendMessage() method
       Add this to the save() method:
			// Send a message to the console
			this.messageService.sendMessage("Successfully saved this report");


	   When finished, the save() method should look like this:

		  public save(): void {
			this.formSubmitted = true;

			// Make all form fields as touched -- so that error validation displays
			this.form.markAllAsTouched();

			if (this.form.valid) {

			  let report: Report = new Report();
			  report.priority = this.form.controls.priority.value;
			  report.name = this.form.controls.name.value;
			  report.authors = this.form.controls.authors.value;
			  report.start_date = this.form.controls.start_date.value;
			  report.end_date = this.form.controls.end_date.value;

			  // Invoke a service to save the record
			  console.log("Save record.");

			  // Send a message to the console
			  this.messageService.sendMessage("Successfully saved this report");

			  // Reset the form
			  this.form.reset();
			  this.formSubmitted = false;
			}
		  }

 4. Add the console.component to the header
    a. Edit header.component.html
	b. Change this section:
		  <!-- Center Part of the Header -->
		  <div fxFlex  fxLayoutAlign="center center">
			<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

			<!-- Application Title -->
		   <h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>
		  </div>

	   To this:
		  <!-- Center Part of the Header -->
		  <div fxFlex  fxLayoutAlign="center center">
			<!-- fxLayoutAlign="center center" is center-aligned horizontally and centered vertically   -->

			<!-- Application Title -->
		   <h1 class="app1Logo clickable" [routerLink]="'/'">Angular App1</h1>

			<!-- Console Messages -->
			<app-console></app-console>
		  </div>

 5. Verify that the console shows a message when you save a new report
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
	   -- You should wait 5 seconds for the dropdowns to load
	c. Fill-in the required fields
	d. Press "Save"
	   -- You should see a message in the console
	   -- After 5 seconds, the console message should disappear


 6. Change the console message from a message in the header to using the Snackbar
    a. Edit app.module.ts
	   Add the MatSnackBarModule to app.module.ts
	         imports: [ MatSnackBarModule, ... ]
	
	   Remove ConsoleComponent from app.module.ts
	   
	   
	b. Remove <app-console> from the header.component.html
	        <!-- Console Messages -->
        	<app-console></app-console>
	

	c. Remove the ConsoleComponent from the webap
	   -- Delete frontend/src/app/console (and all files underneath)
	
	
	d. Change the message.service.ts so it simply uses the snackBar to send a message
			import { Injectable } from '@angular/core';
			import {MatSnackBar} from "@angular/material/snack-bar";

			@Injectable({
			  providedIn: 'root'
			})
			export class MessageService {

				  public constructor(private snackBar: MatSnackBar) { }

				  public sendMessage(message: string) {
					this.snackBar.open(message, 'Done',
					  {
						duration: 6000,                // Close the message after 6 seconds
						verticalPosition: 'bottom',
						horizontalPosition: 'center'
					  });
				  }

		   }
