Lesson:  Have the "Add Reports" page "Save" button invoke a REST call
---------------------------------------------------------------------

Approach
 A) Create a frontend ReportService (that makes a REST call to get the time)
 B) Inject the ReportService into the add-report.component.ts
 C) Have the add-report.compoennt.ts save() method call the ReportService.getTime() method
    NOTE:  The ReportService uses the environment.baseUrl for production and non-production mode
           -- If running in development, the url is http://localhost:8080/app1/api/time
           -- If running in production,  the url is ./api/time


Procedure
---------
 1. Add the HttpClientModule to the app.module.ts imports: [ ]  statement

 2. Create a Report Service
    unix> cd ~/intellijProjects/angularApp1/frontend
    unix> ng generate service services/report
 
 
 3. Add the HttpClientModule to the app.module.ts
    a. Edit the frontend/src/app/app.module.ts
    b. Add HttpClientModule to the imports section   
	   NOTE:  It may already be there
	   
    
 4. Inject the http client and add a method getTime() to the ReportService
    a. Replace the report.services.ts with this:
			import { Injectable } from '@angular/core';
			import {HttpClient} from "@angular/common/http";
			import {environment} from "../../environments/environment";
			import {Observable} from "rxjs";
			import {Report} from "../reports/add-report/add-report.component";

			@Injectable({
			  providedIn: 'root'
			})
			export class ReportService {

			  constructor(private httpClient: HttpClient)
			  {}


			  /*
			   * save() Invoke a REST call and return an observable
			   */
			  public add(report: Report): Observable<string> {
				// Construct the URL for the REST endpoint (so it works in dev and prod mode)
				const restUrl = environment.baseUrl + '/api/reports/add';

				// Setup the REST call to /api/time that returns a string response (not the usual json response)
				// NOTE:  The REST call is not invoked until someone calls subscribe() on this observable
				return this.httpClient.post(restUrl, report, {responseType: 'text'});
			  }
			}



 5. Update the add-report.component.ts to use the new ReportService
    a. Inject the ReportService into the add-report.component.ts
	 
	   Change this:
	     constructor(private lookupService: LookupService,
                     private messageService: MessageService)
         { }
		 
	   To this:
 	     constructor(private lookupService:  LookupService,
                     private messageService: MessageService,
					 private reportService:  ReportService)
         { }
		 
		 
    b. Update the add-report.component save() method to use the reportService.add() method
		  public save(): void {
			this.formSubmitted = true;

			// Make all form fields as touched -- so that error validation displays
			this.form.markAllAsTouched();

			if (!this.form.valid) {
			  // The form is not valid -- so stop here
			  return;
			}

			let report: Report = new Report();
			report.priority = this.form.controls.priority.value;
			report.name = this.form.controls.name.value;
			report.authors = this.form.controls.authors.value;
			report.start_date = this.form.controls.start_date.value;
			report.end_date = this.form.controls.end_date.value;

			// Invoke a service to add a report record
			this.reportService.add(report).subscribe(response => {
				// REST call succeeded
				this.messageService.sendMessage("Successfully added a new report.");

				// Reset the form
				this.form.reset();
				this.formSubmitted = false;
			  },
			  response => {
				// REST call failed
				console.error('Failed to create a new report.  Error is ', response?.error);
				this.messageService.sendMessage(`Failed to create a new report.  Error is ${response?.error}`);
			  });
		  }


    When completed, the add-report-component.ts should look like this:
		import {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';
		import {AddReportFormGroup} from "./add-report.form.group";
		import {LookupDTO} from "../../models/lookup.DTO";
		import {LookupService} from "../../services/lookup.service";
		import {LoadingWrapper} from "../../services/loading.wrapper";
		import {MessageService} from "../../services/message.service";
		import {ReportService} from "../../services/report.service";
		import {Observable} from "rxjs";

		export class Report {
		  name: string | null;
		  priority: number | null;
		  source: number | null;
		  authors: string | null;
		  start_date: Date | null;
		  end_date: Date | null;         // new code is here
		}

		@Component({
		  selector: 'app-add-report',
		  templateUrl: './add-report.component.html',
		  styleUrls: ['./add-report.component.css']
		})
		export class AddReportComponent implements OnInit, AfterViewInit {
		  @ViewChild('name',  { read: ElementRef }) reportNameTextbox: ElementRef;

		  public form: AddReportFormGroup = new AddReportFormGroup();
		  public formSubmitted: boolean = false;
		  public defaultReportStartDate: Date = new Date();  // this.getFirstDayOfPreviousMonth();
		  public prioritiesObs: LoadingWrapper<LookupDTO[]>;
		  public authorsObs: Observable<LookupDTO[]>;
		  public reportSourceObs: Observable<LookupDTO[]>;

		  constructor(private lookupService:  LookupService,
					  private messageService: MessageService,
					  private reportService:  ReportService)
		  { }

		  ngOnInit(): void {

			// Get an observable to the priorities
			// NOTE:  The AsyncPipe will subscribe and unsubscribe from this observable
			this.prioritiesObs = new LoadingWrapper(
				  this.lookupService.getLookupWithTypeAndOrder("priority", "display_order")
			);

			this.authorsObs = this.lookupService.getLookupWithTypeAndOrder("author", "name");
			this.reportSourceObs = this.lookupService.getLookupWithTypeAndOrder("report_source", "name");
		  }


		  private getFirstDayOfPreviousMonth(): Date {
			let now = new Date();
			let firstDayPrevMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
			return firstDayPrevMonth;
		  }

		  ngAfterViewInit(): void {

			// Set the focus to the report name textbox
			// WARNING:  By setting the focus on this textbox and making it a required field,
			//           this box will turn red as soon as the user clicks on any other control
			//  setTimeout(() => this.reportNameTextbox.nativeElement.focus(), 0);
		  }


		  public reset(): void {
			this.formSubmitted = false;

			// Reset the form back to pristine/untouched condition
			this.form.reset();
			this.messageService.sendMessage("Successfully saved this report");
		  }

		  public save(): void {
			this.formSubmitted = true;

			// Make all form fields as touched -- so that error validation displays
			this.form.markAllAsTouched();

			if (!this.form.valid) {
			  // The form is not valid -- so stop here
			  return;
			}

			let report: Report = new Report();
			report.priority = this.form.controls.priority.value;
			report.name = this.form.controls.name.value;
			report.authors = this.form.controls.authors.value;
			report.start_date = this.form.controls.start_date.value;
			report.end_date = this.form.controls.end_date.value;

			// Invoke a service to add a report record
			this.reportService.add(report).subscribe(response => {
				// REST call succeeded
				this.messageService.sendMessage("Successfully added a new report.");

				// Reset the form
				this.form.reset();
				this.formSubmitted = false;
			  },
			  response => {
				// REST call failed
				console.error('Failed to create a new report.  Error is ', response?.error);
				this.messageService.sendMessage(`Failed to create a new report.  Error is ${response?.error}`);
			  });
		  }

		}



 6. Verify that the front-end invokes the REST call and saves the database record
    a. Pull Run -> Debug 'Full WebApp'
    b. Click on "Add Report"
    c. Press F12 to see the console
    d. Press the "Save" button
    e. Go to the database console
	   -- You should see your newly-added report record
	   


 7. Add a spinner (while the save operation is running)
    a. Add a 5 second timeout to the ReportController.addReport() method
	          Thread.sleep(5000);
			
       So, the ReportController.addReport() method looks like this:

		/*************************************************************************
		 * REST endpoint /api/reports/add
		 *
		 * @return nothing
		 *************************************************************************/
		@RequestMapping(value = "/api/reports/add", method = RequestMethod.POST, produces = "application/json")
		public ResponseEntity<?> addReport(@RequestBody AddReportDTO aAddReportDTO) throws Exception {
			logger.debug("addReport() started.");

			// Have this REST call wait for 5 seconds 
			Thread.sleep(5000);

			// Add a record to the database
			reportService.addReport(aAddReportDTO);

			return ResponseEntity
					.status(HttpStatus.OK)
					.body("");
		}
		
		
    b. Add a public variable called showSpinner to the add-report.component.ts
	 	public showSpinner: boolean;
				
    c. Change the save() method to set showSpinner=true when starting and showSpinner=false when finished
       NOTE:  Use the subscriber().add() method for the finally() method
	   
		  public save(): void {
			this.formSubmitted = true;

			// Make all form fields as touched -- so that error validation displays
			this.form.markAllAsTouched();

			if (!this.form.valid) {
			  // The form is not valid -- so stop here
			  return;
			}

			let report: Report = new Report();
			report.priority = this.form.controls.priority.value;
			report.name = this.form.controls.name.value;
			report.authors = this.form.controls.authors.value;
			report.start_date = this.form.controls.start_date.value;
			report.end_date = this.form.controls.end_date.value;

			// Show the spinner
			this.showSpinner = true;

			// Invoke a service to add a report record
			this.reportService.add(report).subscribe(response => {
				// REST call succeeded
				this.messageService.sendMessage("Successfully added a new report.");

				// Reset the form
				this.form.reset();
				this.formSubmitted = false;
			  },
			  response => {
				// REST call failed
				console.error('Failed to create a new report.  Error is ', response?.error);
				this.messageService.sendMessage(`Failed to create a new report.  Error is ${response?.error}`);
			  }).add(() =>
			  {
				// REST call has finished (either with failure or success)

				// Hide the spinner
				this.showSpinner = false;
			  });

			}	
			
    d. Place a spinner on the save button by adjusting add-report.component.html
	   Change the Save button to this:
	   
	   From this:
		  <!-- Save Button -->
		  <button type="button" (click)="save()" mat-raised-button color="primary" [disabled]="formSubmitted && form.invalid">
			<i class="fa fa-plus"></i>
			Save
		  </button>
	  
	  To this:
		  <!-- Save Button -->
		  <button type="button" (click)="save()" mat-raised-button color="primary" [disabled]="(formSubmitted && form.invalid) || this.showSpinner">
			<i class="fa fa-plus" *ngIf="!this.showSpinner"></i>
			<i class="fa fa-spin fa-spinner" *ngIf="this.showSpinner"></i>
			Save
		  </button>
	  
	 Changes to behavior:
	   A) Show a spinning icon when showSpinner==TRUE         <i class="fa fa-spin fa-spinner" *ngIf="this.showSpinner"></i>
	   B) Disable the button when showSpinner==TRUE           [disabled]="(formSubmitted && form.invalid) || this.showSpinner">
	   C) Hide the Plus icon when showSpinner==FALSE          <i class="fa fa-plus" *ngIf="!this.showSpinner"></i>
	   
	  
	  
