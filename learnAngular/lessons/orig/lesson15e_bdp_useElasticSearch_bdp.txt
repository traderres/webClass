Lesson: Configure your ElasticSearch Service so it works on the BDP
-------------------------------------------------------------------




Procedure
---------
 1. Adjust the mapping so that it has security in it
    a. Edit src/main/resources/reports.mapping.json
  	b. Add this right after the "mappings": {
		  "security": {
			  "_meta": {
				"acl": {
				  "data_read":      "role:ES_WRITER|role:ES_READER",
				  "data_write":     "role:ES_WRITER",
				  "metadata_read":  "role:ES_WRITER|role:ES_READER",
				  "metadata_write": "role:ES_WRITER"
				}
			  }
			},

	   When finished, the reports.mapping.json should look like this:
		{
		  "settings": {
			"analysis": {
			  "analyzer" : {
				"my_ngram_analyzer" : {
				  "tokenizer" : "my_ngram_tokenizer",
				  "filter": ["lowercase"]
				}
			  },
			  "tokenizer" : {
				"my_ngram_tokenizer" : {
				  "type" : "ngram",
				  "min_gram" : "1",
				  "max_gram" : "75",
				  "token_chars": [ ]
				}
			  },
			  "normalizer": {
				"case_insensitive_normalizer": {
				  "type": "custom",
				  "char_filter": [],
				  "filter": [ "lowercase", "asciifolding" ]
				}
			  }
			},
			"max_result_window": 500000,
			"refresh_interval": "1s"
		  },
		  "security": {
			"_meta": {
			  "acl": {
				"data_read":      "role:ES_WRITER|role:ES_READER",
				"data_write":     "role:ES_WRITER",
				"metadata_read":  "role:ES_WRITER|role:ES_READER",
				"metadata_write": "role:ES_WRITER"
			  }
			}
		  },
		  "mappings": {
			"record": {
			  "dynamic": "strict",
			  "properties": {
				"id": {
				  "type": "integer",
				  "ignore_malformed": false
				},
				"description": {
				  "type": "text"
				},
				"display_name": {
				  "type": "text",
				  "fields": {
					"raw": {
					  "type": "keyword"
					},
					"sort": {
					  "type": "keyword",
					  "normalizer": "case_insensitive_normalizer"
					},
					"filtered": {
					  "type": "text",
					  "analyzer": "my_ngram_analyzer"
					}
				  }
				},
				"priority": {
				  "type": "text",
				  "fields": {
					"raw": {
					  "type": "keyword"
					},
					"sort": {
					  "type": "keyword",
					  "normalizer": "case_insensitive_normalizer"
					},
					"filtered": {
					  "type": "text",
					  "analyzer": "my_ngram_analyzer"
					}
				  }
				}
			  }
			}
		  }
		}



 2. Grant the ES_WRITER role to all of the data nodes on ES
    a. Get a list of all data nodes
	   ssh to the puppet master
	   unix> sudo -s
	   unix> /var/bdp/bin/bdp_describe role datanodes

	   You should see the following:
		{
			"datanodes": [
				"testdn02",
				"testdn01"
			]
		}

    b. Get the fullname of one of the nodes
	   unix> citadel user:list | grep -i testdn
		testdn01.test.com
		testdn02.test.com


	c. Grant the ES_WRITER role to all of data nodes
	   Using this format:
	      citadel attribute:add -u <name of datanode1 -a ROLE:ES_WRITER

	   unix> citadel attribute:add -u testdn01.test.com -a ROLE:ES_WRITER
	   unix> citadel attribute:add -u testdn02.test.com -a ROLE:ES_WRITER



 3. Add ElasticSearch settings to production template application.yaml
    a. Edit install-bdp/src/main/assembly/config/application.yaml
	b. Add this section to the top:

		###########################################################
		# ElasticSearch Settings
		##########################################################
		es:
		  url: {{{bdp:proxy.url}}}/elasticsearch-primary
		  ssl_enabled: true
		  client-p12: /etc/pki/java/keystore.p12
		  client-p12-password: changeit
		  trust-store: {{{bdp:host.pki.truststore.jks}}}
		  trust-store-password: {{{bdp:host.pki.truststore.password}}}
		  trust-store-type: JKS


 4. Add this class:  SSLCustomTrustManager
    a. Right-click on backend/src/main/java/com/lessons/security -> New Java Class
	   Filename:  SSLCustomTrustManager

	b. Copy this to the newly-created class
		package com.lessons.security;

		import javax.net.ssl.TrustManager;
		import javax.net.ssl.TrustManagerFactory;
		import javax.net.ssl.X509TrustManager;
		import java.security.KeyStore;
		import java.security.KeyStoreException;
		import java.security.NoSuchAlgorithmException;
		import java.security.Principal;
		import java.security.cert.*;
		import java.util.Arrays;
		import java.util.List;

		/**
		 * A custom X509TrustManager implementation that trusts a specified server certificate in addition
		 * to those that are in the system TrustStore.
		 * Also handles an out-of-order certificate chain, as is often produced by Apache's mod_ssl
		 */
		public class SSLCustomTrustManager implements X509TrustManager
		{

			private final X509TrustManager originalX509TrustManager;
			private final KeyStore trustStore;

			/**
			 * @param trustStore A KeyStore containing the server certificate that should be trusted
			 * @throws NoSuchAlgorithmException
			 * @throws KeyStoreException
			 */
			public SSLCustomTrustManager(KeyStore trustStore) throws NoSuchAlgorithmException, KeyStoreException
			{
				this.trustStore = trustStore;

				TrustManagerFactory originalTrustManagerFactory = TrustManagerFactory.getInstance("X509");
				originalTrustManagerFactory.init((KeyStore) null);

				TrustManager[] originalTrustManagers = originalTrustManagerFactory.getTrustManagers();
				originalX509TrustManager = (X509TrustManager) originalTrustManagers[0];
			}

			/**
			 * No-op. Never invoked by client, only used in server-side implementations
			 * @return
			 */
			public X509Certificate[] getAcceptedIssuers() {
				return new X509Certificate[0];
			}

			/**
			 * No-op. Never invoked by client, only used in server-side implementations
			 * @return
			 */
			public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException
			{
			}


			/**
			 * Given the partial or complete certificate chain provided by the peer,
			 * build a certificate path to a trusted root and return if it can be validated and is trusted
			 * for client SSL authentication based on the authentication type. The authentication type is
			 * determined by the actual certificate used. For instance, if RSAPublicKey is used, the authType should be "RSA".
			 * Checking is case-sensitive.
			 * Defers to the default trust manager first, checks the cert supplied in the ctor if that fails.
			 * @param chain the server's certificate chain
			 * @param authType the authentication type based on the client certificate
			 * @throws CertificateException
			 */
			public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
				try {
					originalX509TrustManager.checkServerTrusted(chain, authType);
				} catch(CertificateException originalException) {
					try {
						X509Certificate[] reorderedChain = reorderCertificateChain(chain);
						CertPathValidator validator = CertPathValidator.getInstance("PKIX");
						CertificateFactory factory = CertificateFactory.getInstance("X509");
						CertPath certPath = factory.generateCertPath(Arrays.asList(reorderedChain));
						PKIXParameters params = new PKIXParameters(trustStore);
						params.setRevocationEnabled(false);
						validator.validate(certPath, params);
					} catch(Exception ex) {
						throw originalException;
					}
				}

			}

			/**
			 * Puts the certificate chain in the proper order, to deal with out-of-order
			 * certificate chains as are sometimes produced by Apache's mod_ssl
			 * @param chain the certificate chain, possibly with bad ordering
			 * @return the re-ordered certificate chain
			 */
			private X509Certificate[] reorderCertificateChain(X509Certificate[] chain) {

				X509Certificate[] reorderedChain = new X509Certificate[chain.length];
				List<X509Certificate> certificates = Arrays.asList(chain);

				int position = chain.length - 1;
				X509Certificate rootCert = findRootCert(certificates);
				reorderedChain[position] = rootCert;

				X509Certificate cert = rootCert;
				while((cert = findSignedCert(cert, certificates)) != null && position > 0) {
					reorderedChain[--position] = cert;
				}

				return reorderedChain;
			}

			/**
			 * A helper method for certificate re-ordering.
			 * Finds the root certificate in a possibly out-of-order certificate chain.
			 * @param certificates the certificate change, possibly out-of-order
			 * @return the root certificate, if any, that was found in the list of certificates
			 */
			private X509Certificate findRootCert(List<X509Certificate> certificates) {
				X509Certificate rootCert = null;

				for(X509Certificate cert : certificates) {
					X509Certificate signer = findSigner(cert, certificates);
					if(signer == null || signer.equals(cert)) { // no signer present, or self-signed
						rootCert = cert;
						break;
					}
				}

				return rootCert;
			}

			/**
			 * A helper method for certificate re-ordering.
			 * Finds the first certificate in the list of certificates that is signed by the sigingCert.
			 */
			private X509Certificate findSignedCert(X509Certificate signingCert, List<X509Certificate> certificates) {
				X509Certificate signed = null;

				for(X509Certificate cert : certificates) {
					Principal signingCertSubjectDN = signingCert.getSubjectDN();
					Principal certIssuerDN = cert.getIssuerDN();
					if(certIssuerDN.equals(signingCertSubjectDN) && !cert.equals(signingCert)) {
						signed = cert;
						break;
					}
				}

				return signed;
			}

			/**
			 * A helper method for certificate re-ordering.
			 * Finds the certificate in the list of certificates that signed the signedCert.
			 */
			private X509Certificate findSigner(X509Certificate signedCert, List<X509Certificate> certificates) {
				X509Certificate signer = null;

				for(X509Certificate cert : certificates) {
					Principal certSubjectDN = cert.getSubjectDN();
					Principal issuerDN = signedCert.getIssuerDN();
					if(certSubjectDN.equals(issuerDN)) {
						signer = cert;
						break;
					}
				}

				return signer;
			}
		}



 5. Add this class:  SSLContextFactory
    a. Right-click on backend/src/main/java/com/lessons/security -> New Java Class
	   Filename:  SSLContextFactory

	b. Copy this to the newly-created class
		package com.lessons.security;


		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;

		import javax.net.ssl.KeyManager;
		import javax.net.ssl.KeyManagerFactory;
		import javax.net.ssl.SSLContext;
		import javax.net.ssl.TrustManager;
		import javax.xml.bind.DatatypeConverter;
		import java.io.*;
		import java.security.KeyStore;
		import java.security.cert.CertificateFactory;
		import java.security.cert.X509Certificate;

		/**
		 * Builds an SSLContext with custom KeyStore and TrustStore, to work with a client cert signed by a truststore.jks file
		 */
		public enum SSLContextFactory
		{
			INSTANCE;

			private static final Logger logger = LoggerFactory.getLogger(SSLContextFactory.class);

			/**
			 * Utility class private constructor
			 */
			private SSLContextFactory() {
			}




			/***********************************************************************************
			 * makeContext()
			 * Creates an SSLContext using the passed-in clientp12 File and truststoreJks File objects
			 *
			 * @return An initialized SSLContext
			 * @throws Exception
			 ***********************************************************************************/
			public static SSLContext makeContext(File clientCertificateP12File, String clientCertificatePassword,
												 File trustJksFile,  String trustPassword) throws Exception
			{
				logger.debug("makeContext() started.  aClientCertP12File={}   aTrustJksFile={}",
						clientCertificateP12File.toString(), trustJksFile.toString());

				// Generate a keystore from the client p12 file
				final KeyStore keyStore = loadPKCS12KeyStore(clientCertificateP12File, clientCertificatePassword);
				KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
				kmf.init(keyStore, clientCertificatePassword.toCharArray());
				KeyManager[] keyManagers = kmf.getKeyManagers();

				// Generate a truststore from the passed-in aTrustJksFile object
				final KeyStore trustStore = loadJksKeyStore(trustJksFile, trustPassword);

				TrustManager[] trustManagers = {new SSLCustomTrustManager(trustStore) };
				SSLContext sslContext = SSLContext.getInstance("TLS");
				sslContext.init(keyManagers, trustManagers, null);

				logger.debug("makeContext() finished.");
				return sslContext;
			}


			/***********************************************************************************
			 * loadPEMTrustStore()
			 * Produces a KeyStore from a String containing a PEM certificate (typically, the server's CA certificate)
			 ***********************************************************************************/
			private static KeyStore loadPEMTrustStore(String certificateString) throws Exception
			{
				byte[] certificateBytes = loadPemCertificate(new ByteArrayInputStream(certificateString.getBytes()));
				ByteArrayInputStream derInputStream = new ByteArrayInputStream(certificateBytes);
				CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
				X509Certificate certificate = (X509Certificate) certificateFactory.generateCertificate(derInputStream);
				String alias = certificate.getSubjectX500Principal().getName();

				KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
				trustStore.load(null);
				trustStore.setCertificateEntry(alias, certificate);

				return trustStore;
			}


			/***********************************************************************************
			 * Produces a KeyStore from a PKCS12 (.p12) certificate file, typically the client certificate
			 * @param certificateP12File A File object referring to the client p12 certificate
			 * @param clientCertPassword Password for the certificate
			 * @return A KeyStore containing the certificate from the certificateFile
			 ***********************************************************************************/
			private static KeyStore loadPKCS12KeyStore(File certificateP12File, String clientCertPassword) throws Exception  {
				try (FileInputStream fileInputStream = new FileInputStream(certificateP12File)) {
					KeyStore keyStore = KeyStore.getInstance("PKCS12");
					keyStore.load(fileInputStream, clientCertPassword.toCharArray());
					return keyStore;
				}
			}

			/***********************************************************************************
			 * loadJksKeyStore()
			 * @param jksCertificateFile
			 * @param trustPassword
			 * @return
			 ***********************************************************************************/
			private static KeyStore loadJksKeyStore(File jksCertificateFile, String trustPassword) throws Exception  {
				try (FileInputStream fileInputStream = new FileInputStream(jksCertificateFile)) {
					KeyStore keyStore =  KeyStore.getInstance("JKS");
					keyStore.load(fileInputStream, trustPassword.toCharArray());
					return keyStore;
				}
			}


			/***********************************************************************************
			 * loadPemCertificate()
			 * Reads and decodes a base-64 encoded DER certificate (a .pem certificate), typically the server's CA cert.
			 * @param certificateStream an InputStream from which to read the cert
			 * @return a byte[] containing the decoded certificate
			 ***********************************************************************************/
			private static byte[] loadPemCertificate(InputStream certificateStream) throws IOException
			{
				byte[] certificateBytes;
				BufferedReader bufferedReader = null;

				try {
					StringBuilder builder = new StringBuilder();
					bufferedReader = new BufferedReader(new InputStreamReader(certificateStream));

					String line = bufferedReader.readLine();
					while(line != null) {
						if(!line.startsWith("--")){
							builder.append(line);
						}
						line = bufferedReader.readLine();
					}

					String pem = builder.toString();
					certificateBytes = DatatypeConverter.parseBase64Binary(pem);

				}
				finally
				{
					if(bufferedReader != null)
					{
						bufferedReader.close();
					}
				}

				return certificateBytes;
			}
		}


 6. Update the ElasticSearchResourcesConfig class so that it loads an SSL Context if es.ssl_enabled holds true
    a. Edit backend/src/main/java/com/lessons/config/ElasticSearchResourcesConfig

	b. Replace the class with this:
		package com.lessons.config;

		import com.lessons.security.SSLContextFactory;
		import com.ning.http.client.AsyncHttpClient;
		import org.apache.commons.lang3.StringUtils;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.beans.factory.annotation.Value;
		import org.springframework.context.annotation.Bean;
		import org.springframework.context.annotation.Configuration;

		import javax.net.ssl.SSLContext;
		import java.io.File;


		@Configuration
		public class ElasticSearchResourcesConfig {

			private static final Logger logger = LoggerFactory.getLogger(ElasticSearchResourcesConfig.class);

			@Value("${es.url:}")
			private String elasticSearchUrl;

			@Value("${es.ssl_enabled:false}")
			private boolean sslEnabled;


			// -------------- Optional SSL Parameters ------------------------
			@Value("${es.client-p12:}")
			private String clientP12FilePath;

			@Value("${es.client-p12-password:}")
			private String clientP12Password;

			@Value("${es.trust-store:}")
			private String trustStoreFilePath;

			@Value("${es.trust-store-password:}")
			private String trustStorePassword;

			@Value("${es.trust-store-type:}")
			private String turstStoreType;


			@Bean
			public ElasticSearchResources elasticSearchResources() throws Exception {

				// Set the AsyncHttpClient settings
				com.ning.http.client.AsyncHttpClientConfig.Builder configBuilder = new com.ning.http.client.AsyncHttpClientConfig.Builder();
				configBuilder.setReadTimeout(-1);
				configBuilder.setAcceptAnyCertificate(true);
				configBuilder.setFollowRedirect(true);

				logger.debug("In elasticSearchResources()  this.sslEnabled={}", this.sslEnabled);
				if (sslEnabled) {
					// initialize the sslContext and store it in the configBuilder object
					SSLContext sslContext = generateSslContext();
					configBuilder.setSSLContext(sslContext);
				}

				// Create a new AsyncHttpClient object
				com.ning.http.client.AsyncHttpClientConfig config = configBuilder.build();
				AsyncHttpClient asyncHttpClient = new AsyncHttpClient(config);


				// Store the AsyncHttpClient and elasticSearc url in the ElasticSearchResources object
				// NOTE:  THe elastic search url is injected from the application.yaml
				//        The AsyncHttpClient is constructed with java code
				ElasticSearchResources elasticSearchResources = new ElasticSearchResources(this.elasticSearchUrl, asyncHttpClient);

				// Return a spring bean that holds the AsyncHttpClient and elasticsearch url
				return elasticSearchResources;
			}


			/**
			 * Helper method to generate the SSL Context
			 * @return a SSLContext object
			 */
			private SSLContext generateSslContext() throws Exception {

				if (StringUtils.isEmpty(this.clientP12Password)) {
					throw new RuntimeException("Critical Error Creating SSL Context:  The client p12 password is empty.  Check this property 'es.client-p12-password' in the application.yaml");
				}
				else if (StringUtils.isEmpty(this.trustStorePassword)) {
					throw new RuntimeException("Critical Error Creating SSL Context:  The truststore jks password is empty.  Check this property 'es.trust-store-password' in the application.yaml");
				}
				else if ((StringUtils.isEmpty(this.turstStoreType)) || (! this.turstStoreType.equalsIgnoreCase("JKS"))) {
					throw new RuntimeException("Critical Error Creating SSL Context:  The truststore type must be JKS.   Check this property 'es.trust-store-type'");
				}

				File clientP12File = new File(this.clientP12FilePath);
				if (! clientP12File.exists()) {
					throw new RuntimeException("Critical Error:  This client p12 file was not found: " + this.clientP12FilePath + "  Check this property 'es.client-p12' in the application.yaml");
				}

				File trustStoreJkdFile = new File(this.trustStoreFilePath);
				if (! trustStoreJkdFile.exists()) {
					throw new RuntimeException("Critical Error:  This truststore JKS file was not found: " + this.trustStoreFilePath + "  Check this property 'es.trust-store' in the application.yaml");

				}

				logger.debug("Generating SSL Context from client p12 {} and truststore {}", this.clientP12FilePath, this.trustStoreFilePath);
				SSLContext sslContext = SSLContextFactory.makeContext(clientP12File, this.clientP12Password, trustStoreJkdFile, this.trustStorePassword);
				return sslContext;
			}

		}



 7. Package the RDA
    unix> cd ~/intellijProjects/angularApp1
	unix> mvn clean package -Pprod -PbuildRda

	NOTE:  The RDA will be located here:
				~/intellijProjects/angularApp1/install-bdp/target/webapp.rda.zip

 8. Upload the RDA to the BDP
    -- Upload the webapp.rda.zip


 9. Startup the RDA


10. Grant the ES_READER role to your p12 cert (so you can see the elasticsearch status info from the browser)
    a. Find your p12 cert name in citadel
	   ssh to the puppet master
	   unix> sudo -s
	   unix> citadel user:list | grep johnsmith

	b. Grant that cert name the SUPERUSER role
	   unix> export USERNAME=johnsmith12345
	   unix> citadel attribute:add -u $USERNAME -a ROLE:SUPERUSER


11. Invoke a REST call that will create an ElasticSearch index on the BDP
    a. Open a browser with a p12 cert loaded in it
	b. Go to https:// <IP address of nginx frontdoor>  /app1/api/search/create
       -- You should see "Successfully Created the mapping reports"

	c. Verify that the index exists in elasticsearch
	   Go to https:// <IP address of nginx frontdoor>  /elasticsearch-primary/_cat/indices
	   -- You should see an index called "reports"


12. Invoke a REST call that will add records to the ElasticSearch index (called "reports") on the BDP
    a. Open a browser with a p12 cert loaded in it
	b. Go to https:// <IP address of nginx frontdoor>  /app1/api/search/add
       -- You should see "Successfully added some records.  Here is what was added...."

	c. Verify that the data exists in elasticsearch
	   Go to https:// <IP address of nginx frontdoor>  /elasticsearch-primary/reports/_search?pretty
	   -- You should see the data


13. Invoke a REST call that will delete the ElasticSearch index (called "reports") on the BDP
    a. Open a browser with a p12 cert loaded in it
	b. Go to https:// <IP address of nginx frontdoor>  /app1/api/search/delete
       -- You should see "Successfully deleted the mapping"

	c. Verify that the data exists in elasticsearch
	   Go to https:// <IP address of nginx frontdoor>  /elasticsearch-primary/_cat/indices
	   -- You should *NOT* see an index called "reports"



