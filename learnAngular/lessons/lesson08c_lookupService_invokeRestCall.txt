Lesson:  Change the lookup.service.ts so that invokes a REST call



Procedure
---------
 1. Add the HttpClientModule to app.module.ts
        imports: [ ...
                    HttpClientModule,
                    ...
                 ]
                 
                 
 2. Change the LookupService so that it injects the httpClient and calls the REST service
    a. Edit the lookup.service.ts
    b. Change the lookup.service.ts to this:
	
		import { Injectable } from '@angular/core';
		import {HttpClient} from "@angular/common/http";
		import {environment} from "../../environments/environment";
		import {Observable} from "rxjs";
		import {LookupDTO} from "../models/lookup-dto";

		@Injectable({
		  providedIn: 'root'
		})
		export class LookupService {

		  constructor(private httpClient: HttpClient) { }

		  /*
		   * Return a list of LookupDTO objects that correspond to the passed-in type name -- e.g, 'priority'
		   */
		  public getLookupWithType(aType: string): Observable<LookupDTO[]>  {

			const restUrl = environment.baseUrl + '/api/lookups/' + aType;

			return this.httpClient.get <LookupDTO[]>(restUrl);
		  }
		}




 3. Now, your frontend page component can invoke this REST endpoint with something like this:
    NOTE:  Make sure your page implements OnInit and OnDestroy
    a. Edit add-report2.component.ts
	
	b. Make sure there a public array of LookupDTO objects
		public priorities: LookupDTO[];

	
	c. Change the ngOnInit() to manually invoke the REST call
	   1. Remove this call:
	      	    this.priorities = this.lookupService.getLookupWithType("priority");
			
	   2. Add the code to manually invoke the REST end point
		
				// Invoke the REST end point
				this.lookupService.getLookupWithType("priority").subscribe(data => {
					// The REST call finished successfully
					
					// Get the data from the REST call
					this.priorities = data;
				  },
				  
				 (err) => {
					// REST Call call finished with an error
					console.error(err);

				  }).add( () => {
					// Code to run after the REST call finished
					
					// Unset the flag so that the dropdown appears
					console.log('rest call tear down code');
				})


		}  // end of method

    
	When finished, your ngOnInit() should look something like this:

		  public ngOnInit(): void {

			this.myForm = this.formBuilder.group({
			  report_name: [null,
				[
				  Validators.required,
				  Validators.minLength(2),
				  Validators.maxLength(100)
				]],

			  source: ['',  null],

			  priority:  ['', Validators.required],

			  authors:  ['',
				[
				  Validators.required,
				  ValidatorUtils.validateMultipleSelect(1,2)
				]]
			});


			// Invoke the REST end point
			this.lookupService.getLookupWithType("priority").subscribe(data => {
				// The REST call finished successfully

				// Get the data from the REST call
				this.priorities = data;
			  },

			  (err) => {
				// REST Call call finished with an error
				console.error(err);

			  }).add( () => {
			  // Code to run after the REST call finished

			  // Unset the flag so that the dropdown appears
			  console.log('rest call tear down code');
			});

		  }
	

 4. Remove the memory leak
 	a. Add a private variable
	      private lookupSubscription: Subscription;
		
	b. Change the call to invoke the REST endpoint so that we get a reference to the lookupSubscription
		
				// Invoke the REST end point
				this.lookupSubscription = this.lookupService.getLookupWithType("priority").subscribe(data => {
						// The REST call finished successfully
					
						// Get the data from the REST call
						this.priorities = data;
				  },
				  
				 (err) => {
						// REST Call call finished with an error
						console.error(err);

				  }).add( () => {
						// Code to run after the REST call finished
						console.log('rest call tear down code');
				})


   c. Change the add-report2.component.ts so that it implements OnDestroy
   
   
   d. Add this public method:
   
        public ngOnDestroy(): void {
		
		    if (this.lookupSubscription) {
			   // Unsubscribe from this subscription so we don't have a memory leak
			   this.lookupSubscription.unsubscribe();
			}
			
		}


When finished, the add-report2.component.ts should look something like this:

	import {Component, OnDestroy, OnInit} from '@angular/core';
	import {FormBuilder, FormGroup, Validators} from "@angular/forms";
	import {ValidatorUtils} from "../../validators/validator-utils";
	import {MessageService} from "../../services/message.service";
	import {LookupDTO} from "../../models/lookup-dto";
	import {LookupService} from "../../services/lookup.service";
	import {Subscription} from "rxjs";

	@Component({
	  selector: 'app-add-report2',
	  templateUrl: './add-report2.component.html',
	  styleUrls: ['./add-report2.component.css']
	})
	export class AddReport2Component implements OnInit, OnDestroy {

	  public myForm: FormGroup;
	  public priorities: LookupDTO[];
	  private lookupSubscription: Subscription;

	  constructor(private messageService: MessageService,
				  private formBuilder: FormBuilder,
				  private lookupService: LookupService) { }

	  public ngOnInit(): void {

		this.myForm = this.formBuilder.group({
		  report_name: [null,
			[
			  Validators.required,
			  Validators.minLength(2),
			  Validators.maxLength(100)
			]],

		  source: ['',  null],

		  priority:  ['', Validators.required],

		  authors:  ['',
			[
			  Validators.required,
			  ValidatorUtils.validateMultipleSelect(1,2)
			]]
		});


		// Invoke the REST end point
		this.lookupSubscription = this.lookupService.getLookupWithType("priority").subscribe(data => {
			// The REST call finished successfully

			// Get the data from the REST call
			this.priorities = data;
		  },

		  (err) => {
			// REST Call call finished with an error
			console.error(err);

		  }).add( () => {
		  // Code to run after the REST call finished

		  // Unset the flag so that the dropdown appears
		  console.log('rest call tear down code');
		});

	  }


	  public reset(): void {
		console.log('user pressed reset');
		this.myForm.reset();
	  }

	  public save(): void {
		console.log('User pressed save.');

		// Mark all fields as touched so the user can see any errors
		this.myForm.markAllAsTouched();

		if (this.myForm.invalid) {
		  // User did not pass validation so stop here
		  return;
		}

		// User enter valid data
		console.log('Valid data:  report_name=' + this.myForm.controls.report_name.value);

		// Send a message
		this.messageService.showErrorMessage("Failed to save your record.  An error occurred.");
	  }


	  public ngOnDestroy(): void {

		if (this.lookupSubscription) {
		  // Unsubscribe from this subscription so we don't have a memory leak
		  this.lookupSubscription.unsubscribe();
		}

	  }
	}
