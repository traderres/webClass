Lesson:  Add a JDBC Connection Pool to the Spring Boot Web App
--------------------------------------------------------------
In this lesson, we will setup the Hikari Data Source to manage our JDBC connection pool
The Hikdari Data Source is probably the *fastest* JDBC connection pool that is freely available.

Assumptions:
 A) You have a postgres database
 B) You can use the following database credentials to connect:
      hostname:  localhost
      user:      app1_user
      password:  secret
      schema:    app1_db
 C) You want your webapp to talk with a postgreSQL database
 D) You want to use a connection pool for your database connections
 E) You want to store your jdbc properties in the application.yaml (default config file for spring boot)


Database initialization steps
-----------------------------
unix> psql -U postgres -h localhost
password for user postgres:  secret

      create database app1_db;
      create user app1_user with password 'secret';
      grant all privileges on database app1_db to app1_user;
      alter database app1_db     SET search_path=app1_db;
      alter role     app1_user   SET search_path=app1_db;
      \q


Procedure
---------
 1. Add these dependencies to your backend/pom.xml
        <dependency>
            <!-- Hikari Data Source / JDBC Connection Pool -->
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>3.4.5</version>
        </dependency>


 2. Verify that this dependency exists in the backend/pom.xml (for the database driveR)
        <dependency>
            <!-- Add the dependency for your postgreSQL JDBC driver -->
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.18</version>
        </dependency>

        <dependency>
            <!-- Flyway is used to set database versions -->
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>5.2.4</version>
        </dependency>


 3. Load your maven dependencies
    Right-click within your backend/pom.xml -> Maven -> Reload Project


 4. Add the database properties to your application.yaml
    a. Edit backend/src/main/resources/application.yaml

    b. Add these entries
       (Don't worry, we will encode the username/password later)


		# Tell Spring to not run flyway automatically
		# NOTE:  In the DataSourceConfig, java code is used to run a flyway migrate
		spring.flyway.enabled: false

        ##########################################################
        # Database Settings
        ##########################################################
        app.datasource:
            driver-class-name: org.postgresql.Driver
            url: jdbc:postgresql://localhost:5432/app1_db
            username: app1_user
            password: secret
            schema: app1_db
			maxPoolSize: 10



       NOTE:  Make sure there are no leading spaces in front of app.datasource



 5. Create this class:  DataSourceConfig
    a. Right-click on backend/src/main/java/com/lessons/config -> New Java Class
       Name:  DataSourceConfig

    b. Copy this to your new class

        package com.lessons.config;

        import com.zaxxer.hikari.HikariConfig;
        import com.zaxxer.hikari.HikariDataSource;
        import org.springframework.beans.factory.annotation.Value;
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;

        import javax.sql.DataSource;

        @Configuration
        public class DataSourceConfig {

            @Value("${app.datasource.driver-class-name}")
            private String driverClassName;

            @Value("${app.datasource.url}")
            private String url;

            @Value("${app.datasource.username}")
            private String username;

            @Value("${app.datasource.password}")
            private String password;

            @Value("${app.datasource.maxPoolSize:20}")
            private int maxPoolSize;

    		@Value("${app.datasource.schema}")
    		private String schemaName;

            @Bean
            public DataSource dataSource() {
                HikariConfig hikariConfig = new HikariConfig();

                hikariConfig.setDriverClassName(this.driverClassName);
                hikariConfig.setJdbcUrl(this.url);
                hikariConfig.setUsername(this.username);
                hikariConfig.setPassword(this.password);
                hikariConfig.setMaximumPoolSize(this.maxPoolSize);
                hikariConfig.setConnectionTestQuery("SELECT 1");
                hikariConfig.setPoolName("app1_jdbc_connection_pool");

                HikariDataSource dataSource = new HikariDataSource(hikariConfig);
                return dataSource;
            }

        }


     Now, we can inject this data source into any spring bean class using this:
       @Resource
       private DataSource dataSource;



 6. Configure the backend so that it will run flyway on startup
    a. Edit the backend/src/main/resources/application.yaml

    b. Add these properties:
	    # Tell Spring to not use the automatic flyway integration (it is broken in different versions of spring)
        spring.flyway.enabled: false

	c. Edit the DataSourceConfig class and run flyway manually *immediately* after creating the data source
	   a) Edit DataSourceConfig.java
	   b) Add this to the end of the public dataSource() method

        // Initialize the flyway object by setting the data source and schema name
        Flyway flyway = Flyway.configure()
                .dataSource(dataSource)
                .schemas(schemaName)
                .load();

        // Use the flyway object to do a migrate on webapp startup
        flyway.migrate();


	When finished, the DataSourceConfig class should look like this:
		package com.lessons.config;

		import com.zaxxer.hikari.HikariConfig;
		import com.zaxxer.hikari.HikariDataSource;
		import org.flywaydb.core.Flyway;
		import org.springframework.beans.factory.annotation.Value;
		import org.springframework.context.annotation.Bean;
		import org.springframework.context.annotation.Configuration;

		import javax.sql.DataSource;

		@Configuration
		public class DataSourceConfig {

			@Value("${app.datasource.driver-class-name}")
			private String driverClassName;

			@Value("${app.datasource.url}")
			private String url;

			@Value("${app.datasource.username}")
			private String username;

			@Value("${app.datasource.password}")
			private String password;

			@Value("${app.datasource.maxPoolSize:20}")
			private int maxPoolSize;

			@Value("${app.datasource.schema}")
			private String schemaName;

			@Bean
			public DataSource dataSource() {
				HikariConfig hikariConfig = new HikariConfig();

				hikariConfig.setDriverClassName(this.driverClassName);
				hikariConfig.setJdbcUrl(this.url);
				hikariConfig.setUsername(this.username);
				hikariConfig.setPassword(this.password);
				hikariConfig.setMaximumPoolSize(this.maxPoolSize);
				hikariConfig.setConnectionTestQuery("SELECT 1");
				hikariConfig.setPoolName("app1_jdbc_connection_pool");

				HikariDataSource dataSource = new HikariDataSource(hikariConfig);


				// Use the dataSource to initialize the flyway object
				Flyway flyway = Flyway.configure()
						.dataSource(dataSource)
						.schemas(schemaName)
						.load();

				// Use the flyway object to do a migrate on webapp startup
				flyway.migrate();


				return dataSource;
			}

		}



 7. Verify that the backend runs flyway everytime on startup
    a. Empty your database
       unix> cd ~/intellijProjects/angularApp1/backend
       unix> mvn flyway:clean

    b. Start-up the backend (Spring should automatically run flyway:migrate)
       In IntelliJ, Select Backend -> Run

    c. Empty your database using mvn flyway:clean
       unix> cd ~/intellijProjects/angularApp1/backend
       unix> mvn flyway:info

       You should see this:
       +-----------+---------+------------------------------+--------+---------------------+---------+
       | Category  | Version | Description                  | Type   | Installed On        | State   |
       +-----------+---------+------------------------------+--------+---------------------+---------+
       |           |         | << Flyway Schema Creation >> | SCHEMA | 2020-06-07 18:33:25 | Success |
       | Versioned | 1.1     | baseline                     | SQL    | 2020-06-07 18:33:25 | Success |
       +-----------+---------+------------------------------+--------+---------------------+---------+


 NOTES:
  A) Spring will *NOT* automatically run flyway if it can find a DataSource object
  B) The DataSourceConfig creates the DataSource Spring Bean
  C) The DataSourceConfig method runs flyway migrate
  C) If you do not want flyway to run, then remove this code or put a property to block it





How to manually run flyway-migrate on startup (using java code)
---------------------------------------------------------------
 1. Edit the backend/src/main/resources/application.yaml
    Add these properties:
        spring.flyway.enabled: false


 2. Edit the DataSourceConfig class
    a. Add the schema name value annotation

     	@Value("${app.datasource.schema}")
    	private String schemaName;


	b. Change your DataSourceConfig.dataSource() method by *ADDING* these lines to it:

        // Use the dataSource to initialize the flyway object
        Flyway flyway = Flyway.configure()
                .dataSource(dataSource)
                .schemas(schemaName)
                .load();

        // Use the flyway object to do a migrate on webapp startup
        flyway.migrate();


   So, your method should look like this:
            @Bean
            public DataSource dataSource() {
                HikariConfig hikariConfig = new HikariConfig();

                hikariConfig.setDriverClassName(this.driverClassName);
                hikariConfig.setJdbcUrl(this.url);
                hikariConfig.setUsername(this.username);
                hikariConfig.setPassword(this.password);
                hikariConfig.setMaximumPoolSize(this.maxPoolSize);
                hikariConfig.setConnectionTestQuery("SELECT 1");
                hikariConfig.setPoolName("app1_jdbc_connection_pool");

                HikariDataSource dataSource = new HikariDataSource(hikariConfig);


				// Use the dataSource to initialize the flyway object
				Flyway flyway = Flyway.configure()
						.dataSource(dataSource)
						.schemas(schemaName)
						.load();

				// Use the flyway object to do a migrate on webapp startup
				flyway.migrate();


                return dataSource;
            }
