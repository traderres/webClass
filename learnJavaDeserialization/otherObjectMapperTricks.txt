Other Object Mapper Tricks
--------------------------

 1. Problem:  ObjectMapper works with Java objects but not Scala objects
    Solution: Register the scala module with your objectMapper

        // Register the scala module so that the objectMapper successfully converts arrays and maps within in the object
        // Used if working with Scala maps
        objectMapper.registerModule(DefaultScalaModule$.MODULE$);



 2. Problem:  ObjectMapper does not escape non-ascii fields
    Solution: Tell objectMapper to escape non-ascii fields

        // Tell the ObjectMappers to Escape Non-ASCII fields
        objectMapper.getFactory().configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);

		*OR*

        // Tell the ObjectMappers to Escape Non-ASCII fields
        objectMapper.getFactory().configure(JsonWriteFeature.ESCAPE_NON_ASCII.mappedFeature(), true);



 3. Problem:  ObjectMapper does not indent output
    Solution: Tell ObjectMapper to indent output (when converting Object to JSON)

        // Indent output (for debugging purposes)
        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);



 4. Problem:  ObjectMapper returns JSON in camel case but I need it as snake case
    Solution: Tell ObjectMapper to convert Objects to JSON in snake case

        // Tell the object mapper to convert Objects to snake case
        // For example:  report.getDisplayName --> "display_name" in the JSON
        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);

        // If using newer jackson-databind
        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);



 5. Problem:  I want the ObjectMapper to ignore null fields when converting Java to JSON
    Solution: Tell ObjectMapper to ignore null fields

        // Tell the ObjectMapper to exclude null values;
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);



 6. Problem:  I want the ObjectMapper to ignore *certain* fields when converting Java to JSON
    Solution: Create a filter so that the ObjectMapper ignores certain fields

    a. Create a PropertyFilterMixIn class
        package com.lessons;

        import com.fasterxml.jackson.annotation.JsonFilter;

        @JsonFilter("filter properties by name")
        public class PropertyFilterMixIn {

        }


    b. Create a filter and apply it to your ObjectMapper
        // Tell the object mapper to convert Objects to snake case
        // For example:  report.getDisplayName --> "display_name" in the JSON
        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);

        // Create a sample Record Object
        RecordDto recordDto = new RecordDto();
        recordDto.setId(5);
        recordDto.setDisplayName("report 1");
        recordDto.setCreatedDate(getCurrentTimestamp());

        // Create a filterProvider to exclude these fields
        String[] ignoredFieldNames = { "display_name", "created_date" };
        FilterProvider filterProvider = new SimpleFilterProvider()
                .addFilter("filter properties by name", SimpleBeanPropertyFilter.serializeAllExcept(ignoredFieldNames));

        // Tell the ObjectMapper to use the filterProvider (so that the java-to-json ignores these fields)
        objectMapper.addMixIn(Object.class, PropertyFilterMixIn.class);
        objectMapper.setFilterProvider(filterProvider);


    c. Use your ObjectMapper to convert your Java object to JSON (excluding certain fields)
        // Convert the Java object into a JSON string (but exclude display_name and created_date)
        String jsonForObject = objectMapper.writeValueAsString(recordDto);
        logger.debug("sJsonBulkRequest={}", jsonForObject);


