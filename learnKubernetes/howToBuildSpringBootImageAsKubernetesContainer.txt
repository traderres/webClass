How to Build Spring Boot Image as Kubernetes Container
------------------------------------------------------

Assumptions:
 A) You have Docker installed  (needed to run Kubernetes)
 B) You have Kubernetes installed
 C) You can build the web app

References
----------
https://spring.io/guides/gs/spring-boot-kubernetes/


Procedure
---------
 1. Build the angular app1
    unix> cd ~/intellijProjects/angularApp1

 2. Build the docker image  **MANUALLY**
    unix> cd backend
    unix> mvn spring-boot:build-image

    [INFO] Successfully built image 'docker.io/library/backend:1.0-SNAPSHOT'


 3. Run the image **MANUALLY*
    NOTE:  Use the --network=host so that the docker image can connect to your local database and local ES
    unix> docker run --network=host -p 8080:8080   docker.io/library/backend:1.0-SNAPSHOT

 4. Connect to the webapp
    a. Open a browser
    b. Connect to http://localhost:8080/app1


 5. Deploy the application to Kubernetes
    a. Have kubernetes create the deployment.yaml file
       unix> kubectl create deployment demo --image=docker.io/library/backend:1.0-SNAPSHOT --dry-run -o=yaml > /tmp/deployment.yaml
       unix> echo --- >> /tmp/deployment.yaml
       unix> kubectl create service clusterip demo --tcp=8080:8080 --dry-run -o=yaml >> /tmp/deployment.yaml

       Your /tmp/ qqdeployment.yaml should look something like this:
		   apiVersion: apps/v1
		   kind: Deployment
		   metadata:
			 creationTimestamp: null
			 labels:
			   app: demo
			 name: demo
		   spec:
			 replicas: 1
			 selector:
			   matchLabels:
				 app: demo
			 strategy: {}
			 template:
			   metadata:
				 creationTimestamp: null
				 labels:
				   app: demo
			   spec:
				 containers:
				 - image: docker.io/library/backend:1.0-SNAPSHOT
				   name: backend
				   resources: {}
		   status: {}
		   ---
		   apiVersion: v1
		   kind: Service
		   metadata:
			 creationTimestamp: null
			 labels:
			   app: demo
			 name: demo
		   spec:
			 ports:
			 - name: 8080-8080
			   port: 8080
			   protocol: TCP
			   targetPort: 8080
			 selector:
			   app: demo
			 type: ClusterIP
		   status:
			 loadBalancer: {}

  b. Edit the deployment.yaml file (if needed)

  c. Apply the deployment.yaml file
     unix> kubectl apply -f /tmp/deployment.yaml

     You should see the following:
	     deployment.apps/demo created
    	 service/demo created

  d. Checkout what's running
     unix> kubectl get all

     You should see something like this:

     NAME                        READY   STATUS         RESTARTS   AGE
     pod/demo-76c455b9d9-clglj   0/1     ErrImagePull   0          31s

     NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
     service/demo         ClusterIP   10.108.144.192   <none>        8080/TCP   31s        <-- The container has been running for 31 seconds
     service/kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP    85m

     NAME                   READY   UP-TO-DATE   AVAILABLE   AGE
     deployment.apps/demo   0/1     1            0           31s

     NAME                              DESIRED   CURRENT   READY   AGE
     replicaset.apps/demo-76c455b9d9   1         1         0       31s


 5. Verify that the pod is good
    unix> kubectl describe pod

    You should see the following:
          Name:             demo-76c455b9d9-clglj
          Namespace:        default
          Priority:         0
          Service Account:  default
          Node:             minikube/192.168.49.2
          Start Time:       Thu, 15 Dec 2022 20:07:34 -0500
          Labels:           app=demo
                            pod-template-hash=76c455b9d9
          Annotations:      <none>
          Status:           Pending
          IP:               172.17.0.5
          IPs:
            IP:           172.17.0.5
          Controlled By:  ReplicaSet/demo-76c455b9d9
          Containers:
            backend:
              Container ID:
              Image:          docker.io/library/backend:1.0-SNAPSHOT
              Image ID:
              Port:           <none>
              Host Port:      <none>
              State:          Waiting
                Reason:       ImagePullBackOff
              Ready:          False
              Restart Count:  0
              Environment:    <none>
              Mounts:
                /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rxdz7 (ro)
          Conditions:
            Type              Status
            Initialized       True
            Ready             False
            ContainersReady   False
            PodScheduled      True
          Volumes:
            kube-api-access-rxdz7:
              Type:                    Projected (a volume that contains injected data from multiple sources)
              TokenExpirationSeconds:  3607
              ConfigMapName:           kube-root-ca.crt
              ConfigMapOptional:       <nil>
              DownwardAPI:             true
          QoS Class:                   BestEffort
          Node-Selectors:              <none>
          Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                                       node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
          Events:
            Type     Reason     Age                     From               Message
            ----     ------     ----                    ----               -------
            Normal   Scheduled  9m36s                   default-scheduler  Successfully assigned default/demo-76c455b9d9-clglj to minikube
            Normal   Pulling    8m10s (x4 over 9m36s)   kubelet            Pulling image "docker.io/library/backend:1.0-SNAPSHOT"
            Warning  Failed     8m9s (x4 over 9m36s)    kubelet            Failed to pull image "docker.io/library/backend:1.0-SNAPSHOT": rpc error: code = Unknown desc = Error response from daemon: pull access denied for backend, repository does not exist or may require 'docker login': denied: requested access to the resource is denied
            Warning  Failed     8m9s (x4 over 9m36s)    kubelet            Error: ErrImagePull
            Warning  Failed     7m41s (x6 over 9m35s)   kubelet            Error: ImagePullBackOff
            Normal   BackOff    4m27s (x20 over 9m35s)  kubelet            Back-off pulling image "docker.io/library/backend:1.0-SNAPSHOT"


 6. Connect to the application in kubernetes
    unix> kubectl port-forward svc/demo 8080:8080
