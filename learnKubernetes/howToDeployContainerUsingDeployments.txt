How to Deploy a Web App Image using Deployments to MiniKube
-----------------------------------------------------------

Assumptions
 A) You have MiniKube installed
 B) You followed the steps in learnDocker/howToBuildAndPushSpringBootImagesUsingJibMavenPlugin.txt to make a docker image


Procedure
---------
 1. Erase any local docker image
    unix> docker rmi  traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT
    unix> docker rmi  traderres/my-public-repo:sync-service-1.0.8-SNAPSHOT


 2. Build your image
    unix> cd ~/intellijProjects/sf328
    unix> mvn clean package -Pprod -PbuildImage

    This generates 2 local images:
       traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT
       traderres/my-public-repo:sync-service-1.0.8-SNAPSHOT


 3. Push these up to your docker repository
    unix> docker login
    unix> docker  push  traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT
    unix> docker  push  traderres/my-public-repo:sync-service-1.0.8-SNAPSHOT


 4. Create the pod
    a. Create the pod file
       unix> vi sf328-backend-pod.yaml

#############################################################################
# sf328-backend-pod.yaml
#
# Use JAVA_TOOL_OPTIONS to set the container's JVM's java options
# Make sure the container has enough memory for the container and JVM
#    spec.resource.limits.memory > JVM memory + container memory
#############################################################################
apiVersion: v1
kind: Pod
metadata:
  name: sf328-backend-pod
  labels:
    app: sf328-backend
spec:
  containers:
  - image: traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT
    imagePullPolicy: Always
    name: sf328-backend
    ports:
    - containerPort: 8080
      protocol: TCP
    env:
    - name: JAVA_TOOL_OPTIONS
      value:  -Xms256m -Xmx256m -Demail.mode=off
    resources:
      limits:
         memory: "300M"




	b. Create the pod
       unix> kubectl create -f sf328-backend-pod.yaml

    c. Verify that the pod is running
       unix> kubectl get pods

	   NAME                READY   STATUS    RESTARTS   AGE
	   sf328-backend-pod   1/1     Running   0          3s


    d. Stop the pod
       unix> kubectl delete pod sf328-backend-pod


 4. Create the external load balancer service
    ASSUMPTION:  We want to connect to this pod using 443
                 The java app server inside the pod is listening on port 8443

    a. Start the minikube tunnel  (so that the load balancer service works running locally)
       unix> minikube tunnel

    b. Create the service file
       unix> vi sf328-svc-loadbalancer.yaml


#############################################################################
# sf328-svc-loadbalancer.yaml
#
# Use sessionAffinity=ClientIP so that requests go to the same app server
#############################################################################
apiVersion: v1
kind: Service
metadata:
  name: sf328-loadbalancer
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app: sf328-backend




    c. Create the load balancer service
       unix> kubectl create -f sf328-svc-loadbalancer.yaml

    d. Verify that the load balancer service has an external IP address
       unix> kubectl get service

		NAME                 TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)         AGE
		kubernetes           ClusterIP      10.96.0.1       <none>          443/TCP         76d
		sf328-loadbalancer   LoadBalancer   10.97.122.147   10.97.122.147   443:30887/TCP   3s


	   NOTE:  External ip is 10.97.122.147


 5. Create the deployment (using the Recreate strategy)
    a. Create the deployment file
       unix> vi sf328-deployment-v1.yaml

#############################################################################
#  sf328-deployment-v1.yaml
#############################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sf328-deployment

spec:
  selector:
    matchLabels:
      app: sf328-backend
  replicas: 3
  strategy:
    type:  Recreate
  template:
    metadata:
      name: kubia
      labels:
         app: sf328-backend
    spec:
      containers:
      - image: traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT
        imagePullPolicy: IfNotPresent
        name: java-backend



    b. Create a Deployment
       unix> kubectl create -f sf328-deployment-v1.yaml

    c. Verify that the deployment rolled out
       unix> kubectl rollout status deployment sf328-deployment
       deployment "sf328-deployment" successfully rolled out

    d. Verify that there are 3 running pods
       unix> kubectl get pods -Lapp

		NAME                                READY   STATUS    RESTARTS   AGE   APP
		sf328-deployment-5c5d59f569-chl6v   1/1     Running   0          22s   sf328-backend
		sf328-deployment-5c5d59f569-wtksm   1/1     Running   0          22s   sf328-backend
		sf328-deployment-5c5d59f569-xtxrc   1/1     Running   0          22s   sf328-backend



 6. Attempt to connect to it
    NOTE:  The external IP is 10.97.122.147:443

    a. Open a browser that has the john.smith.p12

    b. Connect to https://10.97.122.147/sf
       -- You should see the webapp


 7. Examine the logs from one of the pods
    unix> kubectl logs -f sf328-deployment-5c5d59f569-chl6v
    -- You should see that the web app is up


 8. Stop the deployment (by deleting the deployment)
    a. Delete the deployment
       unix> kubectl delete deployment sf328-deployment

    b. Get the status of the pods
       unix> kubectl get pods -Lapp

		NAME                                READY   STATUS        RESTARTS   AGE     APP
		sf328-deployment-5c5d59f569-chl6v   1/1     Terminating   0          2m36s   sf328-backend
		sf328-deployment-5c5d59f569-wtksm   1/1     Terminating   0          2m36s   sf328-backend
		sf328-deployment-5c5d59f569-xtxrcs  1/1     Terminating   0          2m36s   sf328-backend



Part 2:  Tell Kubernetes to Upgrade to a Newer Version
------------------------------------------------------
 1. Use maven to set the version to 1.0.9-SNAPSHOT
    unix> cd ~/intellijProjects/sf328
    unix> mvn versions:set -DnewVersion=1.0.9-SNAPSHOT


 2. Build your image
    unix> cd ~/intellijProjects/sf328
    unix> mvn clean package -Pprod -PbuildImage

    This generates 2 local images:
       traderres/my-public-repo:sf328-backend-1.0.9-SNAPSHOT
       traderres/my-public-repo:sync-service-1.0.9-SNAPSHOT


 3. Push these up to your docker repository
    unix> docker login
    unix> docker  push  traderres/my-public-repo:sf328-backend-1.0.9-SNAPSHOT
    unix> docker  push  traderres/my-public-repo:sync-service-1.0.9-SNAPSHOT


 4. Startup the load balancer service
    a. Start the minikube tunnel  (so that the load balancer service works running locally)
       unix> minikube tunnel

    b. Create the load balancer service
       unix> kubectl create -f sf328-svc-loadbalancer.yaml

    c. Verify that the load balancer service has an external IP address
       unix> kubectl get service

		NAME                 TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)         AGE
		kubernetes           ClusterIP      10.96.0.1        <none>           443/TCP         76d
		sf328-loadbalancer   LoadBalancer   10.111.164.170   10.111.164.170   443:30063/TCP   8s

    	   NOTE:  External ip is 10.111.164.170



 5. Startup the old deployment
    a. Create a Deployment
       unix> kubectl create -f sf328-deployment-v1.yaml

    b. Verify that the deployment rolled out
       unix> kubectl rollout status deployment sf328-deployment
       deployment "sf328-deployment" successfully rolled out

    c. Verify that there are 3 running pods
       unix> kubectl get pods -Lapp

 		NAME                                READY   STATUS    RESTARTS   AGE   APP
 		sf328-deployment-5c5d59f569-chl6v   1/1     Running   0          22s   sf328-backend
 		sf328-deployment-5c5d59f569-wtksm   1/1     Running   0          22s   sf328-backend
 		sf328-deployment-5c5d59f569-xtxrc   1/1     Running   0          22s   sf328-backend

    d. Connect to the webapp by going to https://10.111.164.170/sf
       -- Verify that you see the webapp come up

    e. Get the current web app version
       Go to https://10.111.164.170/sf/api/version
       -- Verify that you see 1.0.8-SNAPSHOT


 6. Tell Kubernetes to **UPGRADE** from 1.0.8-SNAPSHOT to 1.0.9-SNAPSHOT
    a. Tell Kubernetes to upgrade to 1.0.9-SNAPSHOT by updating the deployment template
       unix> kubectl set image deployment sf328-deployment java-backend=traderres/my-public-repo:sf328-backend-1.0.9-SNAPSHOT

    b. Verify that the deployment rolled out
       unix> kubectl rollout status deployment sf328-deployment
       deployment "sf328-deployment" successfully rolled out

    c. Verify that there are 3 running pods
       unix> kubectl get pods -Lapp

		NAME                                READY   STATUS    RESTARTS   AGE   APP
		sf328-deployment-65dd9778db-68h86   1/1     Running   0          9s    sf328-backend
		sf328-deployment-65dd9778db-s6ljh   1/1     Running   0          11s   sf328-backend
		sf328-deployment-65dd9778db-tq2ng   1/1     Running   0          15s   sf328-backend

    d. Wait about 20 seconds for the 3 pods to startup

    e. Connect to the webapp by going to https://10.111.164.170/sf
       -- Verify that you see the webapp come up

    f. Get the current web app version
       Go to https://10.111.164.170/sf/api/version
       -- Verify that you see 1.0.9-SNAPSHOT


 8. Examine the logs from one of the pods
    unix> kubectl logs -f sf328-deployment-65dd9778db-68h86
    -- You should see that the web app is up



 9. Stop the deployment (by deleting the deployment)
    a. Delete the deployment
 	   unix> kubectl delete deployment sf328-deployment

    b. Get the status of the pods
	   unix> kubectl get pods -Lapp

		NAME                                READY   STATUS        RESTARTS   AGE     APP
		sf328-deployment-5c5d59f569-chl6v   1/1     Terminating   0          2m36s   sf328-backend
		sf328-deployment-5c5d59f569-wtksm   1/1     Terminating   0          2m36s   sf328-backend
		sf328-deployment-5c5d59f569-xtxrcs  1/1     Terminating   0          2m36s   sf328-backend



NOTE:  In AWS to get the external service to work
-------------------------------------------------
 1. Delete existing deployment
    unix> kubtectl delete sf328-deployment

 2. Update the deployment script by adding the "env" section with Java settings
    Update the deployment script by adding hostAliases  (so it adds an entry to the container's /etc/hosts with to the deployment script)
    NOTE:  The container does not have DNS so we enter this so it can resolve the URL of the keycloak server

    unix> vi sf328-deployment-v3.yaml

#############################################################################
#  sf328-deployment-v3.yaml
#############################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sf328-deployment

spec:
  selector:
    matchLabels:
      app: sf328-backend
  replicas: 1
  strategy:
    type:  Recreate
  template:
    metadata:
      name: kubia
      labels:
         app: sf328-backend
    spec:
      hostAliases:
      - ip: "160.1.28.118"
        hostnames:
          - "ec2-160-1-28-118.us-gov-west-1.compute.amazonaws.com"
      containers:
      - image: 527362555097.dkr.ecr.us-gov-west-1.amazonaws.com/poc:sf328-backend-1.0.24-SNAPSHOT
        imagePullPolicy: Always
        name: java-backend
        env:
          - name: JAVA_TOOL_OPTIONS
            value: -Xms250m -Xmx250m -Djavax.net.debug=off -Dserver.forward-headers-strategy=NATIVE -Djavax.net.ssl.trustStore=/sf328-backend/src/main/prod_resources/custom.cacerts -Djavax.net.ssl.trustStorePassword=changeit -Dspring.security.oath2.registration.keycloak.client-id=ENTER_CLIENT_ID_HERE


 3. Verify that there are no special chars in the file by looking for them
    unix> using cat -v -e sf328-deployment-v3.yaml

 4. *FIRST* We create the deployment
    unix> kubectl create -f sf328-deployment-v3.yaml

 5. *SECOND* Have AWS create and expose the load balancer service
    unix> kubectl expose deployment sf328-deployment --type=LoadBalancer --name=sf328-loadbalancer --port=443

    NOTE: At this point, the load balancer service should have an external ip


 6. Modify the created load balancer service by setting
    unix> kubectl edit service sf328-loadbalancer

      targetPort=8443
      sessionAffinity=ClientIP


 7. Attempt to hit it
    a. Get the external IP address from the services
       unix> kubectl get services sf328-loadbalancer

             Get the hostname from the EXTERNAL-IP and port

    b. Use a browser to connect to it

