How to Use Your Certificate Authority to Make a Server Cert with Subject Name Alternative (for Centos 7)
--------------------------------------------------------------------------------------------------------

Assumptions:
 A) You already have a Root Certificate Authority Created
    [see howToUseYourCertAuthority_InitialSetup.txt]
 B) You want to create your own self-signed client certificate in .p12 format



Procedures
----------
 1. Generated the keyfile
    NOTE:  The cn=whatever should be replaced with cn=myserver.something.com
    unix> cd
    unix> rm -rf   /tmp/server_cert
    unix> mkdir -p /tmp/server_cert
    unix> cd       /tmp/server_cert
    unix> export ALIAS=myServerCert2
    unix> export SERVER_HOSTNAME=localhost.localdomain
    unix> keytool -genkey -v -alias ${ALIAS}   -dname "cn=${SERVER_HOSTNAME}, ou=Components, ou=whatever, c=US"  -keysize 4096 -keyalg RSA -sigalg SHA256withRSA  -keystore myKeystore.jks -validity 3600
             Enter keystore password:             changeit
             Re-enter new password:               changeit
             Enter key password for devKeystor>   <press Enter>

        -- Now, you have created myKeystore.jks



 2. Generate a certificate signing request (for your server cert)
    unix> export SUBJ_NAME_ALT=DNS:my-server-name.com,IP:168.1.28.118         # Put the hostnames **FIRST** and IPs **SECOND**
    unix> keytool -certreq -v -alias ${ALIAS}  -ext SAN=${SUBJ_NAME_ALT}    -keyalg RSA -sigalg SHA256withRSA -keystore myKeystore.jks  -file myKeystore.csr  -validity 3600
    Enter keystore password:      changeit

        -- Now, you have created myKeystore.csr that has an IP subject alternative of 160.1.28.118





 3. Sign the Client CSR (generate server.cert.notes)
    a. Create an extension file that has your subject name alternative
       NOTE:  You must enter your subject name alternatives here in the [alt_names] section
       unix> rm /tmp/v3.ext
       unix> vi /tmp/v3.ext

       authorityKeyIdentifier=keyid,issuer
       basicConstraints=CA:FALSE
       keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
       subjectAltName = @alt_names

       [alt_names]
       DNS.1 = my-server-name.com        <-- WARNING:  Put the hostname entries **FIRST** and IP addresses **SECOND** to make firefox happy
       DNS.2 = 160.1.28.118              <-- Replace these lines with your subject name alternatives



    b. Sign the cert using the extensions file
       unix> cd ~/root-ca
       unix> openssl ca -batch  -extfile /tmp/v3.ext   -config conf/openssl.cnf -in /tmp/server_cert/myKeystore.csr -out /tmp/server_cert/server.cert.notes

       You should see this:
            Using configuration from conf/openssl.cnf
            Loading 'screen' into random state - done
            Check that the request matches the signature
            Signature ok
            Certificate Details:
                    Serial Number: 2 (0x2)
                    Validity
                        Not Before: Jan  7 04:12:04 2016 GMT
                        Not After : Jan  6 04:12:04 2017 GMT
                    Subject:
                        countryName               = US
                        organizationalUnitName    = whatever
                        organizationalUnitName    = Components
                        commonName                = whatever
                    X509v3 extensions:
                        X509v3 Basic Constraints:
                            CA:FALSE
                        X509v3 Subject Key Identifier:
                            98:2D:03:81:FE:84:64:48:B0:0F:08:63:FB:FF:94:A9:2F:F5:38:EA
                        X509v3 Authority Key Identifier:
                            keyid:88:98:A1:46:98:5A:5A:C0:8E:78:32:36:65:E7:D9:6B:25:49:E3:DC
                            DirName:/C=US/ST=Virginia/L=Merrifield/O=Example Inc Root/CN=Example Inc Root CA/emailAddress=adam@zztop.com
                            serial:E4:59:C3:2F:EF:D6:1B:05

                        Netscape CA Revocation Url:
                            https://www.example.com/example-ca-crl.pem
            Certificate is to be certified until Jan  6 04:12:04 2017 GMT (365 days)

            Write out database with 1 new entries
            Data Base Updated
            unable to write 'random state'


 4. Extract the signed server certificate from the c:\temp\server_cert\server.cert.notes
    a. Open this file with notepad:  /tmp/server_cert/server.cert.notes
       unix> vi /tmp/server_cert/server.cert.notes
    b. Highlight the section between *AND* including ----BEGIN CERTIFICATE---- to ---END CERTIFICATE----
          -----BEGIN CERTIFICATE-----

          -----END CERTIFICATE-----

    c. Copy + Paste it into this file:  /tmp/server_cert/server.cert
       unix> vi /tmp/server_cert/server.cert
             +paste in



 5. Import the public CA file into myTruststore.jks
    unix> keytool -import -v -file ~/root-ca/public/root.pem -trustcacerts -alias ca -keystore /tmp/server_cert/myTruststore.jks -storepass changeit
    When prompted to "Trust this certificate?" --> enter "yes"

    -- Now, you have created /tmp/server_cert/myTruststore.jks



 6. Import the public CA file into myKeystore.jks
    unix> keytool -import -v -file ~/root-ca/public/root.pem  -trustcacerts -alias ca -keystore /tmp/server_cert/myKeystore.jks -storepass changeit
    When prompted to "Trust this certificate?" --> enter "yes"



 7. Import the signed server certificate into myKeystore.jks
    unix> keytool -import -v -file /tmp/server_cert/server.cert -alias ${ALIAS} -keystore /tmp/server_cert/myKeystore.jks
    --> enter password:  changeit


    Now, you should have these files:
       /tmp/server_cert/myTruststore.jks
       /tmp/server_cert/myKeystore.jks




    Now, you should be able to use this for your Tomcat connector
    WARNING:  keyAlias should match the ALIAS you set at the top of this file

             <Connector port="8443"
                 protocol="org.apache.coyote.http11.Http11Protocol"
                 maxThreads="150"
                 SSLEnabled="true"
                 scheme="https"
                 secure="true"
                 clientAuth="true"
                 sslProtocol="TLS"
                 keystoreFile="c:/temp/server_cert/myKeystore.jks"
                 keystorePass="changeit"
                 keystoreType="JKS"
                 truststoreFile="c:/temp/server_cert/myTruststore.jks"
                 truststorePass="changeit"
                 truststoreType="JKS"
                 keyAlias="devKeystore"
            />




