Boring Lecture:  ElasticSearch Fundamentals, Pros & Cons
--------------------------------------------------------
ElasticSearch was introduced in 2010.
-- It has an indexer and search API.
-- It is a No-SQL data store with real-time search and analytics capabilities.
-- It's document-oriented
-- It's scalable by default



Advantages of ES
----------------
 1. Ultra fast search speed
 2. Its distributed model makes it scale out easily and efficiently
 3. Rich analytic functionality
 4. Easy to get started with
 5. Moving from prototypes to production is often not difficult
 6. ElasticSearch is java-bases so it runs on any platform (Windows, Mac, or Unix)



Disadvantages of ES
-------------------
 1. No transaction support / no rollbacks
    -- If you do a bulk update to change 5 records, it may change 4 records and not change the 5th   (there is no rolling back)
       NOTE:  Our work-around is to use the SyncService to re-create the indexes each night

 2. Security is not a feature enabled by default
    Open-Source free version of ElasticSearch has about zero security
    NOTE:  Our work-around is that the ElasticSearch nodes are INSIDE our cluster.  Only the backend can reach it directly.

 3. Updating records is expensive

 4. You cannot just add a field to your index (like you can add a column to a table)
    -- Instead, you must rebuild the **ENTIRE** index
       NOTE:  Our work-around is to use the SyncService to re-create the indexes for us

 5. Hard to debug issues




ElasticSearch:  We use it as a high-speed searchable cache
 + It is not the record of truth  (that is the database)
 + Searches are faster than database queries




ElasticSearch REST API
----------------------
ES has a Java API
ES has a REST API
JSON is sent to the REST API and
JSON object contains keys and values
JSON is easy for an application to parse and generate



ElasticSearch is *elastic*
--------------------------
It's clustered by default
You call it a cluster even if you run it on a single server
You can always add more servers to increase capacity and fault tolerance
You can remove servers from the cluster to reduce costs as well


Storing Data in ElasticSearch
-----------------------------
In SQL database,  data is stored as records or rows in a table
In ElasticSearch, data is stored as documents in an index
-- The concepts are similar
-- With database rows in a table, you have columns
-- With an ES document, you have keys and values

ES document is more flexible than a row because a document can be hierarchical
 + A single key can have a string value
 + A single key can have an array of of strings
 + A single key can have key-value pairs (sub-object)

The idea is to encourage you to keep all of the data that belongs to a logical entity in the *same* document







