Exercise 1c:  Create a Report Index V3 / Search with ngrams
-----------------------------------------------------------
We want to create a mapping called "reports"  that has a few fields:  actors, description, and priority
We want to populate it with some sample data
We want to filter the priority -- type-in any character and match results

Approach:
 1) Add a new tokenizer called "my_ngram_tokenizer"
 2) Add a new analyzer  called "my_ngram_analyzer"
 3) Apply the analyzer to your sub field



Exercises
---------
 1. Connect to your kibana console




 2. Delete the existing reports index (if it exists)




 3. Create a new reports index that holds 3 text fields:
 		actors
 		description
 		priority




 4. Add the case_insensitive_normalizer  (so we can sort correctly on fields)




 5. Update the mapping so we can do filtering on n-grams
    a) Add a new tokenizer called "my_ngram_tokenizer" / This will break-up the strings into tokens of 1-25 chars in length
    b) Add a new analyzer  called "my_ngram_analyzer"  / convert the strings to lowercase
    c) Apply the analyzer to your field                / so we can filter on any characters (but they must be lowercase)






 6. Populate the reports index with some data
 	  _id=1 / priority="low"  / actors is an array that holds 1 name:  John Smith        / description holds this:  he really likes o'reilly
  	  _id=2 / priority="LOW"  / actors is an array that holds 1 name:  george washington / description holds this:  depending on the kind query, you might want to go different ways with it
  	  _id=3 / priority="high" / actors is an array that holds 1 name:  adam Smith
  	  _id=4 / priority="HIGH" / actors is an array that holds 1 name:  Adam Smith 2      / description holds this:  This description is for record four
  	  _id=5 / priority="HIGH" / actors is an array that holds 3 names:                   / description holds this:  There are too many singers from the 1980s listed here.  Get a life!!
  	                                  Pat Benetar, Michael Jackson, and George Michael





 7. Search the reports index for everything






 8. Run a search and search by ngram (single-char) / match all records with a priority that contain "ig"






 9. Run a search and search for all records that have a *DESCRIPTION* and / look for all priorities that contain "ig"





10. Run a search and search by ngram (single-char) / match all records with a priority that contain "ig"
    *AND* sort by the priority field
