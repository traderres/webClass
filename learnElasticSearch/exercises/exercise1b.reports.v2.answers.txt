Exercise 1b:  Create a Report Index V2  (Answers)
-------------------------------------------------
We want to create a mapping called "reports"  that has a few fields:  actors, description, and priority
We want to populate it with some sample data

Improvement:  We want to do case-insensitive searches on the priority field


Exercises
---------
 1. Connect to your kibana console
    Go to http://localhost:5601/app/dev_tools#/console
    *OR*
    Go to http://localhost:5601/
    Press "Explore on my own"
    Press "Dev tools"




 2. Delete the existing reports index (if it exists)
    DELETE /reports

    NOTE:  You will get an "index_not_found_exception" if the index did not exist first



 3. Create a new reports index that holds 3 text fields:
 		actors
 		description
 		priority     / adjust the priority field so it can be searched as case-sensitive *AND* case-insensitive


		PUT /reports
		{
		   "settings": {
			 "refresh_interval": "1s"
		},

		"mappings": {

					"dynamic": "strict",
						"properties": {
							"actors": {
								 "type": "text"
								},
							"description": {
								"type": "text"
							},
							"priority": {
								 "type": "text",
								 "fields": {
									"raw": {
									   "type": "keyword"
								   }
								 }
							}
						}
				   }

		}



 3. Populate the reports index with some data
 	  _id=1 / priority="low"  / actors is an array that holds 1 name:  John Smith        / description holds this:  he really likes o'reilly
  	  _id=2 / priority="LOW"  / actors is an array that holds 1 name:  george washington / description holds this:  depending on the kind query, you might want to go different ways with it
  	  _id=3 / priority="high" / actors is an array that holds 1 name:  adam Smith
  	  _id=4 / priority="HIGH" / actors is an array that holds 1 name:  Adam Smith 2      / description holds this:  This description is for record four
  	  _id=5 / priority="HIGH" / actors is an array that holds 3 names:                   / description holds this:  There are too many singers from the 1980s listed here.  Get a life!!
  	                                  Pat Benetar, Michael Jackson, and George Michael


    POST _bulk
    { "index": { "_index": "reports",  "_id": 1 }}
    { "priority": "low", "actors": "John Smith", "description": "he really likes o'reilly"}
    { "index": { "_index": "reports",  "_id": 2 }}
    { "priority": "LOW", "actors": "george washington", "description": "depending on the kind query, you might want to go different ways with it"}
    { "index": { "_index": "reports",  "_id": 3 }}
    { "priority": "high", "actors": "adam Smith"}
    { "index": { "_index": "reports",  "_id": 4 }}
    { "priority": "HIGH", "actors": "Adam Smith 2", "description": "This description is for record four"}
    { "index": { "_index": "reports",  "_id": 5 }}
    { "priority": "HIGH", "actors": ["Pat Benetar", "Michael Jackson", "George Michael"], "description": "There are too many singers from the 1980s listed here.  Get a life!!"}

    NOTE:  If there are no errors, then you should see
        {
           "took": 69,
           "errors": false,          <------ no errors.  It worked flawlessly
           "items": [
              {
                ...lots of stuff....
              }
           ]
        }





 4. Search the priority field so it matches "HIGH", "high", "HiGH"  (case insensitive)
    POST /reports/_search
       {
          "query": {
              "query_string": {
                 "query": "priority:hiGH"
              }
          },
          "size": 25
       }




 5. Run a search and *SORT* by priority field
    POST /reports/_search
    {
          "query": {
              "match_all": {}
          },
           "size": 25,
           "sort": [
                 {
                     "priority": {
                       "order": "asc",
                       "missing" : "_first"
                     }
                   }
                 ]

    }




  PROBLEM #1:  You cannot sort on a text field
               But, you can sort by the keyword field -- priority.raw



    Run a search and *SORT* by priority.raw field
    POST /reports/_search
    {
          "query": {
              "match_all": {}
          },
           "size": 25,
           "sort": [
                 {
                     "priority.raw": {
                       "order": "asc",
                       "missing" : "_first"
                     }
                   }
                 ]
    }



  
  PROBLEM #2:  The sorting is not natural language sort of aA bB cC
               Instead, it's sorting like a computer:  A B C a b c

  a. Change the settings to include a case_insensitive_normalizer

    PUT /reports
    {
       "settings": {
        "analysis": {
          "normalizer": {
            "case_insensitive_normalizer": {
              "type": "custom",
              "char_filter": [],
              "filter": [ "lowercase", "asciifolding" ]
            }
          }
        },
        "refresh_interval": "1s"
      },


 b. Create a sub field called "priority.sort" that is a keyword *AND* uses the case_insensitive_normalizer

       "mappings": {

                "dynamic": "strict",
                    "properties": {
                        "actors": {
                             "type": "text"
                         },
                        "description": {
                            "type": "text"
                         },
                        "priority": {
                             "type": "text",
                             "fields": {
                               "raw": {
                                 "type": "keyword"
                               },
                               "sort": {
                                 "type": "keyword",
                                 "normalizer": "case_insensitive_normalizer"
                               }
                             }
                        }
                    }
               }

         }
  
 c. Reload your data

 d. Sort by priority.sort

    POST /reports/_search
        {
          "query": {
              "match_all": {}
          },
           "size": 25,
           "sort": [
                 {
                     "priority.sort": {
                       "order": "asc",
                       "missing" : "_first"
                     }
                   }
                 ]
        }




 

