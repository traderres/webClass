Exercise 1a:  Create a Report Index V1  (Answers)
-------------------------------------------------
We want to create a mapping called "reports"  that has a few fields:  actors, description, and priority
We want to populate it with some sample data




Exercises
---------
 1. Connect to your kibana console
    Go to http://localhost:5601/app/dev_tools#/console
    *OR*
    Go to http://localhost:5601/
    Press "Explore on my own"
    Press "Dev tools"




 2. Delete the existing reports index (if it exists)
    DELETE /reports

    NOTE:  You will get an "index_not_found_exception" if the index did not exist first




 3. Create a new reports index that holds 3 text fields:
 		actors
 		description
 		priority


		PUT /reports
		{
		   "settings": {
			  "refresh_interval": "1s"    <-------------------- The time period automatic refreshes of the an index
			},

		   "mappings": {

				  "dynamic": "strict",   <--------------------- Really important!!  It stops you from putting in crap fields


				  "properties": {
						  "actors": {
							   "type": "text"
						   },
						  "description": {
							  "type": "text"
						  },
						  "priority": {
							   "type": "keyword"
						  }
					 }
				 }

		}



 4. Add a few records to your mapping:
  	  _id=1 / priority="low"  / actors is an array that holds 1 name:  John Smith        / description holds this:  he really likes o'reilly
  	  _id=2 / priority="LOW"  / actors is an array that holds 1 name:  george washington / description holds this:  depending on the kind query, you might want to go different ways with it
  	  _id=3 / priority="high" / actors is an array that holds 1 name:  adam Smith
  	  _id=4 / priority="HIGH" / actors is an array that holds 1 name:  Adam Smith 2      / description holds this:  This description is for record four
  	  _id=5 / priority="HIGH" / actors is an array that holds 3 names:                   / description holds this:  There are too many singers from the 1980s listed here.  Get a life!!
  	                                  Pat Benetar, Michael Jackson, and George Michael


    POST _bulk
    { "index": { "_index": "reports",  "_id": 1 }}
    { "priority": "low", "actors": "John Smith", "description": "he really likes o'reilly"}
    { "index": { "_index": "reports",  "_id": 2 }}
    { "priority": "LOW", "actors": "george washington", "description": "depending on the kind query, you might want to go different ways with it"}
    { "index": { "_index": "reports",  "_id": 3 }}
    { "priority": "high", "actors": "adam Smith"}
    { "index": { "_index": "reports",  "_id": 4 }}
    { "priority": "HIGH", "actors": "Adam Smith 2", "description": "This description is for record four"}
    { "index": { "_index": "reports",  "_id": 5 }}
    { "priority": "HIGH", "actors": ["Pat Benetar", "Michael Jackson", "George Michael"], "description": "There are too many singers from the 1980s listed here.  Get a life!!"}

    NOTE:  If there are no errors, then you should see
        {
           "took": 69,
           "errors": false,          <------ no errors.  It worked flawlessly
           "items": [
              {
                ...lots of stuff....
              }
           ]
        }


 5. Search the reports index for everything

    POST /reports/_search

    *OR*

    POST /reports/_search
    {
       "query": {
           "match_all": {}
       },
       "size": 25
    }




 6. Search the reports that have "GEORGE" in it

    POST /reports/_search
    {
       "query": {
           "query_string": {
              "query": "GEORGE"
           }
       },
       "size": 25
    }


    Examine the output
     {
        "took": 1,                        <-- ES took 1 msec to respond
        "timed_out": false,
        "_shards": {
           "total": 5,
           "successful": 5,
           "failed": 0
        },
        "hits": {
           "total": 2,                   <-- ES found a total of 2 matches
           "max_score": 0.5662132,
           "hits": [                     <-- This is the page of matching hits (up to 25 records per page)
              {
                 "_index": "reports",
                 "_id": "2",
                 "_score": 0.5662132,
                 "_source": {
                    "priority": "LOW",
                    "actors": "george washington",
                    "description": "depending on the kind query, you might want to go different ways with it"
                 }
              },
              {
                 "_index": "reports",
                 "_id": "5",
                 "_score": 0.2824934,
                 "_source": {
                    "priority": "HIGH",
                    "actors": [
                       "Pat Benetar",
                       "Michael Jackson",
                       "George Michael"
                    ],
                    "description": "There are too many singers from the 1980s listed here.  Get a life!!"
                 }
              }
           ]
        }
     }


 7. Search multiple words

    POST /reports/_search
     {
        "query": {
            "query_string": {
               "query": "george washington"
            }
        },
        "size": 25
     }

    -- What results do you get?


 8. Search multiple words with quotes -- e.g., "george washington"

     POST /reports/_search
      {
         "query": {
             "query_string": {
                "query": "\"george washington\""
             }
         },
         "size": 25
      }



 9. Search multiple words with default operator of OR

    POST /reports/_search
    {
       "query": {
           "query_string": {
              "default_operator": "OR",
              "query": "george washington"
           }
       },
       "size": 25
    }


 10. Search multiple words with default operator of AND

     POST /reports/_search
     {
        "query": {
            "query_string": {
               "default_operator": "AND",
               "query": "george washington"
            }
        },
        "size": 25
     }


11. Search with wildcards
     POST /reports/_search
     {
        "query": {
            "query_string": {
               "query": "*life*"
            }
        },
        "size": 25
     }



12. Search for records that have a non-null description
    POST /reports/_search
    {
           "query": {
               "query_string": {
                  "query": "description:*"
               }
           },
           "size": 25
    }


13. Search for records that have a null description
    POST /reports/_search
    {
         "query": {
             "query_string": {
                "query": "NOT description:*"
             }
         },
         "size": 25
    }

    *OR*

    POST /reports/_search
    {
         "query": {
             "query_string": {
                "query": "!description:*"
             }
         },
         "size": 25
    }

    *OR*

    POST /reports/_search
    {
         "query": {
             "query_string": {
                "query": "-description:*"
             }
         },
         "size": 25
    }




14. Search for records that have a high priority
    POST /reports/_search
       {
          "query": {
              "query_string": {
                 "query": "priority:hiGH"
              }
          },
          "size": 25
       }




Problem:  Our priority field has the priority in upper and lower case and it's a keyword
          How do I search for all high priority records (case-insensitive)


