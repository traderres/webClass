Lesson:  How to filter a query with ngram analyzer
--------------------------------------------------
Problem:  I need to filter the search results on a specific field by any character (including spaces or special chars)
Solution: Use an ngram analyzer and add a filter to the query


Procedure
---------
 1. Delete the existing reports index (if it exists)
    DELETE /reports

    NOTE:  You will get an "index_not_found_exception" if the index did not exist first


 2. Create a new reports index

    PUT /reports
    {
       "settings": {
           "analysis": {
             "analyzer" : {
               "my_ngram_analyzer" : {
                 "tokenizer" : "my_ngram_tokenizer",
                 "filter": ["lowercase"]
               }
             },
             "tokenizer" : {
               "my_ngram_tokenizer" : {
                 "type" : "ngram",
                 "min_gram" : "1",
                 "max_gram" : "25",
                 "token_chars": [ ]
               }
             },
             "normalizer": {
               "case_insensitive_normalizer": {
                 "type": "custom",
                 "char_filter": [],
                 "filter": [ "lowercase", "asciifolding" ]
               }
             }
           },
           "max_result_window": 500000,
           "refresh_interval": "1s",
           "max_ngram_diff": 25
         },

          "mappings": {
                "dynamic": "strict",
                    "properties": {
                        "actors": {
                              "type": "text"
                          },
                         "description": {
                             "type": "text"
                          },
                         "priority": {
                             "type": "text",
                             "fields": {
                               "raw": {
                                 "type": "keyword"
                               },
                               "sort": {
                                 "type": "keyword",
                                 "normalizer": "case_insensitive_normalizer"
                               },
                               "filtered": {
                                  "type": "text",
                                  "analyzer": "my_ngram_analyzer"
                               }
                             }
                        }
                    }
               }
         }



 3. Populate the reports index with some data
    POST _bulk
    { "index": { "_index": "reports",  "_id": 1 }}
    { "priority": "low", "actors": "John Smith", "description": "he really likes o'reilly"}
    { "index": { "_index": "reports",  "_id": 2 }}
    { "priority": "LOW", "actors": "george washington", "description": "depending on the kind query, you might want to go different ways with it"}
    { "index": { "_index": "reports",  "_id": 3 }}
    { "priority": "high", "actors": "adam Smith"}
    { "index": { "_index": "reports",  "_id": 4 }}
    { "priority": "HIGH", "actors": "Adam Smith 2", "description": "This description is for record four"}
    { "index": { "_index": "reports",  "_id": 5 }}
    { "priority": "HIGH", "actors": ["Pat Benetar", "Michael Jackson", "George Michael"], "description": "There are too many singers from the 1980s listed here.  Get a life!!"}

    NOTE:  If there are no errors, then you should see
        {
           "took": 69,
           "errors": false,
           "items": [
              {
                ...lots of stuff....
              }
           ]
        }


 4. Search the reports index for everything

    POST /reports/_search

    *OR*

    POST /reports/_search
    {
       "query": {
           "match_all": {}
       },
       "size": 25
    }






 5. Run a search and search by ngram (single-char) / look for all priorities that contain "ig"
	POST /reports/_search
	{
		"query": {
			"bool": {
				"must":
					[
					  {
						"match_all": {}
					  }
					],
					"filter": [
						{
							"term": {
								"priority.filtered": "ig"
						  }
						}
					]
			   }
		 }
	}



 6. Run a search and search for all records that have a *DESCRIPTION* and / look for all priorities that contain "ig"
    POST /reports/_search
    {
        "query": {
            "bool": {
                "must":
                    [
                      {
                        "query_string": {
                            "query": "description:*"
                        }
                      }
                    ],
                    "filter": [
                        {
                            "term": {
                                "priority.filtered": "ig"
                          }
                        }
                    ]
               }
         }
    }