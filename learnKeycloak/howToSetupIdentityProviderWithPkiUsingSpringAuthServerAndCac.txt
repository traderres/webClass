How to Setup a Custom Open ID Connect Identity (OIDC) Provider / Build using Spring Boot / Accepts X509 Certs from CAC
----------------------------------------------------------------------------------------------------------------------
Problem:  I want to create my own Open ID Connect (OIDC) Identity Provider that uses PKI authentication
          So, the Keycloak Login page has an option that says "Continue with PKI Cert"

Solution: Adjust the angularApp16 to run in a spring profile that tells it to authenticate from keycloak
          Create a custom-oidc-provider (using the spring authorization server) that prompts for an x509 cert

NOTE:  This procedures work for CAC **AND** ECA certs as long as we trust both the DOD and ECA root certificate authorities

                                                                                                                     john.smith.12345
              TLS                 TLS                                PKI                   TLS                TLS    is authenticated
	 Web    ------>  Protected  ------>  Keycloak Login Page       ------>  Custom OIDC  ------>  Keycloak  ------>  Viewing Protected
   Browser            Web App            "Continue with CAC"                Provider                                    Web App
                      (app16)               (keycloak)                     (that accepts CAC)                           (app16)


Order of Operations
-------------------
 1. User attempts to connect to the protected (app16) by going to https://localhost.localdomain:8443/app16
 2. App16 detects that the user is not authenticated
 	-- The user is redirected to the Keycloak Login page
 3. User is presented the "Keycloak Login" page
 4. User presses "Continue with CAC"
 5. User goes to our custom oidc provider -- e.g., https://localhost.localdomain:9444
    -- This custom oidc provider PROMPTS for a PKI certificate
 6. User provides a PKI client certificate
 7. The custom oidc provider let's anyone in with a trusted PKI client certificate
 8. The custom oidc provider redirects the user back to keycloak
    -- So, keycloak knows that the user is authenticated
 9. Keycloak redirects the user to the protected webapp (app16) along with OAUTH2 credentials
10. The protected webapp (app16) runs its authentication code
    -- It gets credentials that were passed-in the token
11. The protected webapp (app16) then displays its information



Spring Authorization Server is a framework that provides implementations of the OAuth 2.1 and OpenID Connect 1.0 specifications
and other related specifications. It is built on top of Spring Security to provide a secure, light-weight,
and customizable foundation for building OpenID Connect 1.0 Identity Providers and OAuth2 Authorization Server products.

OAuth 2.0 is an authorization framework that enables secure access to resources without sharing credentials
-- You are not sharing credentials with the application; instead you are authorizing the web application to access your resources on your behalf.
-- This is achieved through the exchange of tokens, such as access tokens and refresh tokens

OpenID Connect is an authentication layer built on top of OAuth 2.0.
-- It provides identity verification, allowing users to log in to applications using their preferred identity provider (IdP),



References
----------
https://www.baeldung.com/spring-security-oauth-auth-server
https://github.com/spring-projects/spring-authorization-server
https://docs.spring.io/spring-authorization-server/reference/
https://serengetitech.com/tech/simplifying-oauth-2-0-and-openid-connect-implementation-with-spring-authorization-server/
https://docs.spring.io/spring-authorization-server/reference/how-to.html
https://www.youtube.com/watch?v=TyS9EDy5r9M
https://docs.spring.io/spring-authorization-server/reference/configuration-model.html   # See the info on x509 certificates



Outline
-------
 Part 1:  Create the certificate authority & server cert (for localhost.localdomain2), and DOD trust
 Part 2:  Install Keycloak v26 and setup the keycloak realm
 Part 3:  Setup the App16 webapp to use Keycloak for Oauth2 Authentication
 Part 4:  Grant the APP16_SUPERVISOR to logged-in users in angularApp16  (when logging-in via keycloak)
 Part 5:  Build the Custom OIDC Provider
 Part 6:  Configure keycloak to use the custom OIDC Provider
 Part 7:  Verify it works




Part 1:  Create the certificate authority & server cert (for localhost.localdomain2), and DOD trust
---------------------------------------------------------------------------------------------------
ASSUMPTIONS
 A) You want your server certificate hold localhost.localdomain2
 B) So, you will connect to your app16 webapp using https://localhost.localdomain2:8443/app16

 1. Add localhost.localdomain2 to your /etc/hosts
    unix> sudo vi /etc/hosts
            127.0.0.1   localhost.localdomain2


 2. Create your own certificate authority
    Follow the steps in learnSSL / howToUseYourCertAuthority_InitialSetup_centos7.txt


 3. Create your server cert with a subject name alternative called "localhost.localdomain2"
    Follow the steps in learnSSL / howToUseYourCertAuthority_MakeServerCertWithSubAlt_centos7.txt

                export SUBJ_NAME_ALT=DNS:localhost.localdomain2

		NOTE:  In step 3a /Create an extension file that has your subject name alternative
				   [alt_names]
				   DNS.1 = localhost.localdomain2


 4. Import the public root.pem (found ~/root-ca/public/root.pem) into your firefox web browser
    a. Startup Firefox
    b. Search for cert
    c. Click "View Certificates"
    d. In the "Certificate Manager", Click on this tab:  "Authorities"
    e. Click "Import"
    f. Browse to where you have the/home/<your unix account>/root-ca/public/root.pem
    g. Check â€œTrust this CA to identify websites"
       Check "Trust this CA to identify email users"
       Press OK
       Press OK

	-- Now, your firefox web browser trusts your root certificate authority and it has the john.smith.22222 PKI client certificate


 5. Add the DOD/ECA trusts to your truststore
    a. Download DOD/ECA certificates from public.cyber.mil
       1) Go to https://public.cyber.mil/pki-pke/admins/#toggle-id-1
       2) Click on DoD Approved External PKI Certificate Trust Chains - Version 11.1
          *OR*
          Go to https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/zip/unclass-dod_approved_external_pkis_trust_chains.zip



    b. Save the zip file to your Downloads

    c. Unzip certificates
       unix> cd ~/Downloads
       unix> unzip -d certs unclass-dod_approved_external_pkis_trust_chains.zip      # Unzip the files to ~/Downloads/certs directory

    d. Download addDodCertsToCaCerts.sh       # Used to add the CAs to your trust (to be used for the custom oidc provider only)
       unix> wget https://raw.githubusercontent.com/traderres/webClass/refs/heads/master/learnKeycloak/addDodCertsToCaCerts.sh

    e. Edit addDodCertsToCaCerts.sh           # Set 2 variables in addDodCertsToCaCerts.sh
       -- Set the CACERTS_FILE_PATH to where your destination cacerts file you want to add the DOD trusts to
       -- Set the CERTS_DIR the path of the directory that holds all of the uncompressed cert files

    f. Run addDodCertsToCaCerts.sh            # To add all of the DOD trusts to the cacerts file
       unix> chmod u+x ./addDodCertsToCaCerts.sh
       unix> ./addDodCertsToCaCerts.sh

		What does it do?  Run the keytool import command and give each trust a unique alias
		   keytool -import -alias ca135 -file "/home/adam/Downloads/certs/DOD DERILITY CA-4.cer" -keystore /home/adam/intellijProjects/custom-oidc-provider/src/main/dev-resources/cacerts -storepass changeit  -trustcacerts   -noprompt
		   keytool -import -alias ca136 -file "/home/adam/Downloads/certs/DOD DERILITY CA-5.cer" -keystore /home/adam/intellijProjects/custom-oidc-provider/src/main/dev-resources/cacerts -storepass changeit  -trustcacerts   -noprompt
		   keytool -import -alias ca137 -file "/home/adam/Downloads/certs/DOD DERILITY CA-6.cer" -keystore /home/adam/intellijProjects/custom-oidc-provider/src/main/dev-resources/cacerts -storepass changeit  -trustcacerts   -noprompt
                                   ^
                                   |
                                   +--------- Each one gets a unique alias in the cacerts file


 6. **OPTIONAL** Import DOD certificates into Firefox
    a. Pull Edit -> Preferences > Search for View Certificates
    b. Click oN "View Certificates..."
    c. Click on Authorities
    d. Press Import
       Browse to ~/Downloads/certs/DOD EMAIL CA-33.cer
       Check "Trust this CA to identify websites"
       Check "Trust this CA to identify email users"

    e. Repeat for
		DOD EMAIL CA-34.cer
		DOD EMAIL CA-39.cer  to  44.cer
		DOD EMAIL CA-49.cer  to  52.cer
		DOD EMAIL CA-59.cer

		DOD ID CA-33.cer  to  34
		DOD ID CA-39.cer  to  44.cer
		DOD ID CA-49.cer  to  52.cer
		DOD ID CA-59.cer

		DOD ID SW CA-35.cer  to  38
		DOD ID SW CA-45.cer  to  48.cer

        DODRoot2.cer - DoDRoot5.cer

        DOD SW CA-53.cer to DOD SW CA-58.cer
        DOD SW CA-60.cer to DOD SW CA-61.cer



Part 2:  Install Keycloak v26 and setup the keycloak realm
------------------------------------------------------------
1. Download and Extract Keycloak v26.0.0
    a. Go to https://github.com/keycloak/keycloak/releases/download/26.0.0/keycloak-26.0.0.zip

    b. Save the file to your Downloads directory

    c. Unzip it
       unix> cd ~/Downloads
       unix> unzip keycloak-26.0.0.zip
       -- This will create a directory keycloak-26.0.0/


 2. Verify that you are running Java 17
    unix> java -version
    -- You should be running Java 17 or later


 3. Run keycloak in "start-dev" mode listening on port 8444
    unix> cd keycloak-26.0.0/
    unix> bin/kc.sh start-dev --http-port=8444


 4. Create an Admin User
    a. Go to http://localhost:8444
    b. Set the admin user by entering in on the welcome page
       Username:  admin
       password:  secret
       Press "Create user"


 5. Create a Realm
    NOTE:  Keycloak includes a single realm, called master. Use this realm only for managing Keycloak and not for managing any applications.
    a. Go to http://localhost:8444/admin/
    b. Enter the admin user/password
    c. In the upper left corner, select Master
       Press "Create Realm"

       Realm Name:  MyRealm
       Press "Create"


 6. Create a new client:  app16-webapp
     a. Go to MyRealm -> Clients
     b. Press "Create client"
     c. In the "Create client" page
			Client type:  OpenID Connect
			Client id:    app16-webapp
			name:         App16 Webapp
			Press Next
			Press Next
			Press Save

     d. Update these settings for app16-webapp:

     	 	Access settings:
				Root URL:              https://localhost.localdomain2:8443/app16
				Home URL:              https://localhost.localdomain2:8443/app16

			Capability Config:
			  	Client authentication  On
			  	Authorization          On
			  	Authentication Flow:   Check Standard flow

			Login Settings
			   	Login theme:               keycloak
			   	Consent required:          Off
			   	Display client on screen:  Off

			Press "Save"

 7. Configure the MyRealm's User Profile so that email, first name, and last name are *NOT* required
    NOTE:  This is needed so that upon authentication, keycloak does not prompt for the user's first name, last name, or email address
    a. Go to Realms -> MyRealm -> Realm Settings
    b. Click on "User Profile" tab
    c. Click on Email
       1) Uncheck "Required field"
       2) Press "Save"
    d. Click on FirstName
       1) Uncheck "Required field"
       2) Press "Save"
    e. Click on lastName
       1) Uncheck "Required field"
       2) Press "Save"


 8. Make sure roles are returned to SpringBoot with the token
    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles  (you may have to advance to the 2nd page of client scopes to see it)
    c. Click on the "Settings" tab
    d. Change these settings:
    		Include in token scope:  On
    		Display Order:            1
       Press "Save"

    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles
    c. Click on the "Mappers" tab
    d. Click on "realm roles"

    	Add to ID token:					On
    	Add to access token:				On
    	Add to lightweight access token:	Off
    	Add to userinfo:					On
    	Add to token introspection			On




 9. Configure Keycloak to listen on TLS at https://localhost.localdomain:8444/
    a. Press Control-C to stop keycloak listening on http://localhost:8444/

    b. Create this file:  start.kc.ssl.sh
       unix> vi ~/Downloads/keycloak-26.0.0/start.kc.ssl.sh

			####################################################################################################################
			# Filename:   start.kc.ssl.sh
			#
			# Purpose:
			#     Run keycloak in SSL mode listening on https://localhost.localdomain2:8444/
			#
			# ASSUMPTIONS:
			#   1) You ran bin/kc.sh build  (first)
			#   2) You have a Java 17 JDK
			#   3) You have localhost.localdomain2 defined in your /etc/hosts file
			#
			# NOTES:
			#   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it exists
			#   --hostname=localhost.localdomain2                  tells it to listen on the hostname called localhost.localdomain
			####################################################################################################################

 			export JAVA_OPTS_APPEND="  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=/home/adam/intellijProjects/angularApp16b/backend/src/main/dev-resources/cacerts "

			# Run keycloak in TLS mode
			bin/kc.sh start    --spi-theme-cache-themes=false --spi-theme-cache-templates=false --http-enabled=false --https-port=8444 --https-key-store-file=/home/adam/intellijProjects/angularApp16b/backend/src/main/dev-resources/webapp.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit  --https-client-auth=none  --log-level=INFO  --hostname-strict=false --hostname=localhost.localdomain2


	c. Run keycloak listening on https://localhost.localdomain2:8444/
       unix> cd ~/Downloads/keycloak-26.0.0
       unix> chmod u+x ./start.kc.ssl.sh
       unix> ./start.kc.ssl.sh

    d. In the browser used to talk to Keycloak, import the CA found here:  ~/intellijProjects/angularApp16/backend/src/main/dev-resources/public.ca.root.pem
	   1) Startup Firefox
	   2) Pull Tools / Settings
	   3) Search for cert
	   4) Click "View Certificates"
	   5) In the "Certificate Manager", Click on this tab:  "Authorities"
	   6) Click "Import"
	   7) Browse to here:   ~/intellijProjects/angularApp16/backend/src/main/dev-resources/public.ca.root.pem
	   8) Check â€œTrust this CA to identify websites"
		  Check "Trust this CA to identify email users"
		   Press OK
		   Press OK

    e. Connect to keycloak using TLS
       Go to https://localhost.localdomain2:8444/

	   Leave Keycloak Running on https://localhost.localdomain2:8444/




Part 3:  Setup the App16 webapp to use Keycloak for Oauth2 Authentication
-------------------------------------------------------------------------
 1. Clone the project and verify it runs in http mode
    a. Clone the project
       unix> git clone https://github.com/traderres/angularApp16.git  angularApp16b

    b. Checkout the correct branch
       unix> cd angularApp16
       unix> git checkout lesson8/add-grid

    c. Initialize the local postgres database by following the steps in docs/howToInitializePostgresDatabase.dev.txt

    d. Build the project
       unix> mvn clean package -Pprod

    e. Nuke the database and rebuild ElasticSearch
       unix> java -Dapp.datasource.flyway-clean-on-startup=TRUE -jar ./sync-service/target/sync-service-1.0-SNAPSHOT-exec.jar

    f. Run the webapp (using plain-text http)
       unix> java -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar

    g. Connect to the webapp listening on port 8080
       Go to http://localhost:8080/app16

    h. Stop the webapp by pressing Control-C


 2. Get the app16 project to use keycloak for authentication and have it listen on TLS
    a. Copy the text below to this new file:  angularApp16/backend/src/main/resources/application-local_oauth2.yaml

##############################################################################
# Settings for the "local_oauth2" profile
##############################################################################
name: app16
server.servlet.context-path: /app16

# Provide the trustStore for the local keycloak


# Disable cors check because we are running in local dev mode
# NOTE:  order is important.  Make sure disable.cors comes *AFTER* you set the profile
disable.cors: true


# Show Exception info to local developers
exception_handler.return_dev_info: true


# Disable setting the last_login_date upon authentication
# NOTE:  When running in local mode, there is no saved session.  So, every REST call runs sql to update the user's last login date
#        Setting this flag to false ensures that the last login date is NOT set (which reduces the load on the developer's laptop)
authenticate.set_last_login_date.is_enabled: false



##########################################################
# Security & SSL Settings
#
# Set the security mode to "keycloak" so it authenticates against keycloak
##########################################################
security.mode: keycloak          # Possible values are localdev or keycloak

server:
  port: 8443
  ssl:
    key-store: backend/src/main/dev-resources/webapp.keystore.jks
    key-store-password: changeit
    key-store-type: JKS
    trust-store: backend/src/main/dev-resources/webapp.truststore.jks
    trust-store-password: changeit
    trust-store-type: JKS
    enabled: true

# Secure the cookies
server.servlet.session.cookie.secure: true
server.servlet.session.cookie.http-only: true

server.use-forward-headers: true


##############################################################################
# Keycloak Settings for Spring Security
#
# The realm url is probably something like https://keycloak.rbr-tech.com:8444/realms/MyRealm
##############################################################################
spring.security.oauth2.client.registration.keycloak.client-id: app16-webapp
spring.security.oauth2.client.registration.keycloak.client-secret: CLIENT_SECRET_FROM_KEYCLOAK
spring.security.oauth2.client.registration.keycloak.authorization-grant-type: authorization_code
spring.security.oauth2.client.registration.keycloak.scope: openid,email,profile,phone,address
spring.security.oauth2.client.provider.keycloak.issuer-uri: https://localhost.localdomain2:8444/realms/MyRealm
spring.security.oauth2.client.provider.keycloak.user-name-attribute: preferred_username


##########################################################
# Database Settings
##########################################################
app.datasource:
  enabled: true
  driver-class-name: org.postgresql.Driver
  url: jdbc:postgresql://localhost:5432/app16_db
  username: app16_user
  password: secret
  schema: app16_db
  maxPoolSize: 2
  database-name: app16_db


##########################################################
# ElasticSearch Settings
##########################################################
es:
  url: http://localhost:9201
  ssl_enabled: false


  b. Get the client secret for app16-webapp from keycloak
     Connect to http://localhost:8444/admin
     Go to MyRealm -> Clients -> app16-webapp
     Click on "Credentials" tab
     Copy the Client Secret

  c. Paste the Client Secret into the application-localoauth2.yaml
  	 -- Replace CLIENT_SECRET_FROM_KEYCLOAK with the Client Secret value


 3. Run the app16 webapp using the local_oauth2 profile
    a. Build the project
       unix> mvn clean package -Pprod

    b. Run the app16 webapp using TLS and using keycloak for authentication
       NOTE:  Keycloak must be up and running on https://localhost.localdomain2:8444/
       unix> java -Dspring.profiles.active=local_oauth2  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=backend/src/main/dev-resources/cacerts  -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar

    c. Connect to app16 using TLS
       Go to https://localhost.localdomain2:8443/app16

		-- You should see the Keycloak "MyRealm" login page



Part 4:  Grant the APP16_SUPERVISOR to logged-in users in angularApp16  (when logging-in via keycloak)
------------------------------------------------------------------------------------------------------
  Approach #1  Adjust the angularApp16/src/main/java/com/lessons/models/authentication/KeycloakUserInfoDTO.java

				Change this line from this:
					    this.grantedAuthorities = new ArrayList<>();

				To this:
						this.grantedAuthorities = new ArrayList<>();
						this.grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_APP16_SUPERVISOR"));

				**OR**

  Approach #2:  Tell Keycloak to grant APP16_SUPERVISOR as a default role for all users in this realm
  				a. Connect to keycloak by going to https://localhost.localdomain2:8444

  				b. Create the role:  APP16_SUPERVISOR
                   1) Go to MyRealm -> Realm Roles
                   2) Press "Create role"
                      Role name:   APP16_SUPERVISOR
                      Press "Save"

				c. Make it a default role
				   1) Go to MyRealm -> Realm settings -> "User registration" tab
				   2) Click on the "Default roles" tab
				   3) Press "Assign role"
				   4) Select "Filter to realm roles"
				   5) Check APP16_SUPERVISOR
					  Press "Assign"

				**OR**

  Approach #3:  Adjust the AuthenticationService.generateUserInfoWithOauth2InfoFromKeyCloak()
                so it queries the database for whatever roles this user should be granted





Part 5:  Build the Custom OIDC Provider (using Spring Authorization Server)
---------------------------------------------------------------------------
 1. Clone the customOidcProvider project
    unix> cd ~/intellijProjects
    unix> git clone https://github.com/traderres/custom-oidc-provider.git

 2. Compile the custom oidc provider
    unix> cd custom-oidc-provider
    unix> mvn clean package

 3. Run the custom oidc provider so it listens on https://localhost.localdomain2:9444/  *AND* trusts the DOD root certificate authorities
    NOTE:  Set the -Dserver.ssl.truststore=/path/to/cacerts  [that holds the DOD trusts]
           Set the -Djavax.net.ssl.trustStore=/path/to/cacerts  [that holds the DOD trusts]
    unix> java -Dserver.ssl.truststore=/home/adam/intellijProjects/custom-oidc-provider/src/main/dev-resources/cacerts  -Dserver.ssl.trust-store-password=changeit  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=backend/src/main/dev-resources/cacerts  -jar ./target/custom-oidc-provider-1.0-SNAPSHOT-exec.jar



Part 6:  Configure keycloak to use the custom OIDC Provider
------------------------------------------------------------
ASSUMPTIONS:
 A) Keycloak is running
 B) Custom OIDC Provider is running

 1. Connect to Keycloak
    Go to https://localhost.localdomain2:8444/

 2. Add the Custom OIDC Identity Provider in Keycloak
    a. Go to myRealm -> Identity Providers
    b. Press "Add Provider" -> OpenID Connect v1.0
    c. In the "Add OpenID Connect provider" page
       Make sure you have these settings
			alias:  						custom-oidc-provider     				# You make it what you want
			Display Name:   				Login with CAC                          # Displayed in the Login Page

			Discovery endpoint:				https://localhost.localdomain2:9444/.well-known/openid-configuration
											-- Wait for the keycloak page to resolve this url

					Authorization URL:		https://localhost.localdomain:9444/oauth2/authorize
					Token URL:				https://localhost.localdomain:9444/oauth2/token
					Logout URL				https://localhost.localdomain:9444/connect/logout
					User Info URL:			https://localhost.localdomain:9444/userinfo
					Issuer:					https://localhost.localdomain:9444/
					Validate Signatures:	On
					Use JWKS URL:			On
					JWKS URL:				https://localhost.localdomain:9444/oauth2/jwks
					Use PKCE:				Off

			Client authentication:			Client secret sent as post
			Client ID:                      oidc-client                             # It must match the spring.security.oauth2.authorizationserver.client.oidc-connect.registration.client-id
			Client Secret:					secret									# It must match the spring.security.oauth2.authorizationserver.client.oidc-connect.registration.client-secret

		Press "Add"


 3. Tell Keycloak to bring the user attributes back from login.gov and return them to spring-boot upon authorization
    a. In keycloak, go to MyRealm -> Identity Providers -> Identity Provider for login.gov -> "Settings" tab
    b. In the settings page, press 'Advanced"
    	    Scopes:   	openid profile




Part 7:  Verify it works
------------------------
                                                                                                                  john.smith.22222
              TLS                TLS                             PKI                   TLS                TLS     is authenticated
	 Web    ------>  Protected  ------>  Keycloak Login Page   ------>  Custom OIDC  ------>  Keycloak  ------>  Viewing Protected
   Browser            Web App            "Login with CAC"                Provider                                     Web App
                      (app16)               (keycloak)                                                                (app16)


 1. Startup the Admin Webapp with the oauth2_local profile
    a. Verify that the custom-oidc-provider has the correct Redirect URI
       1) Look at custom-oidc-provider/src/main/resources/application.yaml
               redirect-uris:   "https://localhost.localdomain2:8444/realms/MyRealm/broker/custom-oidc-provider/endpoint"

          Look at keycloak -> Realms -> MyRealm -> Identity Providers -> Login witH CAC
                Redirect URI:    https://localhost.localdomain2:8444/realms/MyRealm/broker/custom-oidc-provider/endpoint

          -- Verify that these are the *SAME*


       2) Look at custom-oidc-provider/src/main/resources/application.yaml
              client-id: "oidc-client"
              client-secret: "{noop}secret"

         Look at keycloak -> Realms -> MyRealm -> Identity Providers -> Login witH CAC
              Client ID:  oidc-client
              Client Secret:  secret

          -- Verify that these are the *SAME*


    b. Verify that the angularApp16  (webapp being protected has the correct keycloak settings)
       1) Look at the angularApp16/backend/src/main/resources/application-local_oauth2.yaml
              spring.security.oauth2.client.registration.keycloak.client-secret: 123456789123456789

            The client-secret must match what is found in Keycloak -> Realms -> MyRealm -> Clients -> app16-app > Credentials Tab
                            Client Secret:  123456789123456789



    c. Compile angularApp16
       unix> cd ~/intellijProjects/angularApp16
       unix> mvn clean package -Pprod

    d. Run the app16 webapp using TLS and using keycloak for authentication
       NOTE:  Keycloak must be up and running on https://localhost.localdomain2:8444/
       unix> java -Dspring.profiles.active=local_oauth2  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=backend/src/main/dev-resources/cacerts  -jar ./backend/target/backend-1.0-SNAPSHOT-exec.jar


 2. Connect to app16 using TLS
    Go to https://localhost.localdomain2:8443/app16

 3. In the "MyRealm" keycloak page, press "Login with CAC"
    -- The custom oidc provider should prompt you for a PKI Certificate

 4. Select john.smith.2222 as the PKI Certificate
    -- You should see the Admin Web App
