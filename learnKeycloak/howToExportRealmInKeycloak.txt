How to Export Realm in Keycloak (when running natively)
-------------------------------------------------------


Procedure for Exporting Realm
-----------------------------
 1. Start keycloak
    cd $KEYCLOAK_HOME
    ./start.keycloak.ssl.sh


	The start.kc.ssl.sh script should look something like this:
	###################################################################################################################################
	# Filename:   start.kc.ssl.sh
	#
	# Purpose:
	#     Run keycloak in SSL mode listening on https://keycloak.docker.internal:8444/
	#
	# ASSUMPTIONS:
	#   1) You have a Java 17 JDK or later
	#   2) You have ni2.docker.internal defined in your /etc/hosts file
	#
	# NOTES:
	#   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it exists
	#   --hostname=keycloak.docker.internal                 tells it to listen on the hostname called keycloak.docker.internal
	###################################################################################################################################

	export JAVA_OPTS_APPEND="  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=/tmp/cacerts "
	export KC_BOOTSTRAP_ADMIN_USERNAME=admin
	export KC_BOOTSTRAP_ADMIN_PASSWORD=admin

	# Run keycloak in TLS mode
	bin/kc.sh start  --http-enabled=false --https-port=8444 --https-key-store-file=${NI2_PROJECT_PATH}/infrastructure/root-ca/server-certs/keycloak.docker.internal.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit    --log-level=INFO  --hostname-strict=false --hostname=keycloak.docker.internal  --https-client-auth=none




 2. Copy the keycloak h2 database to /tmp
 	cp -rp ${KEYCLOAK_HOME}/data/h2 /tmp

 3. Export the "MyRealm" to this realm file:  MyRealm-realm.json
	$KEYCLOAK_HOME/bin/kc.sh export --dir /tmp  --realm MyRealm --db dev-file --db-url 'jdbc:h2:file:/tmp/h2/keycloakdb;NON_KEYWORDS=VALUE'

 4. Remove the "authorizationSettings" from the file in intelliJ


Procedure for Importing Realm
-----------------------------
 1. Stop Keycloak (if it's running)

 2. Create the import directory
    mkdir -p ${KEYCLOAK_HOME}/data/import

 3. Copy the file to the import directory
    cp /path/to/cleaned-up/MyRealm-realm.json  ${KEYCLOAK_HOME}/data/import/MyRealm-realm.json

 4. Startup keycloak with the --import-realm
    cd $KEYCLOAK_HOME
    ./start.kc.IMPORT.ssl.sh


	The start.kc.IMPORT.ssl.shscript should look something like this:
	###################################################################################################################################
	# Filename:   start.kc.IMPORT.ssl.sh
	#
	# Purpose:
	#     Run keycloak in SSL mode listening on https://keycloak.docker.internal:8444/
	#
	# ASSUMPTIONS:
	#   1) You have a Java 17 JDK or later
	#   2) You have ni2.docker.internal defined in your /etc/hosts file
	#
	# NOTES:
	#   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it e
	xists
	#   --hostname=keycloak.docker.internal                 tells it to listen on the hostname called keycloak.docker.internal
	###################################################################################################################################

	export JAVA_OPTS_APPEND="  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=/tmp/cacerts "
	export KC_BOOTSTRAP_ADMIN_USERNAME=admin
	export KC_BOOTSTRAP_ADMIN_PASSWORD=admin

	# Run keycloak in TLS mode
	# Because --import-realm is set, it will attempt to import the realm in $KEYCLOAK_HOME/data/import/
	#
	bin/kc.sh start --import-realm  --http-enabled=false --https-port=8444 --https-key-store-file=${NI2_PROJECT_PATH}/infrastructure/root-ca/server-cer
	ts/keycloak.docker.internal.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit    --log-level=INFO  --hostname-strict=fals
	e --hostname=keycloak.docker.internal  --https-client-auth=none

