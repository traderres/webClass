How to Setup Login.gov as an Identity Provider Using Open ID Connect (OIDC)
---------------------------------------------------------------------------
Problem:  I want users to get redirected to Login.gov for identity
Solution: Setup Keycloak 25, Create a login.gov sandbox app, and configure Keycloak using Open ID Connect


Assumptions:
 A) You have an email address that ends with .gov or .mil
 B) You are using Keycloak v26.4.0
 C) You want the Keycloak Identity provider to use Open ID Connect (OIDC) to talk to login.gov


References
----------
https://developers.login.gov/
https://developers.login.gov/saml/getting-started/
https://developers.login.gov/oidc/getting-started/
https://developers.login.gov/testing/
https://developers.login.gov/attributes/
https://www.keycloak.org/archive/downloads-22.0.1.html
https://github.com/keycloak/keycloak-quickstarts/tree/22.0.1



Part 1 / Generate the cacerts file and server certs (for keycloak.docker.internal and ni2.docker.internal)
----------------------------------------------------------------------------------------------------------
Your keycloak and your spring boot web app need a trust file that trusts certs
This file should trust your fake root ca cert
 1. Generate this file:  /tmp/cacerts
    Follow the steps in learnKeycloak / howToGenerateCaCerts.txt

 2. Add the cert for "idp.int.identitysandbox.gov" to /tmp/cacerts
    a. Get the server cert for this site
       unix> openssl s_client -connect idp.int.identitysandbox.gov:443

    b. Copy and save the lines between
        -----BEGIN CERTIFICATE----- and
        -----END CERTIFICATE-----
        into a new file called:  /tmp/idp.int.identitysandbox.gov.crt

    c. Import this file into our /tmp/cacerts trust file
       unix> keytool -import -alias "login-gov-sandbox" -keystore /tmp/cacerts  -file /tmp/idp.int.identitysandbox.gov.crt -storepass changeit  -trustcacerts   -noprompt

 3. Generate this file:  keycloak.docker.internal.keystore.jks
    Follow the steps in learnSSL / howToUseYourCertAuthority_MakeServerCertWithSubAlt_centos7.txt
    NOTE:  The subject alternate name is keycloak.docker.internal

 4. Generate this file:  ni2.docker.internal.keystore.jks
    Follow the steps in learnSSL / howToUseYourCertAuthority_MakeServerCertWithSubAlt_centos7.txt
    NOTE:  The subject alternate name is ni2.docker.internal



Part 2 / Download & Install Keycloak to listen at https://keycloak.docker.internal:8444/
----------------------------------------------------------------------------------------
 1. Add an entry in your /etc/hosts
    unix> sudo vi /etc/hosts
         127.0.0.1    keycloak.docker.internal

 2. Download the keycloak-26.4.0.zip file
    Go to https://github.com/keycloak/keycloak/releases/download/26.4.0/keycloak-26.4.0.zip
    Save it to your ~/Downloads

 3. Unzip it
    unix> cd ~/Downloads
    unix> unzip keycloak-26.4.0.zip

 4. Create a bash variable for where you unzipped keycloak
    unix> export KEYCLOAK_HOME=~/Downloads/keycloak-26.4.0

 5. Create a script to start keycloak in SSL mode with a default admin password
    unix> vi $KEYCLOAK_HOME/start.kc.ssl.sh


    If running in Windows
    ---------------------
    @ECHO OFF
    REM ####################################################################################################################
    REM # Filename:   start.kc.ssl.bat
    REM #
    REM # Purpose:
    REM #     Run keycloak in SSL mode listening on https://keycloak.docker.internal:8444/
    REM #
    REM # ASSUMPTIONS:
    REM #   1) You ran bin/kc.sh build  (first)
    REM #   2) You have a Java 17 JDK
    REM #   3) You have ni2.docker.internal defined in your /etc/hosts file
    REM #
    REM # NOTES:
    REM #   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it exists
    REM #   --hostname=keycloak.docker.internal                 tells it to listen on the hostname called localhost.localdomain
    REM ####################################################################################################################

    set JAVA_OPTS_APPEND=-Djavax.net.ssl.trustStorePassword=changeit -Djavax.net.ssl.trustStoreType=JKS -Djavax.net.ssl.trustStore=c:\temp\cacerts

    set KC_BOOTSTRAP_ADMIN_USERNAME=admin
    set KC_BOOTSTRAP_ADMIN_PASSWORD=admin

    REM # Run keycloak in TLS mode
    bin\kc.bat start    --spi-theme-cache-themes=false   --spi-theme-cache-templates=false --http-enabled=false --https-port=8444 --https-key-store-file=%NI2_PROJECT_PATH%\infrastructure\root-ca\server-certs\keycloak.docker.internal.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit    --log-level=INFO  --hostname-strict=false --hostname=keycloak.docker.internal





    If running in unix
    ------------------
    ###################################################################################################################################
    # Filename:   start.kc.ssl.sh
    #
    # Purpose:
    #     Run keycloak in SSL mode listening on https://keycloak.docker.internal:8444/
    #
    # ASSUMPTIONS:
    #   1) You have a Java 17 JDK or later
    #   2) You have ni2.docker.internal defined in your /etc/hosts file
    #
    # NOTES:
    #   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it exists
    #   --hostname=keycloak.docker.internal                 tells it to listen on the hostname called keycloak.docker.internal
    ###################################################################################################################################

    export JAVA_OPTS_APPEND="  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=/tmp/cacerts "
    export KC_BOOTSTRAP_ADMIN_USERNAME=admin
    export KC_BOOTSTRAP_ADMIN_PASSWORD=admin

    # Run keycloak in TLS mode
    bin/kc.sh start  --http-enabled=false --https-port=8444 --https-key-store-file=/path/to/keycloak.docker.internal.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit    --log-level=INFO  --hostname-strict=false --hostname=keycloak.docker.internal  --https-client-auth=none



 6. Startup keycloak for the *FIRST* time
    unix> cd $KEYCLOAK_HOME
    unix> chmod ugo+x start.kc.ssl.sh
    unix> ./start.kc.ssl.sh

 7. Connect to keycloak for the *FIRST* time
    Go to https://keycloak.docker.internal:8444/

 8. Enter the admin username:  admin     (defined in KC_BOOTSTRAP_ADMIN_USERNAME)
    Enter the admin password:  admin     (defined in KC_BOOTSTRAP_ADMIN_PASSWORD)

     -- You should be logged-in as an administrator



Part 3 / OPTIONAL / Add the custom theme to keycloak
----------------------------------------------------
 1. Compile the keycloak-plugins project
    unix> cd /path/to/keycloak-plugins
    unix> mvn clean package
          -- Generates the Java JAR with the custom themes
          -- File is here:  login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar

 2. Copy login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar TO $KEYCLOAK_HOME/providers
    unix> cp login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar $KEYCLOAK_HOME/providers

 3. Stop keycloak by pressing Control-C

 4. Update the keycloak configuration (so it picks-up the login-page-theme jar)
    unix> cd $KEYCLOAK_HOME
    unix> ./bin/kc.sh build

 5. Startup Keycloak listening on TLS
    unix> ./start.kc.ssl.sh



Part 4 / Create the Keycloak Realm called "MyRealm"
---------------------------------------------------
 1. Create the empty realm:  MyRealm
    a. Login to keycloak
    b. Press "Manage realms" -> "Create realm"
    c. In the Create Realm screen
       Realm name:  MyRealm
       Press "Create"

       -- At this point, your current realm should be MyRealm


 2. Configure the Realm Session Timeout (to be 15 minutes)
    a. Press Realm Settings -> Sessions Tab
    b. In the "Sessions" tab
        SSO Session Idle:       15 minutes
        SSO Session Max:        15 minutes
        Press "Save"

    c. Press Realm Settings -> Tokens Tab
    d. In the "Tokens" tab
        Access Token Lifespan:                      15 minutes
        Access Token Lifespan for Implicit Flow:    15 minutes
        Press "Save"


 3. Configure the Realm User Profile to have these attributes:  user_type, identity_provider_type_id, subject, subject_alt_name, uuid
    a. Press Realm Settings -> "User profile" Tab
    b. Make sure email is not required
        1) Click on email
        2) Set Required field:  Off
        3) Press "Save"
    c. Make sure firstName is not required
        1) Click on firstName
        2) Set Required field:  Off
        3) Press "Save"
    d. Make sure lastName is not required
        1) Click on lastName
        2) Set Required field:  Off
        3) Press "Save"

    e. Add this attribute:  identity_provider_type_id
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       identity_provider_type_id
            Display name:           identity_provider_type_id
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    f. Add this attribute:  user_type
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       user_type
            Display name:           user_type
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    g. Add this attribute:  subject
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       subject
            Display name:           subject
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    h. Add this attribute:  subject_alt_name
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       subject_alt_name
            Display name:           subject_alt_name
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    i. Add this attribute:  uuid
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       uuid
            Display name:           uuid
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"



 4. Set the Client Scopes (which allow the web apps to get the attributes)
    a. Go to "MyRealm" -> Client Scopes -> "profile" -> "Mappers" tab
    b. Press "Add mapper" -> By configuration -> User Attribute
    c. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               identity_provider_type_id
            user attribute      <select identity_provider_type_id from the dropdown>
            Token claim name    identity_provider_type_id

        Rest are default values:
            Claim JSON Type:                    String
            Add to ID token:                    On
            Add to access token:                On
            Add to lightweight access token     Off
            Add to userinfo                     On
            Add to token introspection          On
            Multivalued                         Off
            Aggregate attribute value           Off

        Press "Save"
        Press "Client scope details" to add another one


    d. Press "Add mapper" -> By configuration -> User Attribute
    e. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               user_type
            user attribute      <select user_type from the dropdown>
            Token claim name    user_type

        Press "Save"
        Press "Client scope details" to add another one


    f. Press "Add mapper" -> By configuration -> User Attribute
    g. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               subject
            user attribute      <select subject from the dropdown>
            Token claim name    subject

        Press "Save"
        Press "Client scope details" to add another one


    h. Press "Add mapper" -> By configuration -> User Attribute
    i. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               subject_alt_name
            user attribute      <select subject_alt_name from the dropdown>
            Token claim name    subject_alt_name

        Press "Save"


    j. Press "Add mapper" -> By configuration -> User Attribute
    k. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               uuid
            user attribute      <select uuid from the dropdown>
            Token claim name    uuid

        Press "Save"



 5. Add the clients
    NOTE:  Each client is a webapp that uses keycloak for authentication

    a. Create this client:  core-welcome-webapp
       1) Go to "MyRealm" -> Clients -> Create client
       2) In the Create client page
            Client type:    OpenID Connect
            Client ID:      core-welcome-webapp
            Client Name:    core-welcome-webapp
            Press "Next"
            Press "next"
            Press "save"
       3) In the "Settings" tab
            Root URL:                   https://ni2.docker.internal:8443/welcome              # Where ever the welcome webapp is listening on
            Home URL:                   https://ni2.docker.internal:8443/welcome              # Where ever the welcome webapp is listening on
            Client authentication:      On
            Authorization:              On
            Authentication Flow:        "Standard flow" is checked / This should cause Service-accounts role to be automatically checked
            Login theme:                <select theme from the keycloak plugins jar>
            Press "Save"




Part 5:  Get your Keycloak cert file (used to transmit info between login.gov and keycloak)
-------------------------------------------------------------------------------------------
 1. Login to your local keycloak
    Connect to https://keycloak.docker.internal:8444/

 2. Create a text file that holds the RS256 cert:  /tmp/keycloak.rs256.cert.txt
    a. Create an empty text file:   /tmp/keycloak.rs256.cert.txt

    b. Add this to the text file:
            -----BEGIN CERTIFICATE-----

            -----END CERTIFICATE-----

 3. Get the RS256 "SIG" cert from keycloak
    a. In Keycloak, go to Realms -> MyRealm -> Realm settings
    b. In Realm settings, click on the "Keys" tab
    c. In the keys list
       Look for the line that has Algorithm=RS256 and Use=SIG
        1) On that row, press the "Certificate" button
        2) Copy that info

 4. Paste that certificate into your text file
    When done, the keycloak.rs256.cert.txt looks like this:

     -----BEGIN CERTIFICATE-----
     MIICnTCCAYUCBgGR11VaSzANBgkqhkiG9w0BAQsFADASMRAwDgYDV3gmgjmZDK6dVGzfeZKE/4n/W382rvy+Dm28+Wcss/saTFfFQXa7IL54jp3Mss18Ex4Q==
     -----END CERTIFICATE-----


 5. Verify that the cert is valid
    unix> openssl x509 -in  /tmp/keycloak.rs256.cert.txt -text

    You should see something like this:
        Certificate:
            Data:
                Version: 1 (0x0)
                Serial Number: 1760639520842 (0x199ee4b104a)
                Signature Algorithm: sha256WithRSAEncryption
                Issuer: CN=MyRealm                                  # The issuer holds the name of your keycloak realm
                Validity
                    Not Before: Oct 16 18:30:20 2025 GMT
                    Not After : Oct 16 18:32:00 2035 GMT            # The cert is good for 10 years!!!
                Subject: CN=MyRealm                                 # The subject holds the name of your keycloak realm
                Subject Public Key Info:
                    Public Key Algorithm: rsaEncryption
                        Public-Key: (2048 bit)
                        Modulus:
                            00:a5:06:c0:5d:e1:91:10:32:6a:02:8c:68:1a:46:
                            eb:e5:91:2c:be:c5:7a:e9:68:27:32:5d:c1:8c:35:
                            4b:0a:90:83:d8:ec:3b:06:b2:47:a6:c2:65:93:51:
                            63:19:0b:e0:9b:e1:72:ab:a9:b4:7c:bd:3d:96:b4:
                            13:d9:82:80:6e:70:63:7a:1c:39:2c:58:cd:81:b9:
                            d8:d9:1e:63:8c:0c:46:23:8d:f5:5a:bd:7a:df:af:
                            58:87:be:5b:2a:67:04:13:ba:fe:6a:48:a2:f1:e4:
                            4f:90:eb:0b:3b:e4:ad:0c:d6:38:04:4d:cb:2f:e3:
                            58:5f:b9:7e:cd:71:84:66:ed:d3:da:12:a4:73:ac:




Part 6:  Start Configuring the keycloak OIDC Provider and copy the Redirect URI  (as login.gov will need that)
--------------------------------------------------------------------------------------------------------------
 1. Connect to keycloak as an administrator

 2. Go to Realms -> MyRealm -> Identity providers

 3. In the "Identity providers" page, press "Add provider" -> OpenID Connect v1.0

 4. In the "Add OpenID Connect Provider page
    Alias:                       idp-login-gov        (do not use spaces as this changes the Redirect URI)
    Display Name:                Login with Login.gov

    Discovery endpoint:          https://idp.int.identitysandbox.gov/.well-known/openid-configuration

    Client authentication:        JWT signed with private key
    Client ID:                    TEMP                 (it does not matter -- but we need something right now)
    Press "Add"

 5. Copy the Redirect URI   (we will need it in the next step to configure login.gov)
    NOTE:  It should look something like this:
               https://keycloak.docker.internal:8444/realms/MyRealm/broker/idp-login-gov/endpoint



Part 7 / Setup the login.gov "Sandbox Account"
----------------------------------------------
NOTE:   Anyone with a .gov or .mil email address may request a "Sandbox Account" WITHOUT any approval from login.gov

 1. Create the login.gov "Sandbox account"
    a. Go to https://dashboard.int.identitysandbox.gov/
    b. Select the "Sign-in" button to create a new account
    c. Next to "Create your first team", press "Continue"

    d. In the "New Team" page
        Name:       SIT_WebApp_Team
        Agency:     Department of Defense
        Press "Create"

 2. Create a login.gov "App" called "My Web App"
    a. In login.gov, select Apps (on the top menubar)
       *OR*
       https://portal.int.identitysandbox.gov/service_providers

    b. Press "Create a new app"

    c. In the "New App" page
        Team:                           <Select your team from step 1>
        Portal Configuration:           Sandbox
        App name                        DOD-MyTestApp88
        Friendly name:                  My Test App 88                     (displayed to users when logging in)
        Identity Protocol:              OpenID Connect Private Key JWT     (preferred for web apps)
        Level of Service (IAL):         Identity verification permitted    (so the webapp will receive verified attributes)
        Default Auth Assurance Level:   MFA required, remember device disallowed (AAL2)

        Attribute bundle:  [check these] / Do not check SSN
            email
            x509_subject
            x509_presented
            first_name
            last_name
            address1
            address2
            city
            state
            zipcode
            phone

        Issuer:                         urn:gov:gsa:openidconnect.profiles:sp:sso:<AGENCY_NAME>:<APP_NAME>
                                        example) urn:gov:gsa:openidconnect.profiles:sp:sso:dcsa:myTestApp88


        Upload public certificate:      Press "Choose a cert file"
                                        Browse to your /tmp/keycloak.rs256.cert.txt


        Push notification URL:          <blank>

        Failure to Proof URL            https://www.google.com/

        Redirect URIs:                  <this is keycloak's generated "Redirect URI" for your identity provider>
                                        ex) https://keycloak.docker.internal:8444/realms/MyRealm/broker/idp-login-gov/endpoint

        Sign-in help text:              "First time here from...."

        Sign-up help text:              "First time here from...."

        Forget password:                "If you are having trouble accessing your Login.gov..."

        Press "Create app"



Part 8 / Finish configuring your OpenID Connect Provider for login.gov
----------------------------------------------------------------------
 1. In Keycloak, go to Realms -> MyRealm -> Identity providers -> Identity Provider for login.gov

 2. Make sure you have these settings
            alias:                          idp-login-gov
            Display Name:                   Identity Provider for login.gov
            Discovery endpoint:             https://idp.int.identitysandbox.gov/.well-known/openid-configuration
                                            -- Wait for the keycloak page to resolve this url

            Authorization URL:              https://idp.int.identitysandbox.gov/openid_connect/authorize
            Token URL:                      https://idp.int.identitysandbox.gov/api/openid_connect/token
            Logout URL                      https://idp.int.identitysandbox.gov/openid_connect/logout
            User Info URL:                  https://idp.int.identitysandbox.gov/api/openid_connect/userinfo
            Issuer:                         https://idp.int.identitysandbox.gov/
            Validate Signatures:            On
            Use JWKS URL:                   On
            JWKS URL:                       https://idp.int.identitysandbox.gov/api/openid_connect/certs
            Use PKCE:                       Off

            Client authentication:          JWT signed with private key
            Client ID:                      <ISSUER from the login.gov sandbox> / should look something like this:
                                            ex) urn:gov:gsa:openidconnect.profiles:sp:sso:dcsa:myTestApp88

            Client Secret:                  <blank>
            Client assertion signature alg: RS256

            Scopes:                         openid email profile phone address          # Hidden under the "Advanced"


 3. Set the level of authentication to LOA 3
     a. Change the "Authorization URL" setting

        From this:
              https://idp.int.identitysandbox.gov/openid_connect/authorize
        To this:
              https://idp.int.identitysandbox.gov/openid_connect/authorize?acr_values=http://idmanagement.gov/ns/assurance/loa/1
              *OR*
              https://idp.int.identitysandbox.gov/openid_connect/authorize?acr_values=http://idmanagement.gov/ns/assurance/loa/3



        If you set acr_values=http://idmanagement.gov/ns/assurance/loa/1, then the user is prompted to enter username/password and set the MFA token:

        If you set acr_values=http://idmanagement.gov/ns/assurance/loa/3, then the user is prompted for this:
                      Let’s verify your identity for SIT Web App

                      SIT Web App needs to make sure you are you — not someone pretending to be you. Learn more about verifying your identity(opens new tab)
                      You’ll need to:

                          Have a driver’s license or state ID

                          Other forms of ID are not accepted. We’ll check that you are the person on your ID.
                          Enter your Social Security number

                          You will not need your physical SSN card.
                          Match to your phone number

                          We match your phone number with your personal information and send a one-time code to your phone.
                          Re-enter your Login.gov password

                          Your password saves and encrypts your personal information.


       b. Press "Save"




 4. Add mappers to the login.gov identity provider / Tell Keycloak to bring the user attributes back from login.gov and return them to spring-boot upon authorization
    a. In keycloak, go to MyRealm -> Identity Providers -> Login with Login.gov -> "Mappers" tab

    b. In the "Mappers" page, press "Add mapper"
        Name:                      phone
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     phone
        User Attribute Name        <Custom> phone
        Press "Save"

    c. In the "Mappers" page, press "Add mapper"
        Name:                      street address
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     address.street_address
        User Attribute Name        <Custom> street_address
        Press "Save"

    d. In the "Mappers" page, press "Add mapper"
        Name:                      city
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     address.locality
        User Attribute Name        <Custom> locality
        Press "Save"

    e. In the "Mappers" page, press "Add mapper"
        Name:                      state
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     address.region
        User Attribute Name        <Custom> region
        Press "Save"

    f. In the "Mappers" page, press "Add mapper"
        Name:                      zip
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     address.postal_code
        User Attribute Name        <Custom> postal_code
        Press "Save"

    g. In the "Mappers" page, press "Add mapper"
        Name:                      full address
        Sync mode override:        inherit
        Mapper Type:               Attribute importer
        Claim:                     address.formatted
        User Attribute Name        <Custom> formatted
        Press "Save"


 5. Change the default client scope phone number mapper to look for "phone" instead of "phoneNumber"
     a. Go Realm -> MyRealm -> Client Scopes -> phone -> "Mappers" tab
     b. Click on "phone number"
         Name:               phone number
         User Attribute:     <Custom> phone
         Token Claim Name:   phone


 6. Allow administrators to write unmanaged attributes
    a. Realm -> Realm Settings -> General Tab
         Unmanaged Attributes:  Enabled
    b. Press "Save"


 7. Set the phone scope for our client
    a. Go to MyRealm -> Clients -> core-welcome-webapp -> "Client scopes" tab
    b. Change "Phone" to be default


 8. Grant default roles for user that logs-in with keycloak
    a. Create the  role:  APP16_SUPERVISOR
        1) Go to MyRealm -> Realm Roles
        2) Press "Create role"
           Role name:   APP16_SUPERVISOR
           Press "Save"

    b. Make it a default role
       1) Go to MyRealm -> Realm settings -> "User registration" tab
       2) Click on the "Default roles" tab
       3) Press "Assign role" -> Realm Roles
       4) Check APP16_SUPERVISOR
          Press "Assign"


 9. Make sure roles are returned to SpringBoot with the token
    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles
    c. Click on the "Settings" tab
    d. Change these settings:
            Include in token scope:  On
            Display Order:            1
       Press "Save"

    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles
    c. Click on the "Mappers" tab
    d. Click on "realm roles"

        Add to ID token:                    On
        Add to access token:                On
        Add to lightweight access token:    Off
        Add to userinfo:                    On
        Add to token introspection          On

10. Restart Keycloak
    a. Press Control-C to kill keycloak
    b. Startup keycloak
       unix> ./start.kc.ssl.sh



SKIP THIS STEP if you want the user to see the "Login with login.gov" button
----------------------------------------------------------------------------
         1. Change your Authentication flow to use this Identity Provider
            a. Go to Realms -> MyRealm -> Authentication
            b. Press "Create flow"
                Name:          login.gov authentication flow
                Flow Type:  Basic flow
                Press "Create"

            c. Press "Add execution"
               Select Cookie and press "Add"

            d. Press "Add Step"
               Select "Identity Provider Redirector" and press "Add"

            e. Set Requirement to both steps as "Alternative"

            f. Press the "Settings" icon next to "Identity Provider Redirector"
                Alias:                          idp-login-gov        (use the alias of the login.gov identity provider)
                Default Identity Provider:    idp-login-gov
                Press "Save"


         2. Make sure your keycloak is using the "login.gov authentication flow"
            a. Go to Realms -> MyRealm -> Clients -> app16-webapp -> Advanced tab
            b. In the Authentication flow overrides
                    Browser Flow:        login.gov authentication flow
               Press "Save"


Part 9 / Disable unused keycloak built-in clients
--------------------------------------------------------
In keycloak, Go to Realms -> MyRealm -> Clients
 1. Click on account
    In the upper right corner, mark it as disabled

 2. Click on account-console
    In the upper right corner, mark it as disabled

 3. Click on broker
    In the upper right corner, mark it as disabled

 4. Click on realm-management
    In the upper right corner, mark it as disabled

 5. Click on security-admin-console
    In the upper right corner, mark it as disabled


Part 10 / Configure hard-coded identity_provider_type_id
---------------------------------------------------------
 1. Go to Realms -> MyRealm -> Identity providers -> Login with Login.gov -> "Mappers" Tab
 2. Press "Add Mapper"
 3. In the Add Identity Provider Mapper
    name:  					identity_provider_type_id
    sync mode:				inherit
	mapper type:			Hardcoded Attribute
	User Attribute: 		identity_provider_type_id
	User Attribute Value:	11

	NOTE:  In Spring Security, aOidcUser.getClaim("identity_provider_type_id") pulls the value out





Part 11 / Configure your Spring Boot webapp to talk to Keycloak
---------------------------------------------------------------
 1. Get the client secret for your keycloak client
    In keycloak, go to Realms -> MyRealm -> Clients -> core-welcome-webapp -> Credentials Tab
    Copy the "Client Secret"

 2. Store the client secret in your application.yaml
    Paste-in the client-secret here:

        ##############################################################################
        # Keycloak Settings for Spring Security
        #
        # The realm url is probably something like https://keycloak.docker.internal:8444/realms/MyRealm
        ##############################################################################
        spring.security.oauth2.client.registration.keycloak:
            client-id:     "core-welcome-webapp"
            client-secret: "LXlMR3iKB0Y0nsRvpfBypBM31eQY9vVu"                  # Set the client secret here
            authorization-grant-type:    authorization_code
            scope:                       openid,email,profile

        spring.security.oauth2.client.provider.keycloak:
            issuer-uri: "https://keycloak.docker.internal:8444/realms/MyRealm"
            user-name-attribute:  preferred_username


 3. Configure the admin-cli client secret from keycloak
    In keycloak, go to Realm -> MyRealm -> Clients -> admin-cli
    a. In the "Settings" tab
       Set client authentication = ON
       Set Authorization = ON

    b. In the "Service account roles" tab
       Press "Assign role" -> Client Roles
       Search for manage-users
       Check manage-users
       Press "Assign"

    b. In the "Credentials" tab
       Copy the Client Secret


 4. Store the admin-cli credentials in your application.yaml

         ##############################################################################
         # Session Settings
         #   Keycloak Settings needed to programmatically logout a user
         #   WARNING:  Within Keycloak, You must change the admin-cli scope / Set client authentication=ON / Grant the manage-users to the "Service account roles"
         ##############################################################################
         core.session.service:
             enabled:                            true
             keycloak-admin-client-id:           "admin-cli"
             keycloak-admin-client-credentials:  "ExDgcth2kGWge9BPAN44xJUWPukazchc"
             keycloak-base-url:                  "https://keycloak.docker.internal:8444/"       # https://keycloak.docker.internal/
             keycloak-realm-name:                "MyRealm"                                      # MyRealm

