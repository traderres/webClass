How to Setup Login.gov as an Identity Provider Using Open ID Connect (OIDC)
---------------------------------------------------------------------------
Problem:  I want users to get redirected to Login.gov for identity
Solution: Setup Keycloak 25, Create a login.gov sandbox app, and configure Keycloak using Open ID Connect


Assumptions:
 A) You have an email address that ends with .gov or .mil
 B) You are using Keycloak v26.4.0
 C) You want the Keycloak Identity provider to use Open ID Connect (OIDC) to talk to login.gov


References
----------
https://developers.login.gov/
https://developers.login.gov/saml/getting-started/
https://developers.login.gov/oidc/getting-started/
https://developers.login.gov/testing/
https://developers.login.gov/attributes/
https://www.keycloak.org/archive/downloads-22.0.1.html
https://github.com/keycloak/keycloak-quickstarts/tree/22.0.1



Part 1 / Download & Install Keycloak to listen at https://keycloak.docker.internal:8444/
----------------------------------------------------------------------------------------
 1. Add an entry in your /etc/hosts
    unix> sudo vi /etc/hosts
         127.0.0.1    keycloak.docker.internal

 2. Download the keycloak-26.4.0.zip file
    Go to https://github.com/keycloak/keycloak/releases/download/26.4.0/keycloak-26.4.0.zip
    Save it to your ~/Downloads

 3. Unzip it
    unix> cd ~/Downloads
    unix> unzip keycloak-26.4.0.zip

 4. Create a bash variable for where you unzipped keycloak
    unix> export KEYCLOAK_HOME=~/Downloads/keycloak-26.4.0

 5. Create a script to start keycloak in SSL mode with a default admin password
    unix> vi $KEYCLOAK_HOME/start.kc.ssl.sh


###################################################################################################################################
# Filename:   start.kc.ssl.sh
#
# Purpose:
#     Run keycloak in SSL mode listening on https://keycloak.docker.internal:8444/
#
# ASSUMPTIONS:
#   1) You have a Java 17 JDK or later
#   2) You have ni2.docker.internal defined in your /etc/hosts file
#
# NOTES:
#   --https-client-auth=<none|request|required>        "request" means keycloak will also accept requests without a cert but validates cert if it exists
#   --hostname=keycloak.docker.internal                 tells it to listen on the hostname called keycloak.docker.internal
###################################################################################################################################

export JAVA_OPTS_APPEND="  -Djavax.net.ssl.trustStorePassword=changeit  -Djavax.net.ssl.trustStore=/path/to/cacerts.all "
export KC_BOOTSTRAP_ADMIN_USERNAME=admin
export KC_BOOTSTRAP_ADMIN_PASSWORD=admin

# Run keycloak in TLS mode
bin/kc.sh start  --http-enabled=false --https-port=8444 --https-key-store-file=/path/to/keycloak.docker.internal.keystore.jks --https-key-store-type=JKS --https-key-store-password=changeit    --log-level=INFO  --hostname-strict=false --hostname=keycloak.docker.internal  --https-client-auth=none



 6. Startup keycloak for the *FIRST* time
    unix> cd $KEYCLOAK_HOME
    unix> chmod ugo+x start.kc.ssl.sh
    unix> ./start.kc.ssl.sh

 7. Connect to keycloak for the *FIRST* time
    Go to https://keycloak.docker.internal:8444/

 8. Enter the admin username:  admin     (defined in KC_BOOTSTRAP_ADMIN_USERNAME)
    Enter the admin password:  admin     (defined in KC_BOOTSTRAP_ADMIN_PASSWORD)

     -- You should be logged-in as an administrator



Part 2 / OPTIONAL / Add the custom theme to keycloak
----------------------------------------------------
 1. Compile the keycloak-plugins project
    unix> cd /path/to/keycloak-plugins
    unix> mvn clean package
          -- Generates the Java JAR with the custom themes
          -- File is here:  login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar

 2. Copy login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar TO $KEYCLOAK_HOME/providers
    unix> cp login-page-theme/target/login-page-theme-1.0-SNAPSHOT.jar $KEYCLOAK_HOME/providers

 3. Stop keycloak by pressing Control-C

 4. Update the keycloak configuration (so it picks-up the login-page-theme jar)
    unix> cd $KEYCLOAK_HOME
    unix> ./bin/kc.sh build

 5. Startup Keycloak listening on TLS
    unix> ./start.kc.ssl.sh



Part 3 / Create the Keycloak Realm called "MyRealm"
---------------------------------------------------
 1. Create the empty realm:  MyRealm
    a. Login to keycloak
    b. Press "Manage realms" -> "Create realm"
    c. In the Create Realm screen
       Realm name:  MyRealm
       Press "Create"

       -- At this point, your current realm should be MyRealm


 2. Configure the Realm Session Timeout (to be 15 minutes)
    a. Press Realm Settings -> Sessions Tab
    b. In the "Sessions" tab
        SSO Session Idle:       15 minutes
        SSO Session Max:        15 minutes
        Press "Save"

    c. Press Realm Settings -> Tokens Tab
    d. In the "Tokens" tab
        Access Token Lifespan:                      15 minutes
        Access Token Lifespan for Implicit Flow:    15 minutes
        Press "Save"


 3. Configure the Realm User Profile to have these attributes:  user_type, authentication_type, subject, subject_alt_name
    a. Press Realm Settings -> "User profile" Tab
    b. Make sure email is not required
        1) Click on email
        2) Set Required field:  Off
        3) Press "Save"
    c. Make sure firstName is not required
        1) Click on firstName
        2) Set Required field:  Off
        3) Press "Save"
    d. Make sure lastName is not required
        1) Click on lastName
        2) Set Required field:  Off
        3) Press "Save"

    e. Add this attribute:  authentication_type
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       authentication_type
            Display name:           authentication_type
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    f. Add this attribute:  user_type
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       user_type
            Display name:           user_type
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    g. Add this attribute:  subject
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       subject
            Display name:           subject
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"

    h. Add this attribute:  subject_alt_name
        1) Press "Create attribute"
        2) In the Create attribute screen
            Attribute [name]:       subject_alt_name
            Display name:           subject_alt_name
            Multivalued:            Off
            Attribute group:        None
            Enabled:                Always
            Required Field:         Off
            Press "Create"


 4. Set the Client Scopes (which allow the web apps to get the attributes)
    a. Go to "MyRealm" -> Client Scopes -> "profile" -> "Mappers" tab
    b. Press "Add mapper" -> By configuration -> User Attribute
    c. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               authentication_type
            user attribute      <select authentication_type from the dropdown>
            Token claim name    authentication_type

        Rest are default values:
            Claim JSON Type:                    String
            Add to ID token:                    On
            Add to access token:                On
            Add to lightweight access token     Off
            Add to userinfo                     On
            Add to token introspection          On
            Multivalued                         Off
            Aggregate attribute value           Off

        Press "Save"
        Press "Client scope details" to add another one


    d. Press "Add mapper" -> By configuration -> User Attribute
    e. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               user_type
            user attribute      <select user_type from the dropdown>
            Token claim name    user_type

        Press "Save"
        Press "Client scope details" to add another one


    f. Press "Add mapper" -> By configuration -> User Attribute
    g. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               subject
            user attribute      <select subject from the dropdown>
            Token claim name    subject

        Press "Save"
        Press "Client scope details" to add another one


    h. Press "Add mapper" -> By configuration -> User Attribute
    i. In the "Add mapper" page
            Mapper type:        User Attribute
            Name:               subject_alt_name
            user attribute      <select subject_alt_name from the dropdown>
            Token claim name    subject_alt_name

        Press "Save"


 5. Add the clients
    NOTE:  Each client is a webapp that uses keycloak for authentication

    a. Create this client:  core-welcome-webapp
       1) Go to "MyRealm" -> Clients -> Create client
       2) In the Create client page
            Client type:    OpenID Connect
            Client ID:      core-welcome-webapp
            Client Name:    core-welcome-webapp
            Press "Next"
            Press "next"
            Press "save"
       3) In the "Settings" tab
            Root URL:                   https://ni2.docker.internal:8443/welcome              # Where ever the welcome webapp is listening on
            Home URL:                   https://ni2.docker.internal:8443/welcome              # Where ever the welcome webapp is listening on
            Client authentication:      On
            Authorization:              On
            Authentication Flow:        Standard flow
            Login theme:                <select theme from the keycloak plugins jar>
            Press "Save"




Part 4:  Get your Keycloak cert file (used to transmit info between login.gov and keycloak
------------------------------------------------------------------------------------------
 1. Login to your local keycloak
    Connect to https://keycloak.docker.internal:8444/

 2. Create a text file that holds the RS256 cert:  /tmp/keycloak.rs256.cert.txt
    a. Create the text file

    b. Add this to the text file:
    		-----BEGIN CERTIFICATE-----

    		-----END CERTIFICATE-----

 3. Get the RS256 "SIG" cert from keycloak
    a. In Keycloak, go to Realms -> MyRealm -> Realm settings
    b. In Realm settings, click on the "Keys" tab
    c. In the keys list
       Look for the line that has Algorithm=RS256 and Use=SIG
        1) On that row, press the "Certificate" button
        2) Copy that info

 4. Paste that certificate into your text file

 5. When done, the keycloak.rs256.cert.txt looks like this:

	 -----BEGIN CERTIFICATE-----
	 MIICnTCCAYUCBgGR11VaSzANBgkqhkiG9w0BAQsFADASMRAwDgYDV3gmgjmZDK6dVGzfeZKE/4n/W382rvy+Dm28+Wcss/saTFfFQXa7IL54jp3Mss18Ex4Q==
	 -----END CERTIFICATE-----




Part 5:  Setup the keycloak OIDC Provider and get it's Redirect URI  (as login.gov will need that)
---------------------------------------------------------------------------------------------------
 1. Connect to keycloak as an administrator

 2. Go to Realms -> MyRealm -> Identity providers

 3. In the "Identity providers" page, press "Add provider" -> OpenID Connect v1.0

 4. In the "Add OpenID Connect Provider page
 	Alias:  					idp-login-gov        (do not use spaces as this changes the Redirect URI)
    Display Name:    			Login with login.gov

    Discovery endpoint:  		https://idp.int.identitysandbox.gov/.well-known/openid-configuration

	Client authentication:		JWT signed with private key
    Client ID:					TEMP                 (it does not matter -- but we need something right now)
	Press "Add"

 5. Copy the Redirect URI   (we will need it in the next step to configure login.gov)
    NOTE:  It should look something like this:
               https://keycloak.docker.internal:8444/realms/MyRealm/broker/idp-login-gov/endpoint



Part 6:  Setup the login.gov "Sandbox Account"
----------------------------------------------
NOTE:   Anyone with a .gov or .mil email address may request a "Sandbox Account" WITHOUT any approval from login.gov

 1. Create the login.gov "Sandbox account"
    a. Go to https://dashboard.int.identitysandbox.gov/
    b. Select the "Sign-in" button to create a new account
	c. Next to "Create your first team", press "Continue"

    d. In the "New Team" page
    	Name:   	SIT_WebApp_Team
    	Agency: 	Department of Defense
		Press "Create"

 2. Create a login.gov "App" called "My Web App"
	a. In login.gov, select Apps (on the top menubar)
	   *OR*
	   https://dashboard.int.identitysandbox.gov/service_providers

	b. Press "Create a new app"

	c. In the "New App" page
		Dashboard Configuration:  		Sandbox
		App name            			DOD-MyTestApp21
		Friendly name:					My Test App 21 					  (displayed to users when logging in)
		Team:               			<Select your team from step 1>
		Authentication Protocol:		OpenID Connect Private Key JWT    (preferred for web apps)
		Level of Service:				Identity verification permitted   (so the webapp will receive verified attributes)
		Default Auth Assurance Level:	MFA Required, remember device disallowed (AAL2)

		Attribute bundle:  [check these] / Do not check SSN
			email
			x509_subject
			x509_presented
			first_name
			last_name
			address1
			address2
			city
			state
			zipcode
			phone

		Issuer:					urn:gov:gsa:openidconnect.profiles:sp:sso:<AGENCY_NAME>:<APP_NAME>

                                example) urn:gov:gsa:openidconnect.profiles:sp:sso:dcsa:myTestApp21


		Certificates:			Press "Choose a cert file"
								Browse to your /tmp/keycloak.rs256.cert.txt


		Push notification URL:  <blank>

		Failure to Proof URL	https://www.google.com/

		Redirect URIs:          <this is keycloak's generated "Redirect URI" for your identity provider>
							    ex) https://keycloak.docker.internal:8444/realms/MyRealm/broker/idp-login-gov/endpoint

		Sign-in help text:  	"First time here from...."

		Sign-up help text:		"First time here from...."

		Forget password help:   "If you are having trouble accessing your Login.gov..."

		Press "Create app"



Part 7  Finish configuring your OpenID Connect Provider for login.gov
----------------------------------------------------------------------
 1. In Keycloak, go to Realms -> MyRealm -> Identity providers -> Identity Provider for login.gov

 2. Make sure you have these settings
			alias:  						idp-login-gov
			Display Name:   				Identity Provider for login.gov
			Discovery endpoint:				https://idp.int.identitysandbox.gov/.well-known/openid-configuration
											-- Wait for the keycloak page to resolve this url

			Authorization URL:				https://idp.int.identitysandbox.gov/openid_connect/authorize
			Token URL:						https://idp.int.identitysandbox.gov/api/openid_connect/token
			Logout URL						https://idp.int.identitysandbox.gov/openid_connect/logout
			User Info URL:					https://idp.int.identitysandbox.gov/api/openid_connect/userinfo
			Issuer:							https://idp.int.identitysandbox.gov/
			Validate Signatures:			On
			Use JWKS URL:					On
			JWKS URL:						https://idp.int.identitysandbox.gov/api/openid_connect/certs
			Use PKCE:						Off

			Client authentication:			JWT signed with private key
			Client ID:             			<ISSUER from the login.gov sandbox> / should look something like this:
			                                 ex) urn:gov:gsa:openidconnect.profiles:sp:sso:dcsa:myTestApp21

			Client Secret:					<blank>
			Client assertion signature alg: RS256

			Scopes:                         openid email profile          # Hidden under the "Advanced"


 3. Set the level of authentication to LOA 3
     a. Change the Authorization URL from this:
	          https://idp.int.identitysandbox.gov/openid_connect/authorize
	   	To this:
	          https://idp.int.identitysandbox.gov/openid_connect/authorize?acr_values=http://idmanagement.gov/ns/assurance/loa/1
			  *OR*
			  https://idp.int.identitysandbox.gov/openid_connect/authorize?acr_values=http://idmanagement.gov/ns/assurance/loa/3


		If you set acr_values=http://idmanagement.gov/ns/assurance/loa/1, then the user is prompted to enter username/password and set a MFA token:

	    If you set acr_values=http://idmanagement.gov/ns/assurance/loa/3, then the user is prompted for this:
					  Let’s verify your identity for SIT Web App

					  SIT Web App needs to make sure you are you — not someone pretending to be you. Learn more about verifying your identity(opens new tab)
					  You’ll need to:

						  Have a driver’s license or state ID

						  Other forms of ID are not accepted. We’ll check that you are the person on your ID.
						  Enter your Social Security number

						  You will not need your physical SSN card.
						  Match to your phone number

						  We match your phone number with your personal information and send a one-time code to your phone.
						  Re-enter your Login.gov password

						  Your password saves and encrypts your personal information.


 	  b. Press "Save"




 4. Add mappers to the login.gov identity provider / Tell Keycloak to bring the user attributes back from login.gov and return them to spring-boot upon authorization
    a. In keycloak, go to MyRealm -> Identity Providers -> Login with Login.gov -> "Settings" tab
    b. In the settings page, press 'Advanced"
    	    Scopes:   	openid email profile phone address

	c. In keycloak, go to MyRealm -> Identity Providers -> Login with login.gov -> "Mappers" tab

    d. In the "Mappers" page, press "Add mapper"
    	Name:  					phone
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					phone
		User Attribute Name 	<Custom> phone
		Press "Save"

    e. In the "Mappers" page, press "Add mapper"
    	Name:  					street address
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					address.street_address
		User Attribute Name 	<Custom> street_address
		Press "Save"

    f. In the "Mappers" page, press "Add mapper"
    	Name:  					city
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					address.locality
		User Attribute Name 	<Custom> locality
		Press "Save"

    g. In the "Mappers" page, press "Add mapper"
    	Name:  					state
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					address.region
		User Attribute Name 	<Custom> region
		Press "Save"

    h. In the "Mappers" page, press "Add mapper"
    	Name:  					zip
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					address.postal_code
		User Attribute Name 	<Custom> postal_code
		Press "Save"

    i. In the "Mappers" page, press "Add mapper"
    	Name:  					full address
    	Sync mode override:		inherit
		Mapper Type: 			Attribute importer
		Claim:					address.formatted
		User Attribute Name 	<Custom> formatted
		Press "Save"


 5. Change the default client scope phone number mapper to look for "phone" instead of "phoneNumber"
 	a. Go Realm -> MyRealm -> Client Scopes -> phone -> "Mappers" tab
 	b. Click on "phone number"
 		Name:  			 phone
 		User Attribute:  <Custom> phone
 		Token Claim Name: phone


 6. Allow administrators to write unmanaged attributes
    a. Realm -> Realm Settings -> General Tab
    	Unmanaged Attributes:  Enabled


SKIPPED THIS STEP as I want users to see the "Login with login.gov" button
---------------------------------------------------------------------------
		 1. Change your Authentication flow to use this Identity Provider
			a. Go to Realms -> MyRealm -> Authentication
			b. Press "Create flow"
				Name:  		login.gov authentication flow
				Flow Type:  Basic flow
				Press "Create"

			c. Press "Add execution"
			   Select Cookie and press "Add"

			d. Press "Add Step"
			   Select "Identity Provider Redirector" and press "Add"

			e. Set Requirement to both steps as "Alternative"

			f. Press the "Settings" icon next to "Identity Provider Redirector"
				Alias:    					  idp-login-gov        (use the alias of the login.gov identity provider)
				Default Identity Provider:    idp-login-gov
				Press "Save"


		 2. Make sure your keycloak is using the "login.gov authentication flow"
			a. Go to Realms -> MyRealm -> Clients -> app16-webapp -> Advanced tab
			b. In the Authentication flow overrides
					Browser Flow:		login.gov authentication flow
			   Press "Save"


 7. Set the phone scope for our client
    a. Go to MyRealm -> Clients -> core-welcome-webapp -> "Client scopes" tab
    b. Change "Phone" to be default


 8. Grant default roles for user that logs-in with keycloak
	a. Create the  role:  APP16_SUPERVISOR
	    1) Go to MyRealm -> Realm Roles
	    2) Press "Create role"
	       Role name:   APP16_SUPERVISOR
	       Press "Save"

	b. Make it a default role
	   1) Go to MyRealm -> Realm settings -> "User registration" tab
	   2) Click on the "Default roles" tab
	   3) Press "Assign role" -> Realm Roles
       4) Check APP16_SUPERVISOR
          Press "Assign"


 9. Make sure roles are returned to SpringBoot with the token
    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles
    c. Click on the "Settings" tab
    d. Change these settings:
    		Include in token scope:  On
    		Display Order:            1
       Press "Save"

    a. Go to Realms -> MyRealm -> Client scopes
    b. Click on roles
    c. Click on the "Mappers" tab
    d. Click on "realm roles"

    	Add to ID token:					On
    	Add to access token:				On
    	Add to lightweight access token:	Off
    	Add to userinfo:					On
    	Add to token introspection			On


10. Restart Keycloak




Part 8: Configure your Spring Boot webapp to talk to Keycloak
-------------------------------------------------------------
ASSUMPTIONS:
 1) Your keycloak is listening on https://localhost.localdomain:8444
 2) Your pom.xml is using the spring-boot-starter-oauth2-client

     <dependency>
       <!-- Sprint Boot / Keycloak Integration / Add the OAuth2/OpenID client to talk to Keycloak and authenticate users -->
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-oauth2-client</artifactId>
     </dependency>


 1. Edit your application.yaml

 2. Add this:
	##############################################################################
	# Keycloak Settings for Spring Security
	#
	# The realm url is probably something like https://keycloak.docker.internal:8444/realms/MyRealm
	##############################################################################
	spring.security.oauth2.client.registration.keycloak.client-id: core-welcome-webapp
	spring.security.oauth2.client.registration.keycloak.client-secret: j4W4c7EpPI2rfT7fKgt28oYDUi19fF66
	spring.security.oauth2.client.registration.keycloak.authorization-grant-type: authorization_code
	spring.security.oauth2.client.registration.keycloak.scope: openid,email,profile,phone,address
	spring.security.oauth2.client.provider.keycloak.issuer-uri: https://keycloak.docker.internal:8444/realms/MyRealm
	spring.security.oauth2.client.provider.keycloak.user-name-attribute: preferred_username
