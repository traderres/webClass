How to Setup a Load Balancer on AWS (using nginx Controller and Network Load Balancer)
--------------------------------------------------------------------------------------
I want the SSL traffic to pass through to the backend (so it's encrypted everywhere)
-- Because the SSL traffic is passed-through, traffic is not decrypted
-- Because the traffic is not decrypted, you cannot route based on the path
-- You *CAN* route based on the hostname
          https://app1.traderres.com/ --->  web app #1
          https://app2.traderres.com/ --->  web app #2
          https://app3.traderres.com/ --->  web app #3

-- So, this approach requires creating a new server certificate for *EVERY* webapp



References
----------
https://arunsworld.medium.com/ssl-passthrough-via-kubernetes-ingress-b3eaf3c7c9da
https://kubernetes.github.io/ingress-nginx/deploy/


Part 1:  Setup the nginx controller and network load balancer in AWS
--------------------------------------------------------------------
 1. Configure & Install the ingress controller so that ssl pass-through is enabled
    a. Download the nginx-ingress controller deployment file
       unix> wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.yaml -O nginx.controller.deploy.yaml

    b. Modify the Deployment by adding this command-line argument:
       unix> vi nginx.controller.deploy.yaml

		kind: Deployment
		...
		spec:
		  template:
			spec:
			  containers:
			  - args:
				  ...
				  - --enable-ssl-passthrough



			  unix> vi deploy.yaml



    c. Install the nginx ingress controller
       unix> kubectl apply -f deploy.yaml


 2. Setup the Network Load Balancer
    unix> kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/aws/deploy.yaml


 3. Setup the Ingress Service
    unix> vi app-load-balancer.yaml


######################################################################################
# Filename:  app-load-balancer.yaml
#
# Purpose:   Setup the services and the ingress rules for load balancing
#
#
#  Browser                           Network
#  https://nccs.traderres.com/ -->    Load    --> nginx-controller  --> nccs-deployment
#                                    Balancer      (ssl pass-thru)
#
#
# To troubleshoot kubernetes, run this command:
# unix> kubectl get events --all-namespaces
#
######################################################################################


#####################################################
# NCCS Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-service
  labels:
    app: nccs-service

spec:
  type: NodePort
  selector:
    app: nccs-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


#####################################################
# NCCS-Admin Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-admin-service
  labels:
    app: nccs-admin-service

spec:
  type: NodePort
  selector:
    app: nccs-admin-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80

---
#####################################################
# Ingress (app-ingress-webapp)
#
# https://nccs.traderres.com/    --> takes you to nccs with end-to-end encryption
#####################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

spec:
  ingressClassName: nginx
  rules:
    - host: nccs.traderres.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nccs-service
                port:
                  number: 443
    - host: nccs-admin.traderres.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nccs-admin-service
                port:
                  number: 443




 4. Create the ingress and service
    unix> kubectl apply -f app-load-balancer.yaml


 5. Get the public hostname of the network load balancer
    unix> kubectl get ingress

	NAME          CLASS   HOSTS               ADDRESS                                                                   PORTS   AGE
	app-ingress   nginx   app.traderres.com   a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com   80      150m


 6. Update godaddy's cname record for app.traderres.com so that it corresponds to the new external hostname
		a. Go to https://dcc.godaddy.com/control/portfolio/traderres.com/settings
        b. Click on the DNS tab
		c. Edit the old CNAME record for "app"    (this corresponds to app.traderres.com)
		   Type:  CNAME
		   Name:  app
		   Value: a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com

		d. Press "Save"


 7. Wait for goDaddy to show that app.traderres.com points to the new load-balancer public hostname
    Do a lookup to get the current hostname for app.traderres.com
    unix> nslookup app.traderres.com

    *OR keep looping forever*
    unix> while [ 1 ]; do clear; date; nslookup app.traderres.com; sleep 3; done




Part 2:  Update the webapp so it has not /nccs or /nccs-admin
-------------------------------------------------------------
I N C O M P L E T E






How to Delete the nginx controller and load balancer
----------------------------------------------------
unix> kubectl delete -f app-load-balancer.yaml
unix> kubectl delete -f nginx.controller.deploy.yaml





