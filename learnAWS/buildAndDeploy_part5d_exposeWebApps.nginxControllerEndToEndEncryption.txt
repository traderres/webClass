How to Setup a Load Balancer on AWS (using nginx Controller and Network Load Balancer)
--------------------------------------------------------------------------------------
I want the SSL traffic to be encrypted end-to-end
I want to re-use one server cert (app.traderres.com) and route to different apps using the URL

The plan is to route based on the url path
          https://app.traderres.com/app1 --->  web app #1
          https://app.traderres.com/app2 --->  web app #2
          https://app.traderres.com/app3 --->  web app #3


        User's    ------------>    Load Balancer ---->  nginx controller              ------------>     deployment      ------------>    pods
        Browser      https                               a) decrypts traffic               https                              https      (decrypt traffic)
                                                         b) re-encrypts traffic
                                                         c) routes to correct deployment


References
----------
https://kubernetes.github.io/ingress-nginx/deploy/
https://aws.amazon.com/blogs/containers/exposing-kubernetes-applications-part-3-nginx-ingress-controller/
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/



How to edit nginx controller settings
-------------------------------------
unix> kubectl edit deployment ingress-nginx-controller -n ingress-nginx



ASSUMPTIONS:
 A) You have deployments running with selector app=nccs-backend

#
# nccs-deployment.yaml
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nccs-deployment

spec:
  selector:
    matchLabels:
      app: nccs-backend

  replicas: 1
  strategy:
    type:  Recreate
  template:
    metadata:
      name: nccs-backend
      labels:
         app: nccs-backend

    spec:
      hostAliases:
      - ip: "18.216.9.38"
        hostnames:
          - "keycloak.traderres.com"

      volumes:
      - name: app-certs-pv
        persistentVolumeClaim:
          claimName: app-certs-pvc

      containers:
      - image: 524647912468.dkr.ecr.us-east-2.amazonaws.com/nccs:backend-2.3.5-SNAPSHOT
        imagePullPolicy: Always
        volumeMounts:
        - name: app-certs-pv
          mountPath: /shared/certs

        name: nccs-backend

        env:
           - name: POSTGRES_HOSTNAME
             value: "nccs-db.csbk2jnrc8ao.us-east-2.rds.amazonaws.com"
           - name: POSTGRES_DB_USERNAME
             value: "nccs_user"
           - name: POSTGRES_DB_PASSWORD
             value: "secret12"
           - name: POSTGRES_DB_NAME
             value: "nccs_db"
           - name: POSTGRES_SCHEMA_NAME
             value: "nccs_db"
           - name: POSTGRES_POOL_SIZE
             value: "5"
           - name: ES_URL
             value: "https://vpc-app-opensearch-ep5v5i6jlal7ka3qraya46fpsi.us-east-2.es.amazonaws.com:443"
           - name: ES_USERNAME
             value: "es_user"
           - name: ES_PASSWORD
             value: "Secret1@"
           - name: KEYCLOAK_CLIENT_ID
             value: "nccs-webapp"
           - name: KEYCLOAK_CLIENT_SECRET
             value: "0kps0Tn29TWhQhoEy7SwhvWEYNfYb7cU"
           - name: KEYCLOAK_ISSUER_URI
             value: "https://keycloak.traderres.com:8444/realms/MyRealm"
           - name: INCOMING_KEYSTORE_FILEPATH
             value: "/shared/certs/webapp.keystore.jks"
           - name: INCOMING_KEYSTORE_PASSWORD
             value: "changeit"
           - name: INCOMING_TRUSTSTORE_FILEPATH
             value: "/shared/certs/webapp.truststore.jks"
           - name: INCOMING_TRUSTSTORE_PASSWORD
             value: "changeit"
           - name: JAVA_TOOL_OPTIONS
             value: -Xms1024m -Xmx1024m -Demail.mode=off -Dserver.port=443 -Djavax.net.ssl.trustStore=/shared/certs/custom.cacerts -Djavax.net.ssl.trustStorePassword=changeit





Procedure for setting nginx controller as a load balancer in AWS
----------------------------------------------------------------
 1. Download & Install nginx controller on AWS on your kubernetes cluster
    a. Download the nginx controller for AWS
       unix> wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml -O aws.deploy.yaml

    b. Install the nginx controller for AWS
       unix> kubectl apply -f aws.deploy.yaml


 2. Create a server certificate called app.traderres.com and download the parts
    a. ssh to the keycloak server (that's where our Let's Encrypt cert-bot is)
        unix> ssh -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38

    b. On the keyclaok server
       unix> sudo -s
       unix> cd /opt/shared-storage/certbot/archive

        If you don't see an app.traderres.com, then you must create one


     c. Download the pieces to your box (that is running kubectl)




 3. Create the 2 secrets
    a. Create secret #1 "default/ca-secret"   [this holds the root certificate authority's public cert]
       unix> kubectl create secret generic ca-secret --from-file=ca.crt=888.root.pem

    b. Create secret #2:  "default/ca-tls"
       unix> kubectl create secret generic ca-tls --namespace default --from-file=ca.crt=888.fullchain_and_server_cert.pem --from-file=tls.key=888.app.traderres.com.key.pem  --from-file=tls.crt=888.app.traderres.com.server.crt


 4. Verify that the secrets exist
    unix> kubectl get secret

         NAME             TYPE                DATA   AGE
         app-tls-secret   kubernetes.io/tls   2      10h



 5. Create the ingress and services (that can reach the pods and uses the secret called "default/ca-tls" and "default/ca-secret")
    unix> vi app-load-balancer.yaml

######################################################################################
# Filename:  app-load-balancer.yaml
#
# Purpose:   Setup the services and the ingress rules for load balancing
#
#
#        Browser                                Network
#  https://app.traderres.com/nccs ---------->    Load    ----->  nginx-controller   --------------> nccs-deployment --->  nccs pod #1
#     PKI client generated                       https            Balancer             (https)                            nccs pod #2
#            root-ca                                              [must trust
#                                                                  our root-ca]
# To troubleshoot kubernetes, run this command:
# unix> kubectl get events --all-namespaces
#
#
# ASSUMPTIONS:
#  1) You created a generic secret from the root-ca public/root.pem
#     unix> kubectl create secret generic ca-secret --from-file=ca.crt=888.root.pem
#
#  2) You created a generic secret called ca-tls
#     unix> kubectl create secret generic ca-tls --namespace default --from-file=ca.crt=888.fullchain_and_server_cert.pem --from-file=tls.key=888.app.traderres.com.key.pem  --from-file=tls.crt=888.app.traderres.com.server.crt
#
#
######################################################################################


#####################################################
# NCCS Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-service
spec:
  type: ClusterIP              # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-backend          # The app=nccs-backend is the same selector found in nccs-deployment
  ports:
    - name: https
      port: 443
      protocol: 'TCP'
      targetPort: 443
    - name: http
      protocol: 'TCP'
      port: 80
      targetPort: 80


---
#####################################################
# NCCS-Admin Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-admin-service
spec:
  type: ClusterIP                    # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-admin-backend          # The app=nccs-admin-backend is the same selector found in nccs-admin-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


---
#####################################################
# Ingress (app-ingress-webapp)
#
# https://nccs.traderres.com/    --> takes you to nccs with end-to-end encryption
#####################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3"

    # Enable pki client certificate authentication
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"

    # Create the secret containing the trusted ca certificates
    nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret"

    nginx.ingress.kubernetes.io/proxy-ssl-secret: "default/ca-tls"

    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"

    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"

spec:
  ingressClassName: nginx

  tls:
   - hosts:
       - app.traderres.com
     secretName: ca-tls

  rules:
    - host: app.traderres.com
      http:
        paths:
          - path: /nccs
            pathType: Prefix
            backend:
              service:
                name: nccs-service
                port:
                  number: 443
          - path: /nccs-admin
            pathType: Prefix
            backend:
              service:
                name: nccs-admin-service
                port:
                  number: 443






 6. Deploy the ingress and services
    unix> kubectl apply -f app-load-balancer.yaml



 7. Get the public hostname of the network load balancer
    NOTE:  You may have to wait a minute for AWS to allocate a public hostname for it
    unix> kubectl get ingress

	NAME          CLASS   HOSTS               ADDRESS                                                                   PORTS       AGE
	app-ingress   nginx   app.traderres.com   a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com   80, 443     150m



 8. Update godaddy's cname record for app.traderres.com so that it corresponds to the new external hostname
		a. Go to https://dcc.godaddy.com/control/portfolio/traderres.com/settings
        b. Click on the DNS tab
		c. Edit the old CNAME record for "app"    (this corresponds to app.traderres.com)
		   Type:  CNAME
		   Name:  app
		   Value: a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com

		d. Press "Save"


 9. Wait for goDaddy to show that app.traderres.com points to the new load-balancer public hostname
    Do a lookup to get the current hostname for app.traderres.com
    unix> nslookup app.traderres.com

    *OR keep looping forever*
    unix> while [ 1 ]; do clear; date; nslookup app.traderres.com; sleep 3; done


10. Watch the nginx pod log files
    unix> kubectl get pods -A

    NAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE
    cert-manager    cert-manager-7564b796c7-gsd2f               1/1     Running     0          3d7h
    cert-manager    cert-manager-cainjector-58bcd74fd8-wvszz    1/1     Running     0          3d7h
    cert-manager    cert-manager-webhook-5bd9444ff7-n854k       1/1     Running     0          3d7h
    default         nccs-deployment-8475b7fd69-wkzrw            1/1     Running     0          34h
    ingress-nginx   ingress-nginx-admission-create-xr7t7        0/1     Completed   0          126m
    ingress-nginx   ingress-nginx-admission-patch-b6d5n         0/1     Completed   0          126m
    ingress-nginx   ingress-nginx-controller-7fcc694bd4-7742w   1/1     Running     0          126m   <-- nginx controller
    kube-system     aws-node-s78f4                              1/1     Running     0          4d7h
    kube-system     aws-node-t2h95                              1/1     Running     0          4d7h
    kube-system     coredns-647484dc8b-64gbd                    1/1     Running     0          4d7h
    kube-system     coredns-647484dc8b-blxx5                    1/1     Running     0          4d7h
    kube-system     ebs-csi-controller-64f786fdbf-4vklq         6/6     Running     0          3d8h
    kube-system     ebs-csi-controller-64f786fdbf-9skx2         6/6     Running     0          3d8h
    kube-system     ebs-csi-node-9xxj5                          3/3     Running     0          3d8h
    kube-system     ebs-csi-node-zqfd5                          3/3     Running     0          3d8h
    kube-system     kube-proxy-2qh4x                            1/1     Running     0          4d7h

	unix> kubectl logs -f ingress-nginx-controller-7fcc694bd4-7742w -n ingress-nginx



11. Attempt to connect with your browser and pki client cert
    a. Go to https://app.traderres.com/nccs







How to Delete the nginx controller and load balancer
----------------------------------------------------
unix> kubectl delete -f app-load-balancer.yaml
unix> kubectl delete -f aws.deploy.yaml





