How to Setup an AWS Account and Create an Elastic Container Registry (ECR)
--------------------------------------------------------------------------


Part 1 / Setup the AWS Account & Create the ECR
-----------------------------------------------
 1. Setup AWS Account / Create Users / Grant CLI Access  (so we can push up builds to our AWS ECR Registry)
    Goal:  Setup a user that can run the CLI to push-up builds
    a. Go to https://aws.com/

    b. Create the "administrators" group
       1) In AWS, go to Services -> IAM
       2) On the left, click on "User groups"
       3) In the "Create user group"
          User group name:  administrators

          In the "Attach permissions policies"
          Add these role:
            AdministratorAccess
       4) Press "Create user group"

    b. Create the dev.user
       1) In AWS, go to Services -> IAM
       2) On the left, click on Users
       3) Press "Create user"
       4) In "User details"
          User name:  dev.user
          Check "Provide user access to the AWS Management Console"
          Check "I want to create an IAM user"


          Custom password
             custom password:  enter it
             Uncheck "User must create a new password at next sign-in)

          Press "Next"

       5) In "Set permissions"
          Select "Attach policies directly"
          Search for CNI
          Check Off theses roles:  AmazonEKS_CNI_Policy
          Press "Next"

       6) Press "Create user"
          NOTE:  Grab the console sign-in link:   https://524647912468.signin.aws.amazon.com/console

       7) Add this user to the "administrators group"
          Go to IAM -> Users
          Click on the "dev.user" link
          Click on "Groups"
          Press "Add user to groups"
          Check "administrators"
          Press "Add user to group(s)"

       8) Create access keys for the dev.user
          1) Click on "Users"
          2) Click on dev.user
          3) Click on "Security Credentials"
          4) Click on "Create access key"
          5) Select Command Line interface
             Select "I understand the above"
             Press "Next"

          6) Description tag value:  leave it blank
             Press "Create access key"

          7) Download the key by pressing "Download .csv file"
            --> Save dev.user_accessKeys.csv to your ~/Downloads

           -- Now, the user called "dev.user" should have the authority to push up to the AWS ECR Registry


    c. Logout as root user


 2. Use the dev.user account to create an ECR repository for apps
    a. Login as the dev.user
       Go to https://524647912468.signin.aws.amazon.com/console
       -- The account ID should be provided

       IAM username:  dev.user
       Password:      <enter password>
       Press "Sign in"

	b. Create an ECR for apps
	   1) In AWS, go to Services -> ECR
	   2) Press "Create"

	   3) IN the "Create private repository" page

	      Repository Name:  namespace is apps
	                        repo-name is app16

		  Image tag mutability:  Mutable
		  Press "Create"


 3. Get the URI of your private "apps" repository
    NOTE:  Your container registry is TIED to your region
    a. In AWS, set your region to us-east-1
    b. Go to Services -> ECR
	c. On the left, under "Private registry", click on Repositories

	d. You should see apps/app16
	   -- Copy the URI
       -- It should be something like this:		524647912468.dkr.ecr.us-east-1.amazonaws.com/apps/app16


 4. Create an ECR repository for infrastructure
     a. Login as the dev.user
        Go to https://524647912468.signin.aws.amazon.com/console
        -- The account ID should be provided

        IAM username:  dev.user
        Password:      <enter password>
        Press "Sign in"

 	b. Create an ECR for apps
 	   1) In AWS, go to Services -> ECR
 	   2) Press "Create"

 	   3) IN the "Create private repository" page

 	      Repository Name:  namespace is apps
 	                        repo-name is infrastructure

 		  Image tag mutability:  Immutable
 		  Press "Create"


 5. Get the URI of your private "infrastructure" repository
    NOTE:  Your container registry is TIED to your region
    a. In AWS, set your region to us-east-1
    b. Go to Services -> ECR
	c. On the left, under "Private registry", click on Repositories

	d. You should see apps/infrastructure
	   -- Copy the URI
       -- It should be something like this:		524647912468.dkr.ecr.us-east-1.amazonaws.com/apps/infrastructure



Part 2 / Setup AWS Credentials
------------------------------
  1. Install AWS CLI
     See https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
     a. Install the AWS CLI for Linux
		unix> curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unix> unzip awscliv2.zip
		unix> sudo ./aws/install

 		*OR*

 		Install the AWS CLI for Windows
 		terminal> msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi


     b. Verify the AWS CLI is installed
        unix> aws --version

        You should see something like this:
           aws-cli/2.22.10 Python/3.12.6 Linux/5.14.0-427.42.1.el9_4.x86_64 exe/x86_64.rocky.9


  4. Setup AWS Credentials
     a. Open the downloaded CSV file (dev.user_accessKeys.csv) in a text editor
		-- You should see a 2 line file

        	Access key ID,Secret access key
        	ABCDEFGHIJKLMN,123456789123456789/123456789456123
				^                        ^        ^
				|                        |        |
			Access Key Id          AWS Secret Access Key

     b. Setup AWS credentials
        unix> aws configure

		AWS Access Key ID [None]:         <ENTER TEXT BEFORE THE COMMA (on line 2 of the CSV file)
		AWS Secret Access Key [None]:     <ENTER TEXT AFTER  THE COMMA (on line 2 of the CSV file)
		Default region name [None]:       If using aws-gov-cloud, then probably use your region   -- e.g., us-gov-west-1
		                                  If using aws-residential, then probably use your region -- e.g., us-east-1
		Default output format [None]:     json



  5. Verify you can get your password and region and store it in a variable
     unix> export AWS_REGION=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
     unix> export PASSWORD=`aws ecr get-login-password --region $AWS_REGION`
	 unix> echo $AWS_REGION
	 unix> echo $PASSWORD





Part 3 / Use docker to download your openJDK 17 image and push it up to your private ECR
-----------------------------------------------------------------------------------------
 1. On Rocky Linux 9, install docker
    unix> sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
    unix> sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

 2. Startup Docker
    unix> sudo systemctl start docker

 3. Finish configuring docker
    unix> sudo usermod -aG docker $USER            # Add your unix account to the docker group
    unix> sudo chmod 666 /var/run/docker.sock      # Open permissions on the docker.sock

 4. Verify that your account can run docker commands
    unix> docker ps

 5. Register for an account with ironbank.dso.mil
    https://ironbank.dso.mil/

 6. Register with harbor and get your username and CLI secret from harbor's user profile page:
    a. Insert your CAC
    b. Go to https://registry1.dso.mil
    c. Press "Login with P1 SSO"
    d. Enter pin
    e. In the upper right corner, pull your username -> User Profile
       NOTE:  Get your username  (not the email address)
              Get your CLI secret

 7. Search for the container you want to download
	a. Go to https://ironbank.dso.mil
	b. Search for openjdk17
	c. Click on a match
	   -- Get the docker pull command

 8. Use your credentials to tell docker to login to registry1.dso.mil
 	unix> export USERNAME=username-from-user-profile
 	unix> export PASSWORD='secret-from-user-profile'
 	unix> echo $PASSWORD | docker login --username $USERNAME --password-stdin  registry1.dso.mil

 	You should see the following:
		Configure a credential helper to remove this warning. See
		https://docs.docker.com/engine/reference/commandline/login/#credential-stores
		Login Succeeded

 9. Use docker to pull the openjdk17-slim
    unix> docker pull registry1.dso.mil/ironbank/redhat/openjdk/openjdk17-slim:1.17

10. Look at your docker images
    unix> docker images -a

    REPOSITORY                                                 TAG       IMAGE ID       CREATED       SIZE
    registry1.dso.mil/ironbank/redhat/openjdk/openjdk17-slim   1.17      0dc05c7b42cc   3 hours ago   384MB


11. Tag the local image so you can push to your AWS repository
	unix> docker tag  registry1.dso.mil/ironbank/redhat/openjdk/openjdk17-slim:1.17  524647912468.dkr.ecr.us-east-1.amazonaws.com/apps/infrastructure:openjdk17-slim-1.17

12. Look at your images
    unix> docker images -a

	REPOSITORY                                                                             TAG                   IMAGE ID       CREATED       SIZE
	524647912468.dkr.ecr.us-east-1.amazonaws.com/apps/infrastructure                       openjdk17-slim-1.17   0dc05c7b42cc   3 hours ago   384MB
	registry1.dso.mil/ironbank/redhat/openjdk/openjdk17-slim                               1.17                  0dc05c7b42cc   3 hours ago   384MB


13. Login to AWS using docker by getting the push command for the apps/infrastructure
    a. Login to the AWS
    b. Go to AWS -> ECR Repository
    c. Go to apps/infrastructure
    d. Check it and select "Get Push Command"
    e. Run it
       unix> aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 524647912468.dkr.ecr.us-east-1.amazonaws.com

	   You should see:
			Login Succeeded

14. Push up the openjdk 17 image to your Amazon ECR repo
    unix> docker push 524647912468.dkr.ecr.us-east-1.amazonaws.com/apps/infrastructure:openjdk17-slim-1.17


    NOTE:  We need this to build the webapp and sync-service



