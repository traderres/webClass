How to Setup a Load Balancer on AWS (using nginx Controller and Network Load Balancer)
--------------------------------------------------------------------------------------
I want the SSL traffic to be encrypted end-to-end
I want to re-use one server cert (app.traderres.com) and route to different apps using the URL

The plan is to route based on the url path
          https://app.traderres.com/app1 --->  web app #1
          https://app.traderres.com/app2 --->  web app #2
          https://app.traderres.com/app3 --->  web app #3


        User's    ----------->    AWS Network   ----------->  nginx controller               ----------->    kubernetes        ----------->    pods
        Browser      https       Load Balancer                a) decrypts traffic               https         service            https        (decrypt traffic)
                                                              b) re-encrypts traffic
                                                              c) uses ingress to route
                                                                 traffic to correct service


References
----------
https://kubernetes.github.io/ingress-nginx/deploy/
https://aws.amazon.com/blogs/containers/exposing-kubernetes-applications-part-3-nginx-ingress-controller/
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/



ASSUMPTIONS:
 A) Your kubernetes deployments are up and running
 B) Your kubernetes deployments have a selector app=nccs-backend
 C) Your deployments have the pods listening on port 443
    [see the example nccs-deployment.yaml]


#
# nccs-deployment.yaml
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nccs-deployment

spec:
  selector:
    matchLabels:
      app: nccs-backend

  replicas: 1
  strategy:
    type:  Recreate
  template:
    metadata:
      name: nccs-backend
      labels:
         app: nccs-backend

    spec:
      hostAliases:
      - ip: "18.216.9.38"
        hostnames:
          - "keycloak.traderres.com"

      volumes:
      - name: app-certs-pv
        persistentVolumeClaim:
          claimName: app-certs-pvc

      containers:
      - image: 524647912468.dkr.ecr.us-east-2.amazonaws.com/nccs:backend-2.3.5-SNAPSHOT
        imagePullPolicy: Always
        volumeMounts:
        - name: app-certs-pv
          mountPath: /shared/certs

        name: nccs-backend

        env:
           - name: POSTGRES_HOSTNAME
             value: "nccs-db.csbk2jnrc8ao.us-east-2.rds.amazonaws.com"
           - name: POSTGRES_DB_USERNAME
             value: "nccs_user"
           - name: POSTGRES_DB_PASSWORD
             value: "secret12"
           - name: POSTGRES_DB_NAME
             value: "nccs_db"
           - name: POSTGRES_SCHEMA_NAME
             value: "nccs_db"
           - name: POSTGRES_POOL_SIZE
             value: "5"
           - name: ES_URL
             value: "https://vpc-app-opensearch-ep5v5i6jlal7ka3qraya46fpsi.us-east-2.es.amazonaws.com:443"
           - name: ES_USERNAME
             value: "es_user"
           - name: ES_PASSWORD
             value: "Secret1@"
           - name: KEYCLOAK_CLIENT_ID
             value: "nccs-webapp"
           - name: KEYCLOAK_CLIENT_SECRET
             value: "0kps0Tn29TWhQhoEy7SwhvWEYNfYb7cU"
           - name: KEYCLOAK_ISSUER_URI
             value: "https://keycloak.traderres.com:8444/realms/MyRealm"
           - name: INCOMING_KEYSTORE_FILEPATH
             value: "/shared/certs/webapp.keystore.jks"
           - name: INCOMING_KEYSTORE_PASSWORD
             value: "changeit"
           - name: INCOMING_TRUSTSTORE_FILEPATH
             value: "/shared/certs/webapp.truststore.jks"
           - name: INCOMING_TRUSTSTORE_PASSWORD
             value: "changeit"
           - name: JAVA_TOOL_OPTIONS
             value: -Xms1024m -Xmx1024m -Demail.mode=off -Dserver.port=443 -Djavax.net.ssl.trustStore=/shared/certs/custom.cacerts -Djavax.net.ssl.trustStorePassword=changeit





Procedure for setting nginx controller as a load balancer in AWS
----------------------------------------------------------------
 1. Download & Install nginx controller on AWS on your kubernetes cluster
    a. Download the nginx controller for AWS
       unix> wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/aws/deploy.yaml -O aws.deploy.yaml

    b. Install the nginx controller for AWS
       unix> kubectl apply -f aws.deploy.yaml



 2. Create a server certificate called app.traderres.com and download the parts (we need the parts to create the 2 kubernetes secrets)
    a. ssh to the keycloak server (that's where our Let's Encrypt cert-bot is)
        unix> ssh -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38

    b. On the keycloak server
       unix> sudo -s
       unix> cd /opt/shared-storage/certbot/archive

        If you don't see an app.traderres.com, then you must create one
        unix> certbot certonly --manual --preferred-challenges dns --manual-auth-hook /opt/shared-storage/certbot/authenticate.sh --config-dir /opt/shared-storage/certbot/ -d app.traderres.com

       You should see this:
			Successfully received certificate.
			Certificate is saved at: /opt/shared-storage/certbot/live/app.traderres.com/fullchain.pem
			Key is saved at:         /opt/shared-storage/certbot/live/app.traderres.com/privkey.pem
			This certificate expires on 2023-06-19.
    		These files will be updated when the certificate renews.
    		Certbot has set up a scheduled task to automatically renew this certificate in the background.

        Now, /opt/shared-storage/certbot/live/app.traderres.com/ has these files:
                  cert.pem
                  fullchain.pem
                  privkey.pem

     c. Copy these 4 files to the /tmp directory and make them readable
        unix> cd /opt/shared-storage/certbot/live/app.traderres.com
        unix> cp cert.pem fullchain.pem privkey.pem /tmp
        unix> cd /tmp
        unix> chmod ugo+r cert.pem fullchain.pem privkey.pem

     d. Copy the certificate root authority pem file to /tmp
        unix> cp /opt/shared-storage/root-ca/public/root.pem /tmp/888.root.pem
        unix> chmod ugo+r /tmp/888.root.pem

     d. Download these 4 files to your box (where you are running kubectl)
        unix> mkdir -p /tmp/certs
        unix> cd /tmp/certs
        unix> scp -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38:/tmp/888.root.pem .
        unix> scp -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38:/tmp/cert.pem .           # This is the server cert
        unix> scp -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38:/tmp/fullchain.pem .
        unix> scp -i ~/.ssh/node-for-kubunetes-instance.pem ec2-user@18.216.9.38:/tmp/privkey.pem .

     e. Combine fullchain.pem and server cert into one file
        unix> cat fullchain.pem cert.pem > 888.fullchain_and_server_cert.pem

     f. Copy cert.pem to 888.app.traderres.com.server.crt
        unix> cp cert.pem 888.app.traderres.com.server.crt

     g. Copy privkey.pem to 888.app.traderres.com.key.pem
        unix> cp privkey.pem 888.app.traderres.com.key.pem

 		Now, I have these files:
 		  888.fullchain_and_server_cert.pem    Holds the full chain and the server cert
 		  888.app.traderres.com.server.crt     Holds the app.traderres.com server cert
          888.app.traderres.com.key.pem        Holds the app.traderres.com private key
          888.root.pem                         Holds the root public cert (of our created certificate authority)


 3. Create the 2 secrets
    a. Create secret #1 "default/ca-secret"   [this holds the root certificate authority's public cert]
       unix> kubectl create secret generic ca-secret --from-file=ca.crt=888.root.pem

    b. Create secret #2:  "default/ca-tls"
       NOTE:  tls.key  holds the filename of private key for app.traderres.com server cert
              tls.crt  holds the filename of app.traderres.com server cert
              ca.crt   holds filename of the certificate authority full chain and server cert

       unix> kubectl create secret generic ca-tls --namespace default --from-file=ca.crt=888.fullchain_and_server_cert.pem --from-file=tls.key=888.app.traderres.com.key.pem  --from-file=tls.crt=888.app.traderres.com.server.crt



 4. Verify that the secrets are setup correctly
    a. Verify that the 2 secrets exist
       unix> kubectl get secret

         NAME             TYPE                DATA   AGE
         ca-secret        Opaque              1      1h
         ca-tls           Opaque              3      1h


    b. Verify that the ca-secret's data section has ca.crt=..... and it contains the root CA's public cert pem
       unix> kubectl edit secret ca-secret

       You should see this:
		   # Please edit the object below. Lines beginning with a '#' will be ignored,
		   # and an empty file will abort the edit. If an error occurs while saving this file will be
		   # reopened with the relevant failures.
		   #
		   apiVersion: v1
		   data:
			 ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdyVENDQkpXZ0F3SUJBZ0lKQVA4bjRlcWtvQlVuTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdWTVFzd0NRWUQKVlFRR0V3SlZVekVSTUE4R0ExVUVDQXdJVm1seVoybHVhV0V4RXpBUkJnTlZCQWNNQ2sxbGNuSnBabWxsYkdReApIVEFiQmdOVkJBb01GRVY0WVcxd2JHVWdPRGc0SUVsdVl5QlNiMjkwTVNBd0hnWURWUVFEREJkRmVHRnRjR3hsCklEZzRPQ0JKYm1NZ1VtOXZkQ0JEUVRFZE1Cc0dDU3FHU0liM0RRRUpBUllPWVdSaGJVQjZlblJ2Y0M1amIyMHcKSGhjTk1qTXdOakkwTVRjd05EUTVXaGNOTXpNd05UQXlNVGN3TkRRNVdqQ0JsVEVMTUFrR0ExVUVCaE1DVlZNeApFVEFQQmdOVkJBZ01DRlpwY21kcGJtbGhNUk13RVFZRFZRUUhEQXBOWlhKeWFXWnBaV3hrTVIwd0d3WURWUVFLCkRCUkZlR0Z0Y0d4bElEZzRPQ0JKYm1NZ1VtOXZkREVnTUI0R0ExVUVBd3dYUlhoaGJYQnNaU0E0T0RnZ1NXNWoKSUZKdmIzUWdRMEV4SFRBYkJna3Foa2lHOXcwQkNRRVdEbUZrWVcxQWVucDBiM0F1WTI5dE1JSUNJakFOQmdrcQpoa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXBrbUVGNU9Kb3BjTnRkU2NmY1ZCSFlrL2RwQjJPWm5hCnJJQ0dpdkNyNmNseUxtQmJUMnNSTEgrTkhndnhkakI5VWtDSXRhUkEzaE1aSmVTeGN2cG1GaHczRno4UzV3WlMKMWRqR0JnMDlCbDc3QU11ckNMS3FtS0MzNndEMXYzOUI3N1lmMEJLd3dJUldjL0RLREwzN3JsUFc2RTdOMElTVwpCNkZnNTlxMlBRdWlnaVlNOTgyMkliclFkZG54MUgzdkhNenEzVkxRTmw1ZitSdm9EZWcwVmtZWW14c0svRlplCmlxZ0hBU293WXlVYzNWOUlZN1ZybVJMZGNvNFFlekxGQkp6R0xDN2lLWHBKaHpqVmRiQnBvQWtjL1FUSk1vVlQKL2lSdlI5SzNXanhLeEI0R2JLYWJYaDlYUWlMcVpxT1p1V1BaWWo1Z1Ywckg2bWJtd0NOSW1mUTNYMTc3TmRuUApZN1BRT25iM1QwOUI5NzNydDRpb09oNEpvaDdMNENhWVViZzhLR1Q3WHFWTFhUcnJENUhYYktTNU1TT1RlVXhoClhocm1PamlYVFhVaGh3b3NLWno3bkxOYUNKUS9qckVlZnQzd2VTWDhyeTY4VG9sUkVkYUJRWUZ0RVJvMm1qRWcKTjV4NStESzR6aHdTcks5U0djcEVQS0ZVRzd4ZWYxNHU3QVAzeHB0c3U3eVEzejR6eTVUVjFPc0ptZ1ZWWHBXdAo5UHhndHRZQkQ0Z2JrSDY1VlhBdythK0RhN1lsMUl2bVVuY2x2dlAvYmNxS0VqcHY1Y0ZQQWFzdDgyNkg2b2pUCk9ablB4V09yakZ4Y2ZwVHlGb01VUVpWSUZWRTZ3UzFPbVpLYlNPSHhYNHc2MXBWWGdOZ0FSeW0wQjNzUTdVdHYKWkxIaVlsOVdoV0VDQXdFQUFhT0IvVENCK2pBZEJnTlZIUTRFRmdRVU41UXZpb0VtVHdaamxuSVdyMzUwYTlqTQppQmt3Z2NvR0ExVWRJd1NCd2pDQnY0QVVONVF2aW9FbVR3WmpsbklXcjM1MGE5ak1pQm1oZ1p1a2daZ3dnWlV4CkN6QUpCZ05WQkFZVEFsVlRNUkV3RHdZRFZRUUlEQWhXYVhKbmFXNXBZVEVUTUJFR0ExVUVCd3dLVFdWeWNtbG0KYVdWc1pERWRNQnNHQTFVRUNnd1VSWGhoYlhCc1pTQTRPRGdnU1c1aklGSnZiM1F4SURBZUJnTlZCQU1NRjBWNApZVzF3YkdVZ09EZzRJRWx1WXlCU2IyOTBJRU5CTVIwd0d3WUpLb1pJaHZjTkFRa0JGZzVoWkdGdFFIcDZkRzl3CkxtTnZiWUlKQVA4bjRlcWtvQlVuTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUIKQUhmWForOStzS1dHbVNiS0p1UFdXQTRtS042Q2JyaVFNUUh4SGxOYU84V3NhSURHZFJ1TkZpQUlYY3RnUTZFNApDak91UkxWNkZPeUZ5NitDN3ZvUnlJdzhUQjdDQW8vTkRDVTZJeG9kQ29vak9HWnpDR3FUM3llT0E0bFFuZ1hSCnhCWFdCeVZUdG5TWkU2K1dreTJYdUoxNDNoVWFzSUQ4NFJDYXlrRkkvQk5DMGhNdmZQc3hxV0l2MWZLTlNMWmoKLzhoZjczSWdxVFg2WnFzZHJVNEQzS2IwdkxCeWFXMmZOUlJvUHMzcGN4YU1QMTFLTTdNY3ZwbFRSR0JZbjJ1bgpRazZEMXZXOXVUMkd3NHo3VDk3dkdQTG9hRXV3NVNycE1naitIeXBoSk5HKzZlVys2cng0djJGR1RKY1VWRkJsCnc3eHlQdTFHNHI2a1YrYzFWOGpCdHVoTjMyTDRPaE11dDhHd0xhMVBqOENyVnpuT3hMR0doakkzSWNPSS9wRkwKMC9VTElhMklLaHB1blp2bzVxT3BYOWsvb1pyV2NLUUN2U3JjWFMwbDk5dUtSQ1hqRmMxWm5vbXNzLzFDdlNSYwpIMS9CdzlPWFlHdGhrUzd6SDJwdldTMVZNeXQwSnY3ejNDVmxIcnBlQmJpcWhxc1pja3gxU0d2RmFPQTU4eDUvClFHUy9uNzNYU0RkcGU2Q1pNdnppWTBZUStsNmZ4ZXNwYzFZQkZJdVA4Y0xtNmxBMDRRSG5KWE1MMFE4a0ZkK1oKelM2b20vczE0SWpHK1dsbVlCUjFaTENvZHZnSll3QVVYbUFWRVJTUnVTazJEZUVqSnp6YkdkWk9NSUZZb2RYcAptSWZxd1JJWU5KZXp0SWsrTm9Mem0veE9WS25VT0xCZTZFSXZEZ3lFTUYzRwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
		   kind: Secret
		   metadata:
			 creationTimestamp: "2023-06-29T04:20:18Z"
			 name: ca-secret
			 namespace: default
			 resourceVersion: "2043958"
			 uid: 25fa8f83-eeee-45da-9cc2-06093d9a0016
		   type: Opaque


	c. Verify that the ca-tls holds the 3 parts of the cert
	   unix> kubectl edit secret ca-tls

       You should see this:
			# Please edit the object below. Lines beginning with a '#' will be ignored,
			# and an empty file will abort the edit. If an error occurs while saving this file will be
			# reopened with the relevant failures.
			#
			apiVersion: v1
			data:
			  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZ1ekNDQTZPZ0F3SUJBZ0lCQXpBTkJna3Foa2lHOXcwQkFRc0ZBRENCbFRFTE1Ba0dBMVVFQmhNQ1ZWTXgKRVRBUEJnTlZCQWdNQ0ZacGNtZHBibWxoTVJNd0VRWURWUVFIREFwTlpYSnlhV1pwWld4a01SMHdHd1lEVlFRSwpEQlJGZUdGdGNHeGxJRGc0T0NCSmJtTWdVbTl2ZERFZ01CNEdBMVVFQXd3WFJYaGhiWEJzWlNBNE9EZ2dTVzVqCklGSnZiM1FnUTBFeEhUQWJCZ2txaGtpRzl3MEJDUUVXRG1Ga1lXMUFlbnAwYjNBdVkyOXRNQjRYRFRJek1EWXkKT0RFNE5USXhNRm9YRFRNek1EWXlOVEU0TlRJeE1Gb3dVVEVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFzVApDSGRvWVhSbGRtVnlNUk13RVFZRFZRUUxFd3BEYjIxd2IyNWxiblJ6TVJvd0dBWURWUVFERXhGaGNIQXVkSEpoClpHVnljbVZ6TG1OdmJUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU0zazdEMzcKZVhXaWU3Z2tvdU1HMUpwRVJuVWtTOFhENHhiMUpNWGhnemtNRTNsaFk4U3c4ZjNoNUtFOGZGSS9ZUWo0cGtuMgpUc01VUFN5U2pIQWN1bGtwVGNOMTRTa1NoRDh4Y2FHOWVIdmxXMDJDQnF5U3B1V3drTzNpNW1XMHlhNmQ0TnRJCjArU2I4aG9FeXpnY0hISW9UQ0E0T09iNlBTbGRPdkl5MjR3NXVTN3hYeFpRMHJ0a3pXTzRDcFM4SUNyWVJKWUgKZDczeC91RmFucHhtL0sva2xydUNMeGdwUjh4TEsxYW0valViaTlCb2lUOU1OTHM4NXRSbjFsS2dEWkltTldsZgp1RjlUMzNGWGlHdFFOYitZREJ0eHFHVmpKQnZaK2VyVlN0Wm1rQk8vTENWMzRQNlZKOTJ0WUk1VXI2U0trWE1KCjVvUVM0c1lHZUpLTzhHc0VtbU83OVJQOWtJaU41VEN0cVQ5RUlITFVJRnN0UDFUVHhjTXllUndmbU9qRGpmd3IKb1NBS1VIVXBCcE4yVlFLc29MSjlFNFV2SUFaaUJBMGF1VzU0cnY4SlZqK2wwT3hVU1NtOTYzR1VzQXVSRHpFbgp0NS9Fd3pNblBJMk9QMXlmcmU4bk9LT3p4aVdYdEkwdWV1czBBdmY5RFo2dHowdjhUT2RJbmFIQlFWODVYaFA5Cmd6QXRWdkM2QlRSMlBGc2VNUEZCd3NJR2VhdEVCU3hNVGE0OW9GRG9FdXlOaW1LWXp6QzBXQzhlTFFYck13Zk8KcXlzQXRZZHFoVnh1WXlsNkt3WjdCTlVYb29WUFR6MCsrRlJJYWlsSldTRmJKUWFyVW9tcXpuZXRVcXltbTU5agplMzZVOHU5VWlPZXVIZmc2REJkQnVadVc4dXVzUmpQUjBObmRBZ01CQUFHaldUQlhNQjhHQTFVZEl3UVlNQmFBCkZEZVVMNHFCSms4R1k1WnlGcTkrZEd2WXpJZ1pNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFBCQVFEQWdUd01Cd0cKQTFVZEVRUVZNQk9DRVdGd2NDNTBjbUZrWlhKeVpYTXVZMjl0TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBcQpmNkRoRVRWSFdTbm5xSHI5R291ZG5VRk9QVWdmMjNsSzRTR1ZUcFE0dDhBVGxHa24waU9iR2FVU0VGNEdOUkRxCkFYRDR5NkhYaUJYNHlLcEswc2ZWejk0OW04cC9XaFFRQVUrK1ZBN3R4ZlB6NHlGS3Z4ZWN0TWJFcG52WnFjSVYKKzhManFvWkhpcnlYTGZGMFd2WmdXSWNmUDJxc2tFYU1CNFZMYVpWZms1VnlkZHhjV2hRODhtR2hSQTQ1MXRVbwpCNXpWSWtPbVJYT1NSWllQMStuMG5HYTRkMlVhVnpoUjlidzRIR3NudkhIbDNSK0xaWU5hMEc5V1M1djRSQzMzCmZrcFVWN3o3OC9MYzhtT0lJVWxBbEt6cTlDV2NsV2ZHUjRlOENMbitRczN6a3U0VGE1SFN4YVZ6SVpIWGRBYzEKa0VXekZSbEtBdzN2cUpBdVJOYS8yUXA1TlRvcVZlSTVqUHAyTGt5UUZCN0R4cFRydmlUMXZXeHJQUUVOQ1J6KwpEMlJZN3NKNkp3bFFvNWdYY3QrbG5tK1dTL25FaGNIYzNIbUw1cGxBa0Vsdks3aENnczNBRFI2S2tIQjNjMVgyCjc4aHVZWHRoUjlheklMeG95V3NnOUpkWXgzM3c1WGRMaXQ3bSt0MC9VTGNpVUp5TldXbkUxWStDc2JyS2ZaQkQKNHhveGVPSW9ySGVEWmIzbCtLNjNFYUZnczhhQURkOUw4bXEyRzN2RFluNGVWbm00V1kzWERJMTVNaHg0a0ZiSApFd3dnRU0rUzh0VjNEN1dhemlRb0JkQllPOEpGNDZQV3dtMVVxdXdwbXpPNU9HVzBiVTYzd1NFQzhFNzBIMW5nCkZJSStEYkx6ODJUeUQ1c0t1YVh3QUU1M2RoUjdkU1dZU1JYZnpmTG4wdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVJakNDQXdxZ0F3SUJBZ0lTQXlCSjcvRkRJVDJJZ3BrLzJKc21QN05KTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNekEyTWpReE5qTTJNamRhRncweU16QTVNakl4TmpNMk1qWmFNQnd4R2pBWUJnTlZCQU1UCkVXRndjQzUwY21Ga1pYSnlaWE11WTI5dE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXhoaXkKTDZzL0d3ajBTTmR4V0YwMVY0Wng2ekVhUUJTcE85OEdHd09PVHcvQzRGREFkUlpZSWRsSXJuS3dPTytUZ2N6TAo5dnRwVEJJZ0d1RFJIb2JORjZPQ0FoRXdnZ0lOTUE0R0ExVWREd0VCL3dRRUF3SUhnREFkQmdOVkhTVUVGakFVCkJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVU1ZY20KSzJ2U08vZEk3MjZsbVV1aG9BTHZLYTR3SHdZRFZSMGpCQmd3Rm9BVUZDNnpGN2RZVnN1dVVBbEE1aCt2bllzVQp3c1l3VlFZSUt3WUJCUVVIQVFFRVNUQkhNQ0VHQ0NzR0FRVUZCekFCaGhWb2RIUndPaTh2Y2pNdWJ5NXNaVzVqCmNpNXZjbWN3SWdZSUt3WUJCUVVITUFLR0ZtaDBkSEE2THk5eU15NXBMbXhsYm1OeUxtOXlaeTh3SEFZRFZSMFIKQkJVd0U0SVJZWEJ3TG5SeVlXUmxjbkpsY3k1amIyMHdFd1lEVlIwZ0JBd3dDakFJQmdabmdRd0JBZ0V3Z2dFQwpCZ29yQmdFRUFkWjVBZ1FDQklIekJJSHdBTzRBZFFDM1B2c2szNXhOdW5YeU9jVzZXUFJzWGZ4Q3ozcWZOY1NlCkhRbUJKZTIwbVFBQUFZanVlb2tEQUFBRUF3QkdNRVFDSUJueE91NUM0dmIwZlRhSVQrVUVqdnJISWlQeWxTWE8KdHh5U2pmcmhDNTRWQWlBOHRIQml0YWlmSDhoY0F6VGE0aG84eWh5dkVLRlhjQXd4R0N2OFFxaEs2Z0IxQUhveQpqRlRZdHkyMklPbzQ0RkllNllRV2NESVRoVTA3MGl2Qk9sZWpVdXRTQUFBQmlPNTZpUmtBQUFRREFFWXdSQUlnCkxmSEFXeXFWU3FEYzBCcWdVY0tGNWUvUHpVV2tOSG50T0FkZGZESGpGQU1DSUFPUDdwQjlxSzlSbkhTdXpRM0MKRlBEVHppbE5kT0F5SkZQNEpkVXVxUHRKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCbjltbmcwZldvK0VIWQpTRW00dmc4ajlsRzBLMWZTYllIUTEya2lpMzRSRDloSjZFVEU3UEdmaUZkTkZlc3M1NXEvUWVDaWFiY29qanpOCnBjejFYeDhqb1JGd1phZExuNFd5eGE4RGltUjZBOHZza0Z5dVVHdGx2SHBJbkpIdkVhS1JIYkZoY21XNjVrRFoKcVY3VVJ6Ri9Kb2Jia2lrT1gxam5VMkEyQ0tqaXVXTlAxQnZUTjFBeVQzdjg4eHRGOFVodVd2V0ZDLzhqeW91bAp3bllPTlpvblExaWhzZmJVbHJYSG5nUU5sQUtZbm16dU9uSi9scEFmZ0F2THQ0RHRQU05LMm91ZDZxei9ORnNFCmJWYkE0cHUwT1pWYk5JZHhoRG9wcjFzMldnbU5IRlJTbTltcTBsbzJtLzNSanhlVk9VQUcyK0sra1lWcGJxa3MKVmducG80eVAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRkZqQ0NBdjZnQXdJQkFnSVJBSkVyQ0VyUERCaW5VL2JXTGlXblgxb3dEUVlKS29aSWh2Y05BUUVMQlFBdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3SGhjTk1qQXdPVEEwTURBd01EQXcKV2hjTk1qVXdPVEUxTVRZd01EQXdXakF5TVFzd0NRWURWUVFHRXdKVlV6RVdNQlFHQTFVRUNoTU5UR1YwSjNNZwpSVzVqY25sd2RERUxNQWtHQTFVRUF4TUNVak13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM3QWhVb3pQYWdsTk1QRXV5TlZaTEQrSUx4bWFaNlFvaW5YU2FxdFN1NXhVeXhyNDVyK1hYSW85Y1AKUjVRVVZUVlhqSjZvb2prWjlZSThRcWxPYnZVN3d5N2JqY0N3WFBOWk9PZnR6Mm53V2dzYnZzQ1VKQ1dIK2pkeApzeFBuSEt6aG0rL2I1RHRGVWtXV3FjRlR6alRJVXU2MXJ1MlAzbUJ3NHFWVXE3WnREcGVsUURScks5TzhadXRtCk5IejZhNHVQVnltWitEQVhYYnB5Yi91QnhhM1NobGc5RjhmbkNidnhLL2VHM01IYWNWM1VSdVBNclNYQmlMeGcKWjNWbXMvRVk5NkpjNWxQL09vaTJSNlgvRXhqcW1BbDNQNTFUK2M4QjVmV21jQmNVcjJPay81bXprNTNjVTZjRwova2lGSGFGcHJpVjF1eFBNVWdQMTdWR2hpOXNWQWdNQkFBR2pnZ0VJTUlJQkJEQU9CZ05WSFE4QkFmOEVCQU1DCkFZWXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHQ0NzR0FRVUZCd01CTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZnI1MkxGTUxHTUI4R0ExVWRJd1FZTUJhQQpGSG0wV2VaN3R1WGtBWE9BQ0lqSUdsajI2WnR1TURJR0NDc0dBUVVGQndFQkJDWXdKREFpQmdnckJnRUZCUWN3CkFvWVdhSFIwY0RvdkwzZ3hMbWt1YkdWdVkzSXViM0puTHpBbkJnTlZIUjhFSURBZU1CeWdHcUFZaGhab2RIUncKT2k4dmVERXVZeTVzWlc1amNpNXZjbWN2TUNJR0ExVWRJQVFiTUJrd0NBWUdaNEVNQVFJQk1BMEdDeXNHQVFRQgpndDhUQVFFQk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQ0Z5azVIUHFQM2hVU0Z2TlZuZUxLWVk2MTFUUjZXClBUTmxjbFF0Z2FEcXcrMzRJTDlmekxkd0FMZHVPL1plbE43a0lKK203NHV5QStlaXRSWThrYzYwN1RrQzUzd2wKaWtmbVpXNC9SdlRaOE02VUsrNVV6aEs4akNkTHVNR1lMNkt2elhHUlNnaTN5TGdqZXdRdENQa0lWejZEMlFRegpDa2NoZUFtQ0o4TXF5SnU1emx6eVpNakF2bm5BVDQ1dFJBeGVrcnN1OTRzUTRlZ2RSQ25iV1NEdFk3a2grQkltCmxKTlhvQjFsQk1FS0lxNFFEVU9Yb1JnZmZ1RGdoamUxV3JHOU1MK0hiaXNxL3lGT0d3WEQ5UmlYOEY2c3c2VzQKYXZBdXZEc3p1ZTVMM3N6ODVLK0VDNFkvd0ZWRE52Wm80VFlYYW82WjBmK2xRS2MwdDhEUVl6azFPWFZ1OHJwMgp5Sk1DNmFsTGJCZk9EQUxadllIN243ZG8xQVpsczRJOWQxUDRqbmtEclFveEIzVXFROWhWbDNMRUtRNzN4RjFPCnlLNUdoRERYOG9WZkdLRjV1K2RlY0lzSDRZYVR3N21QM0dGeEpTcXYzKzBsVUZKb2k1TGM1ZGExNDlwOTBJZHMKaENFeHJvTDErN21yeUlrWFBlRk01VGdPOXIwcnZaYUJGT3ZWMnowZ3AzNVowK0w0V1BsYnVFak4vbHhQRmluKwpIbFVqcjhnUnNJM3FmSk9RRnkvOXJLSUpSMFkvOE9td3QvOG9UV2d5MW1kZUhtbWprN2oxbllzdkM5SlNRNlp2Ck1sZGxUVEtCM3poVGhWMStYV1lwNnJqZDVKVzF6YlZXRWtMTnhFN0dKVGhFVUczc3pnQlZHUDdwU1dUVVRzcVgKbkxSYndIT29xN2hId2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGWURDQ0JFaWdBd0lCQWdJUVFBRjNJVGZVNlVLNDduYXFQR1FLdHpBTkJna3Foa2lHOXcwQkFRc0ZBREEvCk1TUXdJZ1lEVlFRS0V4dEVhV2RwZEdGc0lGTnBaMjVoZEhWeVpTQlVjblZ6ZENCRGJ5NHhGekFWQmdOVkJBTVQKRGtSVFZDQlNiMjkwSUVOQklGZ3pNQjRYRFRJeE1ERXlNREU1TVRRd00xb1hEVEkwTURrek1ERTRNVFF3TTFvdwpUekVMTUFrR0ExVUVCaE1DVlZNeEtUQW5CZ05WQkFvVElFbHVkR1Z5Ym1WMElGTmxZM1Z5YVhSNUlGSmxjMlZoCmNtTm9JRWR5YjNWd01SVXdFd1lEVlFRREV3eEpVMUpISUZKdmIzUWdXREV3Z2dJaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUN0NkNSejlCUTM4NXVlSzFjb0hJZSszTGZmT0pDTWJqem1WNkI0OTNYQwpvdjcxYW03MkFFOG8yOTVvaG14RWs3YXhZLzBVRW11L0g5THFNWnNoZnRFelBMcEk5ZDE1MzdPNC94THhJWnBMCndZcUdjV2xLWm1ac2ozNDhjTCt0S1NJRzgrVEE1b0N1NGt1UHQ1bCtsQU9mMDBlWGZKbElJMVBvT0s1UENtK0QKTHRGSlY0eUFkTGJhTDlBNGpYc0RjQ0ViZGZJd1BQcVBydDNhWTZ2ckZrL0NqaEZMZnM4TDZQKzFkeTcwc250Swo0RXdTSlF4d2pRTXBvT0ZUSk93VDJlNFp2eEN6U293L2lhTmhVZDZzaHdlVTlHTng3QzdpYjF1WWdlR0pYRFI1CmJIYnZPNUJpZWViYnBKb3ZKc1hRRU9FTzN0a1FqaGI3dC9lbzk4ZmxBZ2VZanpZSWxlZmlONVlOTm5XZSt3NXkKc1IyYnZBUDVTUVhZZ2QwRnRDcldRZW1zQVhhVkNnL1kzOVc5RWg4MUx5Z1hiTktZd2FnSlpIZHVSemU2enF4WgpYbWlkZjNMV2ljVUdRU2srV1Q3ZEp2VWt5UkduV3FOTVFCOUdvWm0xcHpwUmJvWTdubjF5cHhJRmVGbnRQbEY0CkZRc0RqNDNRTHdXeVBudEtIRXR6QlJMOHh1cmdVQk44UTVOMHM4cDA1NDRmQVFqUU1OUmJjVGEwQjdyQk1EQmMKU0xlQ081aW1mV0NLb3FNcGdzeTZ2WU1FRzZLREEwR2gxZ1h4RzhLMjhLaDhoanRHcUVncWlOeDJtbmEvSDJxbApQUm1QNnpqelpON0lLdzBLS1AvMzIrSVZRdFFpMENkZDRYbitHT2R3aUsxTzV0bUxPc2JkSjFGdS83eGs5VE5EClR3SURBUUFCbzRJQlJqQ0NBVUl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FRWXcKU3dZSUt3WUJCUVVIQVFFRVB6QTlNRHNHQ0NzR0FRVUZCekFDaGk5b2RIUndPaTh2WVhCd2N5NXBaR1Z1ZEhKMQpjM1F1WTI5dEwzSnZiM1J6TDJSemRISnZiM1JqWVhnekxuQTNZekFmQmdOVkhTTUVHREFXZ0JURXA3R2tleXh4Cit0dmhTNUIxLzhRVllJV0pFREJVQmdOVkhTQUVUVEJMTUFnR0JtZUJEQUVDQVRBL0Jnc3JCZ0VFQVlMZkV3RUIKQVRBd01DNEdDQ3NHQVFVRkJ3SUJGaUpvZEhSd09pOHZZM0J6TG5KdmIzUXRlREV1YkdWMGMyVnVZM0o1Y0hRdQpiM0puTUR3R0ExVWRId1ExTURNd01hQXZvQzJHSzJoMGRIQTZMeTlqY213dWFXUmxiblJ5ZFhOMExtTnZiUzlFClUxUlNUMDlVUTBGWU0wTlNUQzVqY213d0hRWURWUjBPQkJZRUZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHUKTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBS2N3QnNsbTcvRGxMUXJ0Mk01MW9HclMrbzQ0Ky95UW9ERlZEQwo1V3hDdTIrYjlMUlB3a1NJQ0hYTTZ3ZWJGR0p1ZU43c0o3bzVYUFdpb1c1V2xIQVFVN0c3NUsvUW9zTXJBZFNXCjlNVWdOVFA1MkdFMjRIR050TGkxcW9KRmxjRHlxU01vNTlhaHkyY0kycUJETEtvYmt4L0ozdldyYVYwVDlWdUcKV0NMS1RWWGtjR2R0d2xmRlJqbEJ6NHBZZzFodG1mNVg2RFlPOEE0anF2MklsOURqWEE2VVNiVzFGelhTTHI5TwpoZThZNElXUzZ3WTdiQ2tqQ1dEY1JRSk1FaGc3NmZzTzN0eEUrRmlZcnVxOVJVV2hpRjFteXY0UTZXK0N5QkZDCkRmdnA3T09HQU42ZEVPTTQrcVI5c2Rqb1NZS0VCcHNyNkd0UEFRdzRkeTc1M2VjNQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
			  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZ1ekNDQTZPZ0F3SUJBZ0lCQXpBTkJna3Foa2lHOXcwQkFRc0ZBRENCbFRFTE1Ba0dBMVVFQmhNQ1ZWTXgKRVRBUEJnTlZCQWdNQ0ZacGNtZHBibWxoTVJNd0VRWURWUVFIREFwTlpYSnlhV1pwWld4a01SMHdHd1lEVlFRSwpEQlJGZUdGdGNHeGxJRGc0T0NCSmJtTWdVbTl2ZERFZ01CNEdBMVVFQXd3WFJYaGhiWEJzWlNBNE9EZ2dTVzVqCklGSnZiM1FnUTBFeEhUQWJCZ2txaGtpRzl3MEJDUUVXRG1Ga1lXMUFlbnAwYjNBdVkyOXRNQjRYRFRJek1EWXkKT0RFNE5USXhNRm9YRFRNek1EWXlOVEU0TlRJeE1Gb3dVVEVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFzVApDSGRvWVhSbGRtVnlNUk13RVFZRFZRUUxFd3BEYjIxd2IyNWxiblJ6TVJvd0dBWURWUVFERXhGaGNIQXVkSEpoClpHVnljbVZ6TG1OdmJUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQU0zazdEMzcKZVhXaWU3Z2tvdU1HMUpwRVJuVWtTOFhENHhiMUpNWGhnemtNRTNsaFk4U3c4ZjNoNUtFOGZGSS9ZUWo0cGtuMgpUc01VUFN5U2pIQWN1bGtwVGNOMTRTa1NoRDh4Y2FHOWVIdmxXMDJDQnF5U3B1V3drTzNpNW1XMHlhNmQ0TnRJCjArU2I4aG9FeXpnY0hISW9UQ0E0T09iNlBTbGRPdkl5MjR3NXVTN3hYeFpRMHJ0a3pXTzRDcFM4SUNyWVJKWUgKZDczeC91RmFucHhtL0sva2xydUNMeGdwUjh4TEsxYW0valViaTlCb2lUOU1OTHM4NXRSbjFsS2dEWkltTldsZgp1RjlUMzNGWGlHdFFOYitZREJ0eHFHVmpKQnZaK2VyVlN0Wm1rQk8vTENWMzRQNlZKOTJ0WUk1VXI2U0trWE1KCjVvUVM0c1lHZUpLTzhHc0VtbU83OVJQOWtJaU41VEN0cVQ5RUlITFVJRnN0UDFUVHhjTXllUndmbU9qRGpmd3IKb1NBS1VIVXBCcE4yVlFLc29MSjlFNFV2SUFaaUJBMGF1VzU0cnY4SlZqK2wwT3hVU1NtOTYzR1VzQXVSRHpFbgp0NS9Fd3pNblBJMk9QMXlmcmU4bk9LT3p4aVdYdEkwdWV1czBBdmY5RFo2dHowdjhUT2RJbmFIQlFWODVYaFA5Cmd6QXRWdkM2QlRSMlBGc2VNUEZCd3NJR2VhdEVCU3hNVGE0OW9GRG9FdXlOaW1LWXp6QzBXQzhlTFFYck13Zk8KcXlzQXRZZHFoVnh1WXlsNkt3WjdCTlVYb29WUFR6MCsrRlJJYWlsSldTRmJKUWFyVW9tcXpuZXRVcXltbTU5agplMzZVOHU5VWlPZXVIZmc2REJkQnVadVc4dXVzUmpQUjBObmRBZ01CQUFHaldUQlhNQjhHQTFVZEl3UVlNQmFBCkZEZVVMNHFCSms4R1k1WnlGcTkrZEd2WXpJZ1pNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFBCQVFEQWdUd01Cd0cKQTFVZEVRUVZNQk9DRVdGd2NDNTBjbUZrWlhKeVpYTXVZMjl0TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBcQpmNkRoRVRWSFdTbm5xSHI5R291ZG5VRk9QVWdmMjNsSzRTR1ZUcFE0dDhBVGxHa24waU9iR2FVU0VGNEdOUkRxCkFYRDR5NkhYaUJYNHlLcEswc2ZWejk0OW04cC9XaFFRQVUrK1ZBN3R4ZlB6NHlGS3Z4ZWN0TWJFcG52WnFjSVYKKzhManFvWkhpcnlYTGZGMFd2WmdXSWNmUDJxc2tFYU1CNFZMYVpWZms1VnlkZHhjV2hRODhtR2hSQTQ1MXRVbwpCNXpWSWtPbVJYT1NSWllQMStuMG5HYTRkMlVhVnpoUjlidzRIR3NudkhIbDNSK0xaWU5hMEc5V1M1djRSQzMzCmZrcFVWN3o3OC9MYzhtT0lJVWxBbEt6cTlDV2NsV2ZHUjRlOENMbitRczN6a3U0VGE1SFN4YVZ6SVpIWGRBYzEKa0VXekZSbEtBdzN2cUpBdVJOYS8yUXA1TlRvcVZlSTVqUHAyTGt5UUZCN0R4cFRydmlUMXZXeHJQUUVOQ1J6KwpEMlJZN3NKNkp3bFFvNWdYY3QrbG5tK1dTL25FaGNIYzNIbUw1cGxBa0Vsdks3aENnczNBRFI2S2tIQjNjMVgyCjc4aHVZWHRoUjlheklMeG95V3NnOUpkWXgzM3c1WGRMaXQ3bSt0MC9VTGNpVUp5TldXbkUxWStDc2JyS2ZaQkQKNHhveGVPSW9ySGVEWmIzbCtLNjNFYUZnczhhQURkOUw4bXEyRzN2RFluNGVWbm00V1kzWERJMTVNaHg0a0ZiSApFd3dnRU0rUzh0VjNEN1dhemlRb0JkQllPOEpGNDZQV3dtMVVxdXdwbXpPNU9HVzBiVTYzd1NFQzhFNzBIMW5nCkZJSStEYkx6ODJUeUQ1c0t1YVh3QUU1M2RoUjdkU1dZU1JYZnpmTG4wdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
			  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRE41T3c5KzNsMW9udTQKSktMakJ0U2FSRVoxSkV2RncrTVc5U1RGNFlNNURCTjVZV1BFc1BIOTRlU2hQSHhTUDJFSStLWko5azdERkQwcwprb3h3SExwWktVM0RkZUVwRW9RL01YR2h2WGg3NVZ0TmdnYXNrcWJsc0pEdDR1Wmx0TW11bmVEYlNOUGttL0lhCkJNczRIQnh5S0V3Z09Eam0rajBwWFRyeU10dU1PYmt1OFY4V1VOSzdaTTFqdUFxVXZDQXEyRVNXQjNlOThmN2gKV3A2Y1p2eXY1SmE3Z2k4WUtVZk1TeXRXcHY0MUc0dlFhSWsvVERTN1BPYlVaOVpTb0EyU0pqVnBYN2hmVTk5eApWNGhyVURXL21Bd2JjYWhsWXlRYjJmbnExVXJXWnBBVHZ5d2xkK0QrbFNmZHJXQ09WSytraXBGekNlYUVFdUxHCkJuaVNqdkJyQkpwanUvVVQvWkNJamVVd3Jhay9SQ0J5MUNCYkxUOVUwOFhETW5rY0g1am93NDM4SzZFZ0NsQjEKS1FhVGRsVUNyS0N5ZlJPRkx5QUdZZ1FOR3JsdWVLNy9DVlkvcGREc1ZFa3B2ZXR4bExBTGtROHhKN2VmeE1NegpKenlOamo5Y242M3ZKemlqczhZbGw3U05MbnJyTkFMMy9RMmVyYzlML0V6blNKMmh3VUZmT1Y0VC9ZTXdMVmJ3CnVnVTBkanhiSGpEeFFjTENCbm1yUkFVc1RFMnVQYUJRNkJMc2pZcGltTTh3dEZndkhpMEY2ek1IenFzckFMV0gKYW9WY2JtTXBlaXNHZXdUVkY2S0ZUMDg5UHZoVVNHb3BTVmtoV3lVR3ExS0pxczUzclZLc3BwdWZZM3QrbFBMdgpWSWpucmgzNE9nd1hRYm1ibHZMcnJFWXowZERaM1FJREFRQUJBb0lDQVFDVWdYZThSVFFZR3ZndG00ODVQT1gvCjF4c1N4dms0VGMvdjhTVnk3UE9mSkF5djBnVUtDNjZmdGwwWHh1N016QllMU0gxNGY0WFR3emRVZk9kNnZkM1QKRGEyZk85a0pyT2RpUlNGMnpaaW5sSWpFWVBLN2FwT2l2RFhzdjJuN0Zla2FYNW1kME91MHlwNVhFZm9hSUh5TQpBbkRXRkhkR2NsdkhDQTNLUDlDSFZlTXg3cnJzOTZMbnN3OUp5NmNtSElML0pEcGtGRUxUNkVZMCtRM0tOYVl3Cm9DbndXVGZxcjJ1ditNL3Jra3RzdHMranBLTEoyd2QxdmJtb25yVEJwOXZoL0ZrdUJmS1FINGpjMFl2K0N6NloKVU92NnA0SVVqdXV1Z3d4MXl4NU5nbkNOTGFpRDVmR003cnh3Y2V0Zy9jZ3FZQ0FFMzdFNnRmeUhaSWQyL2s1OQpOdVI3M0VaNWp3ZHBMS3pLVFBKYVgwUWtBdUtIbXNqRm5wL2svbFl5b1B4SXVDV3EvcnBXSlNQcWpLQkpRdXEvClVocDlCTitWZmtSS3lwc2lCRWlrOWRLVHNBSmlRa2FQcWIzMEZTK1daNDlLUVl1dmZ6WkJEQ05SQTE5cS9ZbWgKSk5aQW9KdFQyYjMxeG9HUGJHM0NvZ2xFcnNiWGgyOEFoMmZpTnF0Z0x0Ly94TWd0Q29nTFN1TDhvTWJVUFdYaAo1M2lXVzNzMVM3b1JtYktPRTR4ME9pRFVPZUM1UzNMUm1QRXVBMFNTaWgxWDlzSEdtWG1mV1h1dkxhY0dvT1kxCllET2IxZlNpMHBjOTFzV0p2YkFOREwrL2VWYTBjY2U1em80QVJuWEpTZGdkdUVyb1NJVG1QelZYOWVtM1Z6cVoKYzdHeG82WTRRRHR5V21JdEVhNWZhUUtDQVFFQTdDRnkxUFE2MDFrM1RXMmRpb1YyN3VWcEQ2a1FrWmJnUzE5NwpnVTVMY2JQR0xvQ1cybDR3eDZVenNCSFcydExIbkZRQnEzbFNQbGVyR1QwdkpaRFl4bk9iWXZSUjZvWW42bjk2CnpxN005N29PWkduTEdMc3lqY3hxTzFZNjluMEFFSDduUm4wV2FMWm4vOElFV1A3SWV2dE5OM2pZV0Q5R21DY08KdlM5M0VsREdFTU1iVS90MHBxL1VRUzA2dFBRL3VRNnFibHVFQVJrc2FiU3RML1UweWw2RVBxZUxLVFRuQWE3ZgpONHo0Y202cWNaeitJcis5c0VQTHc4ODlON1l0TlM5T3o3eU1WeHYrY2lySTlhL0ZMQ3hRWkp2dmRkendER1owCndmeUV1ZUdyWXJQdStlVmdnQ0M1VWhtZ1NlWUZyZktaL2hscGl6QWc1VWpsKzduWjd3S0NBUUVBM3pna3Y0VmsKbWFJbGRjVEJCVDNZdVErUW1oYzBGK0daZGRaUHJHMXZEM0xQc3JUaTRqWDI5dUdoaTBSeUVmTXdwbXg1aWUyQQpVaUxwZ2FjamRIMGpnbGFMMU10dmtGK21oeHhJMU9XUGtvVmx5bEdxbFhzV2FPZlV6NFRrYStrTzllNy9tOTNxCjN1T3VYTEZEMFB2RVhGdHBXWlY2SlF1L2p4cFlVZElFU09LdEs3bWdDVEt5T2tTdG1tbS85UnYyUjRTb3ZjRHgKbEN1dmJzL2YvSFNCM1BHdGZ2emNndTZXOW1xbzZvTTliOUJwcjJpZ0R3YVRyRXk2dVNyQXUxTENLQ1VQaVNPbAo4RkF4dDlwd3gvVXN5aGVMMVVWVis3T2Y2d09HODJGaE5La1UyS0NrazZ1NDFERkN6aStQMDZRMEc2eWdaNTZICkt0d0dyUU5PdnpURTh3S0NBUUJMS29LaFkzVnVYZElLNWIvbW5vR3pubmVKTXFwQmppT3NHcUw0RUhKWHFZQ0cKd1F4RVN3T0FLZ2lBSGMybExyKzM5YzNxUmQ1MlZmWHpQTlRMUW9hZTlhSWJKK2NEbnQwSityYWZJR25DMmdsRwowWjZES3VQMjI0RmRqaCtLNDFPbjdKMjJoSThqbWgwVS95L2ZISXU1Q2xJVVBIV3g4Y0tKSUxYQ1oxK2lCdkJsCjJaWFRjQkk4RlhDZHBzWXZZQ2tBd2JoakZPSzZic2NDaHk4eU92NHBCVmxYa0lIdUJoY2JKQTJPWTJPYkdidE0KRzB1U3lES2I3NWpucGdxNHQxZEF2T1I3b0d1VU55Y1NOS2h2L1JubzY5cFRqSWYzbnZNVEgzSS9aaURpQXdKSgprem1aZHZqM0VIT3R2TmFYYjQrVFJjemJaRCtDdlRsYmc0OGlTSkVsQW9JQkFFdEdyclhic1RwU1FSbS9HV3pBCkY1Y0pGYld4UDRNU05HTlZ1NWFsYlAranMwRkwyUHQ2UVdldVhZRU91djBzcXVwa3lIUG9JUThSOFBjbE8wS3MKZE00ZWk1ZGVaNmdqYVpCRXpKYm5ONHlzNmMvWnpKSU9hVmRGWHpJQVdkdStRNnBTUitielpxSjEyN1lzblhjYgpnSE80N0FVbThJTVB2RER4TEhtalBvaXAwTVpmR2dZZ0Q1U3cxbTZ0WE91MjIwM3hBY3JFQjNQMWEzc09KVFlJCndFYVhSZS8rTEFzSGxPZFN2dFlmSGhmWUM5djRoNG1wcVNGQTJ2Tlk1SmdIWjZ5TUd2b2ZpSFZMUmdqL1pHczYKVmpsc3lWNUp2SjVlUy83QU9NRll4S1F5cFBJTThwTk9KTTJDTTBvL0pkeTBrbElHM0MwMWU5WExUNEVIRFlaVApzRnNDZ2dFQVpJaTYyclBMY2NNV0ZUQjBEeHZyVk0zQzZIeEhwOFgreUNJWXpBZUFpc1ZERTdDZWxMVEdrcnFtCklxVWtKalkxRzdvM0F0NFV3OE5rbXAwWnVMNjc0T3pjUGxaYUE3VGFrb2Z1ZGFtZFhBZ0kvM0ZxMHc2ZjJSUUcKU0tSeWs5cmp4eG1jdmRBVWxEeFFCb0I5UlRPaWkrdVRSM0Nudjl5UnoveGkxNEFWK3lvOVFwYnJ6blF4NVRHeApoZmYyQm0zOXVaeGZ0dTkvS2VGaFBJWGNYY2dITmFvcVFwUzhGV1NtdDl3M1NneCsvcjJEN3ZuQ0dxVC9iNjdLCkErUWdib3IrSXdGcTFyQjkrNTMvcHVMbmMrOG1SeG11cTdDWFBJalBGalFMOC9RaDlwY3pURUlpclkya21oVGoKTFBUUkVjUEZhQ1laeVFVbC9PMjE2NUxpQzR3UXFRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
			kind: Secret
			metadata:
			  creationTimestamp: "2023-06-29T17:52:00Z"
			  name: ca-tls
			  namespace: default
			  resourceVersion: "2255581"
			  uid: 64ccbdef-3f3c-498b-85e6-5522e330608e
			type: Opaque



 5. Create the ingress and services
    NOTE:  The ingress tells nginx how to route traffic to different services
           The ingress is what uses the 2 secrets (called "default/ca-tls" and "default/ca-secret")     The default/ indicates it is in the default namespace

    unix> vi app-load-balancer.yaml

######################################################################################
# Filename:  app-load-balancer.yaml
#
# Purpose:   Setup the services and the ingress rules for load balancing
#
#
#        Browser                                 Network
#  https://app.traderres.com/nccs ---------->    Load      ----->  nginx-controller   -------------->   nccs-service   --->  nccs pod #1
#     PKI client generated                       Balancer          [must trust           (https)                             nccs pod #2
#            root-ca                                                our root CA]
#
#
# To troubleshoot kubernetes, run this command:
# unix> kubectl get events --all-namespaces
#
#
# ASSUMPTIONS:
#  1) You created a generic secret from the root-ca public/root.pem
#     unix> kubectl create secret generic ca-secret --from-file=ca.crt=888.root.pem
#
#  2) You created a generic secret called ca-tls
#     unix> kubectl create secret generic ca-tls --namespace default --from-file=ca.crt=888.fullchain_and_server_cert.pem --from-file=tls.key=888.app.traderres.com.key.pem  --from-file=tls.crt=888.app.traderres.com.server.crt
######################################################################################


#####################################################
# NCCS Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-service
spec:
  type: ClusterIP              # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-backend          # The app=nccs-backend is the same selector found in nccs-deployment
  ports:
    - name: https
      port: 443
      protocol: 'TCP'
      targetPort: 443
    - name: http
      protocol: 'TCP'
      port: 80
      targetPort: 80


---
#####################################################
# NCCS-Admin Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-admin-service
spec:
  type: ClusterIP                    # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-admin-backend          # The app=nccs-admin-backend is the same selector found in nccs-admin-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


---
#####################################################
# Ingress (app-ingress-webapp)
#
# https://nccs.traderres.com/    --> takes you to nccs with end-to-end encryption
#####################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-node: "balanced"
    nginx.ingress.kubernetes.io/session-cookie-name: "my-cookie"
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"

    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3"

    # Enable pki client certificate authentication
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"

    # Create the secret containing the trusted ca certificates
    nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret"
    nginx.ingress.kubernetes.io/proxy-ssl-secret: "default/ca-tls"

    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"

    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"

    # Set the maximum file upload size to 50 MB  (must be greater than the 25 MB limit that the webapp uses)
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"

spec:
  ingressClassName: nginx

  tls:
   - hosts:
       - app.traderres.com
     secretName: ca-tls

  rules:
    - host: app.traderres.com
      http:
        paths:
          - path: /nccs
            pathType: Prefix
            backend:
              service:
                name: nccs-service
                port:
                  number: 443
          - path: /nccs-admin
            pathType: Prefix
            backend:
              service:
                name: nccs-admin-service
                port:
                  number: 443




 6. Deploy the ingress and services
    unix> kubectl apply -f app-load-balancer.yaml


 7. Wait a minute for AWS to allocate a public hostname for your load balancer


 8. Get the public hostname of the network load balancer
    unix> kubectl get ingress

	NAME          CLASS   HOSTS               ADDRESS                                                                   PORTS       AGE
	app-ingress   nginx   app.traderres.com   a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com   80, 443     150m



 9. Update godaddy's cname record for app.traderres.com so that it corresponds to the new external hostname
		a. Go to https://dcc.godaddy.com/control/portfolio/traderres.com/settings
        b. Click on the DNS tab
		c. Edit the old CNAME record for "app"    (this corresponds to app.traderres.com)
		   Type:  CNAME
		   Name:  app
		   Value: a251f01aeb7f94e76af94ded71a707a0-1101514633.us-east-2.elb.amazonaws.com

		d. Press "Save"



10. Wait for goDaddy to show that app.traderres.com points to the new load-balancer public hostname
    Do a lookup to get the current hostname for app.traderres.com
    unix> nslookup app.traderres.com

    *OR keep looping forever*
    unix> while [ 1 ]; do clear; date; nslookup app.traderres.com; sleep 3; done



11. Watch the nginx pod log files
    unix> kubectl get pods -A

    NAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE
    cert-manager    cert-manager-7564b796c7-gsd2f               1/1     Running     0          3d7h
    cert-manager    cert-manager-cainjector-58bcd74fd8-wvszz    1/1     Running     0          3d7h
    cert-manager    cert-manager-webhook-5bd9444ff7-n854k       1/1     Running     0          3d7h
    default         nccs-deployment-8475b7fd69-wkzrw            1/1     Running     0          34h
    ingress-nginx   ingress-nginx-admission-create-xr7t7        0/1     Completed   0          126m
    ingress-nginx   ingress-nginx-admission-patch-b6d5n         0/1     Completed   0          126m
    ingress-nginx   ingress-nginx-controller-7fcc694bd4-7742w   1/1     Running     0          126m   <-- nginx controller
    kube-system     aws-node-s78f4                              1/1     Running     0          4d7h
    kube-system     aws-node-t2h95                              1/1     Running     0          4d7h
    kube-system     coredns-647484dc8b-64gbd                    1/1     Running     0          4d7h
    kube-system     coredns-647484dc8b-blxx5                    1/1     Running     0          4d7h
    kube-system     ebs-csi-controller-64f786fdbf-4vklq         6/6     Running     0          3d8h
    kube-system     ebs-csi-controller-64f786fdbf-9skx2         6/6     Running     0          3d8h
    kube-system     ebs-csi-node-9xxj5                          3/3     Running     0          3d8h
    kube-system     ebs-csi-node-zqfd5                          3/3     Running     0          3d8h
    kube-system     kube-proxy-2qh4x                            1/1     Running     0          4d7h

	unix> kubectl logs -f ingress-nginx-controller-7fcc694bd4-7742w -n ingress-nginx



12. Verify that keycloak's client for nccs-webapp the correct URL for the root url and and home url:
    a. Connect to keycloak at https://keycloak.traderres.com:8444/admin/master/console/#/MyRealm/users
    b. Click on Realm -> MyRealm
    c. Click on Clients -> nccs-webapp
    d. Go to Access Settings
    e. Verify that you see this:
           Root URL:  https://app.traderres.com/nccs
           Home URL:  https://app.traderres.com/nccs



13. Attempt to connect with your browser and pki client cert
    a. Go to https://app.traderres.com/nccs



Simple way  to increase the number of nginx pods
------------------------------------------------
 1. Get the number of ingress pods that are running
    unix> kubectl get pods -n ingress-nginx

	NAME                                        READY   STATUS      RESTARTS   AGE
	ingress-nginx-admission-create-vtw8p        0/1     Completed   0          5h26m
	ingress-nginx-admission-patch-6h77v         0/1     Completed   1          5h26m
	ingress-nginx-controller-79d66f886c-fkshq   1/1     Running     0          4m21s        <-- Only 1 nginx pod running


 2. Edit the ingress-nginx-controller deployment
    unix> kubectl edit deploy ingress-nginx-controller  -n ingress-nginx

    Change the number of replicas from 1 to 2:

     spec:
         progressDeadlineSeconds: 600
         replicas: 2


 3. Get the number of ingress pods that are running  (there should be 2)
    unix> kubectl get pods -n ingress-nginx

	NAME                                        READY   STATUS      RESTARTS   AGE
	ingress-nginx-admission-create-vtw8p        0/1     Completed   0          5h26m
	ingress-nginx-admission-patch-6h77v         0/1     Completed   1          5h26m
	ingress-nginx-controller-79d66f886c-fkshq   1/1     Running     0          4m21s        <-- nginx pod #1
	ingress-nginx-controller-79d66f886c-t444r   1/1     Running     0          5h26m        <-- nginx pod #1



How to look at the nginx controller logs
----------------------------------------
 1. Get the pod that is running nginx
    unix> kubectl get pods -n ingress-nginx

	NAME                                        READY   STATUS      RESTARTS   AGE
	ingress-nginx-admission-create-vtw8p        0/1     Completed   0          63m
	ingress-nginx-admission-patch-6h77v         0/1     Completed   1          63m
	ingress-nginx-controller-79d66f886c-t444r   1/1     Running     0          63m

 2. Look at the log on that running pod
    unix> kubectl logs -f ingress-nginx-controller-79d66f886c-t444r  -n ingress-nginx



How to Delete the nginx controller and load balancer
----------------------------------------------------
unix> kubectl delete -f app-load-balancer.yaml
unix> kubectl delete -f aws.deploy.yaml



How to edit nginx controller settings
-------------------------------------
unix> kubectl edit deployment ingress-nginx-controller -n ingress-nginx



Sample Complex Ingress and Service File
---------------------------------------

Create an ingress file so that
 1) If the user connects to https://app.traderres.com/ then rewrite it to https://app.traderres.com/welcome
 2) If nginx returns a 404 not found error, then redirect the user to https://app.traderres.com/unknown


######################################################################################
# Filename:  app-load-balancer.yaml
#
# Purpose:   Setup the services and the ingress rules for load balancing
#
#
#        Browser                                Network
#  https://app.traderres.com/nccs ---------->    Load    ----->  nginx-controller   --------------> nccs-deployment --->  nccs pod #1
#     PKI client generated                       https            Balancer             (https)                            nccs pod #2
#            root-ca                                              [must trust
#                                                                  our root-ca]
# To troubleshoot kubernetes, run this command:
# unix> kubectl get events --all-namespaces
#
#
# ASSUMPTIONS:
#  1) You created a generic secret from the root-ca public/root.pem
#     unix>  kubectl create secret generic ca-secret --from-file=ca.crt=888.root.pem
#
#  2) You created a generiuc secret called ca-tls
#     unix> kubectl create secret generic ca-tls --namespace default --from-file=ca.crt=888.fullchain_and_server_cert.pem --from-file=tls.key=888.app.traderres.com.key.pem  --from-file=tls.crt=888.app.traderres.com.server.crt
#
#
######################################################################################


#####################################################
# NCCS Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-service
spec:
  type: ClusterIP              # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-backend          # The app=nccs-backend is the same selector found in nccs-deployment
  ports:
    - name: https
      port: 443
      protocol: 'TCP'
      targetPort: 443
    - name: http
      protocol: 'TCP'
      port: 80
      targetPort: 80


---
#####################################################
# NCCS-Admin Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: nccs-admin-service
spec:
  type: ClusterIP                    # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: nccs-admin-backend          # The app=nccs-admin-backend is the same selector found in nccs-admin-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


---
#####################################################
# FRMS Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: frms-service
spec:
  type: ClusterIP                    # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: frms-backend                # The app=frms-backend is the same selector found in frms-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


---
#####################################################
# SF328 Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: sf328-service
spec:
  type: ClusterIP                    # This service will be ClusterIp because this service will be proxied by the ingress-nginx-controller
  selector:
    app: sf328-backend               # The app=sf328-backend is the same selector found in sf328-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80


---
#####################################################
# unknown Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: unknown-service
spec:
  type: ClusterIP
  selector:
    app: unknown-backend               # The app=unknown-backend is the same selector found in unknown-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80



---
#####################################################
# welcome Service
#####################################################
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: welcome-service
spec:
  type: ClusterIP
  selector:
    app: welcome-backend               # The app=welcome-backend is the same selector found in welcome-deployment
  ports:
    - name: https
      port: 443
      targetPort: 443
    - name: http
      port: 80
      targetPort: 80

---
#####################################################
# Ingress (app-ingress-webapp)
#
# https://nccs.traderres.com/    --> takes you to nccs with end-to-end encryption
#####################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-node: "balanced"
    nginx.ingress.kubernetes.io/session-cookie-name: "my-cookie"
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"

    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3"

    # Enable pki client certificate authentication
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"

    # Create the secret containing the trusted ca certificates
    nginx.ingress.kubernetes.io/auth-tls-secret: "default/ca-secret"

    nginx.ingress.kubernetes.io/proxy-ssl-secret: "default/ca-tls"

    # Specify the verification depth in the client certificates chain
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"

    # If nginx returns a 404 not found, then redirect the user to the /unknown page
    nginx.ingress.kubernetes.io/server-snippet: |
      proxy_intercept_errors on ;
      error_page 404 "https://app.traderres.com/unknown" ;

    # Specify if certificates are passed to upstream server
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"

    # If the user requests / then rewrite the url as /welcome
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/$ /welcome last;


spec:
  ingressClassName: nginx

  tls:
   - hosts:
       - app.traderres.com
     secretName: ca-tls

  rules:
    - host: app.traderres.com
      http:
        paths:

          - path: /welcome
            pathType: Prefix
            backend:
              service:
                name: welcome-service           # If users connects to https://app.traderres.com/welcome** then proxy to the welcome-service
                port:
                  number: 443

          - path: /unknown
            pathType: Prefix
            backend:
              service:
                name: unknown-service
                port:
                  number: 443

          - path: /nccs
            pathType: Prefix
            backend:
              service:
                name: nccs-service              # If users connects to https://app.traderres.com/nccs** then proxy to the nccs-service
                port:
                  number: 443

          - path: /nccs-admin
            pathType: Prefix
            backend:
              service:
                name: nccs-admin-service
                port:
                  number: 443

          - path: /frms
            pathType: Prefix
            backend:
              service:
                name: frms-service
                port:
                  number: 443


