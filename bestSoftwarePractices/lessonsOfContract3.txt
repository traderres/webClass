Lessons of Contract 3
---------------------
I was only one this contract for a short period (3 months in 2016).

But, there are lessons in this one:
 1. Never, never, never tell your current emloyer that your leaving until all of the paperwork is transferred and you have a start date
    You risk forcing yourself out of a job
    The gain is small

 2. Before you join a project, make sure the project has real customers
    - This project built something without having requirements or customers in the hope
      of productizing it

 3. Be wary of clients who use lots of buzzwords
    - The client would use references to "own this space" a lot and it never made sense to me

 4. Be ware of clients who hold lots of meetings
    - The client would love to have meetings face-to-face and conf calls
    - Most of the meetings were about listening to the client talk to herself
    - In a typical week, we [the developers] could have as many as 12-15 hours of meetings.

 5. I hate taking meeting notes.  It's a lousy job.  It's tedious.  And, few people read them anyway.  When first asked, I should have said no.  Instead, I agreed.  And, it appears that every week something goes wrong with them:  The list of recipients is missing someone, the action items are not quite correct.  And, then I have to send them again [which feels embarrassing].  And, taking notes during the conference call isn't fun, either.  But, they are  important to my client.  This task contributes to the "smallness" of this project.  It's the least enjoyable part of the week.

 6. Touchdowns count for more when more people see it happen.  When 50,000 people see you score, that counts for more than when 3 people see you score.  This is a small project.  So, the wins are small.  The work does not feel meaningful.

 7. Everyone has his price
    - Just a few months into this project when an old project manager made me a ridiculous offer to return
    - I accepted [surprising myself] even though I left that project in 2014 because I was getting bored
    - Still, I will get a huge raise [35k], respect of my peers, and a chance to work on code I write
    - It is an offer I simply could not refuse

 8. Separating security from a web application creates complexity and dependency
    In a conventional web app, the web app ensures that the user has authority and required roles to do stuff
    The web app probably uses something like Spring Security
    The web app might use a web service to get the user's roles

    But, in the separate-security-from-the-webapp model, we do a few things:
    a. Setup a proxy server [using Apache httpd or nginx] to prevent users from going directly to the webapp
    b. Setup an openAM mechanism [that the proxy server redirects to]
    c. Setup some authentication mechanism [a groovy script] that openAM calls.
    d. The openAM admin adds roles limiting what web apps a user can see
    e. The openAM admin grants roles to users allowing them to view an application

    There are problems with this approach:
     -- The openAM proxy server can run a groovy script to limit results the user's sees [say for an ElasticSearch query]
         NOTE:  This gets problematic because this should really be handled within the webapp itself
                Do we really want this script running on every request to the proxy server?
     -- The web developer can assume that security is handled by openAM and openAM might assume that some security elements are handled by the web developer.  Where do you draw the line?
     -- More complexity
     -- Separating the security also creates a dependency
        Now, that web app needs openAM and a proxy server to run
     -- Testing security requires knowledge of openAM

    Thoughts on this approach
     a) If roles change frequently, then pulling it out [into an openAM setup makes sense]
     b) If roles do not change often, then keep it in the web app.

