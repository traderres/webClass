Career Guidance Lecture
-----------------------


Major Points
------------
 1. How much I make after 25 years

 2. History of tech over the year
    a. In the early 1990s:  Unix, Linux, Oracle, client/server, Visual Basic.
    b. In the late 1990s:   ASP, HTML, JavaScript, VB, Oracle on the back-end
    c. In early 2000s:      Linux/Apache/MySql, Perl, VB, Oracle
    d. In the late 2000s:   Java, JSP, Ant, Perl, VB, Oracle
    e. In the early 2010s:  Java, JSP, Ant, Spring Framework, Oracle, Postgres, SOLR, HDFS
    f. In the late 2010s:   Java, Angular, Maven, Grails, Spring Framework, REST calls, Oracle, Postgres, ElasticSearch, HDFS

    What has remained the same over 25 years:
     a) We still use files and directories
     b) We still use databases
     c) We still use operating systems
     d) We still have a shortage of good programmers

    What has changed:
     a) We have moved from client/server to Web/Phone apps
     b) We are moving away from databases to search engines/document databases
     c) It's easier than ever to search a billion records


 3. Four categories of software
    All software programs fit into 4 categories
     a) Command-line programs -- e.g., Unix scripts like Bash, Perl, Python,
     b) Desktop programs -- e.g., MS Word, Intellij Idea
     c) Web applications
     d) Phone applications

    Why is it important?  The best programmers know technology that spans *multiple* categories


 4. What advice would I offer a younger version of myself?
    a. Get a Github account today and use it:  It holds your code, it holds your portfolio.  It is your online toolbox in the cloud.
       At a minimum, it's handy, shows that you have some knowledge of Git, and shows that you are smart enough to keep an online toolbox
       At a maximum, it may get you a better job

    b. If you're going to be a professional programmer, use professional tools
       If you're going to program in Java, then get Intellij Idea Ultimate (from JetBrains).
       If you're going to program in Python, then get Pycharm Pro (from JetBrains).
       -- These are graphical debugging tools
       + It's much smarter to program this way (as opposed to leaving print statements all over the place)
       + If you know one of JetBrain's tools, then you know them all
       + If you have a student email address, it's all free

    c. When you join a project, find the "Adam" -- i.e., find the person that is nice, will patiently explain things to you
       Every project has a guy like this:  He's smart, he's nice, and he's patient.  He will answer your most rudimentary questions
       Then, in the future, *BE* that person and help out the next person

    d. Keep learning

    e. Don't specialize
       If all you know if Java, then every program is a Java program.  But, there's more to programming than just Java.
       + It's better to know a little about everything then only being a front-end programmer (or only being a back-end programmer)
       + The generalist can build the entire feature (without having to depend on other programmers)
       + The generalist becomes a better architect


 5. Know how to ace the interview
    As someone who has performed countless technical interviews, here is what I recommend:
    a. If you don't know, then say it:  "I don't know."  Believe me:  I can tell when you're bullshitting me.  So, be straight with me.
    b. Bring some sample code, a portfolio, pictures, screen shots.  Better yet, show them your github site
       -- No one does this
       -- Yet, it works well
       -- It makes you stand out
    c. I care about passion.  Show me some passion in the interview.  Don't hold back.  If they offer you a marker to write on a whiteboard, then use the entire whiteboard.
    d. Tell me stories (and what you learned from them)
    e. Know your strengths & weaknesses
    f. Ask me about the team, team environment, what constraints the project has


 6. Good Project = Good technology + Good co-workers + Good customer
    You will not get all 3
    Of all 3, the "Good co-workers" is the most important


 7. You want to have teammates who are "better than you"
    You're looking for 3 things in general:
      1) Intelligence
      2) Energy, and
      3) Integrity  (doing the right thing even when it's inconvenient)

    And, if they don't have integrity, then don't even bother with the first two.


