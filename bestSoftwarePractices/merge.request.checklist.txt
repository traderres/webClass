Merge Request Check List
------------------------


General
-------
 1. If anything changed outside of the docs/, then compile the code and try it out on a cluster


 2. What did the developer actually change?
    -- Did frontend HTML/CSS/TypeScript change?
    -- Did frontend javascript dependencies change in package.json
    -- Did backend Java REST calls change?
    -- Did backend Java dependencies change in pom.xml
    -- Did backend application.yaml change?
    -- Did database tables/columns/indexes change in flyway scripts?
    -- Did elasticsearch mappings change in the sync service?


 3. Do the commits have a ticket number?
    If not, create a JIRA ticket for it




Backend
-------
 1. Java Code / Usual suspects
    a. Are there unused methods in the Java code?  If so, remove it
    b. Is there commented out code in the Java code?  If so, remove it
    c. Are there unused imports in the Java code?
    d. Do the comments make sense?
    e. Does the code make sense?  Or, is it a mess?


 2. Bind Variables / Protecting against SQL Injection Attacks
    a. Are bind variables being used in the back-end SQL for every sql VALUE that is passed-in from the frontend?
    b. Are bind variables being used in the back-end SQL for every sql VALUE that can **CHANGE**?
       NOTE:  We do not need bind variables for constants [as they do not change]
    c. Are bind variables being used for the IN ( ) clause?  They should be....


 3. Audit Manager / SQL Transactions
    a. If auditManager calls are made, is the correct audit table being used?
        -- Look at every auditManager call  runSqlUpdateOne()  runSqlUpdateMany()
    b. Is the *SAME* auditManager instance being used among all inserts/updates/deletes
    c. If multiple inserts/updates/deletes are being used, are they in a SQL Transaction?


 4. Application.yaml changes
    -- If the local-dev application.yaml change,   then did the production application.yaml also change
    -- If the production application.yaml changed, then did the local-dev application.yaml change?


 5. New REST endpoint was added
    a. If there is a passed-in DTO, then make sure it has a new model DTO in the backend & frontend  [no sharing of DTOs -- except for the LookupDTO in the LookupController]
    b. If there is a returned DTO, them make sure it has a new model DTO in the backend & frontend   [no sharing of DTOs -- except for the LookupDTO in the LookupController]
    c. Does the security make sense for this REST call?
    d. Does the REST endpoint method (GET/PUT/POST/DELETE) make sense?
       -- Use GET  for read-only operations
       -- Use POST for creating/updating and passing in a large DTO
       -- Use PUT  for updates that do not require a DTO
    e. Was the REST endpoint added to the spreadsheet?


 6. New Java Service or Controller was added
    a. Does the logger class name match the name of the actual java class?
    b. Does the Java Service have the @Service annotation?
    c. Does the Java Controller have the @Controller annotation


 7. Backend controllers and services should *NOT* have class variables that change
    -- All class variables should be IMMUTABLE  (initialized once and never change)
    -- Otherwise, it cannot scale up as different threads could have different class variables -- which is a major problem


 8. When using Spring JDBC to select columns, are all columns being selected being used in the row mapper DTO?
    -- If so, then we're selecting SQL columns that are NOT being returned


 9. Constants
    a. If new constants are added and they refer to database ids, are the constant values have the CORRECT ids?
    b. Do the names of the constants make sense?



Frontend
--------
 1. Front-end Routes / If any frontend routes were changed, make sure they were changed in BOTH places (frontend constants.ts *AND* uicontrols database table)
    a. If the user changed a route path in constants.ts, then verify that there is a change in the uicontrols table (in a flyway script)
    b. If the user changed a uicontrols route (in a flyway script), then make sure the user changed a route in constants.ts


 2. Front-end Dialogs
    a. If you pass-in data, make sure it's a DTO
    b. If the dialog is invoking the REST call, then prevent the user from canceling the dialog while the save is in-progress
       + This prevents the user from cancelling or clicking on anything while the save happens
    c. Avoid using the <mag-dialog-content> tag when the dialog is small (as it will create a vertical scrollbar)


 3. Front-end Grids
    a. Does the GridOptions class variable have the type set to GridOptions?
            public gridOptions: GridOptions = {

			}

	b. Does the column definitions class variable have the type set to ColDef?
			 public columnDefs: ColDef[] = [
				 {
				  field: 'business_name',
				  headerName: 'Entity Name',
				  cellStyle: {'white-space': 'normal'},
				  filter: 'agTextColumnFilter',
				  filterParams: this.textFilterParams
				}
			]

	c. Does the default column definitions class variable have the type set to ColDef?
		  public defaultColDefs: ColDef = {
			sortable: true,
			filter: true,
			floatingFilter: true,    // Causes the filter row to appear below column names
			wrapText: true,
			resizable: true,
			autoHeight: false
		  };


    d. Verify that the gridOptions explicitly sets the rowModelType to either 'clientSide' or 'serverSide'
		  public gridOptions: GridOptions = {
			rowModelType: 'serverSide',

			...
		  }


    e. Verify that client side data filters use dateComparator
			 {
			  field: 'last_edited_date',
			  minWidth: 150,
			  headerName: 'Last Edited Date',
			  cellClass: 'grid-text-cell-format',
			  filter: 'agTextColumnFilter',
			  filterParams: this.textFilterParams,
			  comparator: (a: string, b: string) => this.dateService.dateComparator(a,b)
			}


 4. Front-end Layout
    a. Does a dynamic height calculation *INCLUDE* the bannerHeight value?
       If there is a style="height: calc(100vh - 200px)"
	     Make sure that it *ALSO* includes the banner service (so the variable height accounts for the banner)
				style="height: calc(100vh - 120px - {{ bannerHeight }})


 5. TypeScript Class
    a. Are all subscriptions unsubscribed in the ngOnDestroy()
	b. Are there unused imports?
    c. Are there more than 3 REST calls on the page?  If so, consider combining them into 1.
    d. Are all injected services actually being used?


 6. ADA Compliance in the HTML
    a. Does *EVERY* form field control have title=" " and aria-label=" " values    [with the *SAME* value for both]


 7. Reactive Forms
    a. Are all of the form fields in the Reactive Form actually *BEING USED* somewhere in the code?  If not, you can remove them.
    b. Does the reactive form have only 1 form control?  [That's probably overkill...you could use [(ngModel)]="this.mySelectedFormField" instead if it's just one control


 8. New Front-end Page Added
    a. app.modules.ts / Does the page have the correct guards applied in app.module.ts?
    b. constants.ts   / Is the route of the new page consistent with the other similar pages?
    c. Page Title     / Does the Front-end page title *MATCH* the name in the navbar.component.html
    d. Page Guard     / Are the correct security roles granted so that the correct users can open this page?  Can only admins see the page?  Or is other users?


 9. TypeScript Methods
    a. Are *ALL* of the public methods actually being used in the HTML
    b. Do the comments make sense?
    c. Do the methods have a return type
    d. Are the passed-in variable types any?  If so, replace with the real type.....


		BAD:
			public onGridReady(aParams: any): void {

			}


		GOOD:
			public onGridReady(aParams: GridReadyEvent): void {

			}






ElasticSearch
-------------
 1. ElasticSearch Mapping Changes
    a. If new fields are added to the ElasticSearch mapping files, then the sync-service should be updated to set these new values
    b. If new fields are added and they are used for server-side sorting & filtering, then the sub-fields called "raw", "sort", and "filtered" should be present
       If new fields are added and they are NOT used for server-side grid filtering, then the sub fields called "filtered" should NOT BE present

       NOTE:  The ES mapping files are located in sync-service/src/main/resources/es/


 2. If the sync-service is setting a date in the database, does the date format match one of the accepted date forms in the ES Mapping
    -- SyncService blew-up with this problem on 9/14/2023 because the date stored in ElasticSearch was not one of the accepted formats






Database
--------
 1. Flyway Script Changes
    a. If any flyway scripts were changed, make sure that they match the version number in pom.xml

       Example:
          If the developer changes db-migrations/src/main/resources/db/migration/V2.3.4__Changes.sql,
          Then make sure that the pom.xml shows version 2.3.4 or 2.3.4-SNAPSHOT


     b. If any older flyway scripts were changed and the product is in production, then REJECT the MR

       Example:
          If the developer changes db-migrations/src/main/resources/db/migration/V2.3.3__Changes.sql,
          and the version is 2.3.4 or 2.3.4-SNAPSHOT, then REJECT (as you should not change older scripts in production systems)


	 c. If a flyway script is added, make sure it starts with V__



 2. Database Changes
    a. If a new database table was added, was an audit table added with the same name and "_aud"  ?
    b. If a column was updated in a table,   then verify that it was updated  in the audit table
    c. If a column was added   to a table,   then verify that it was added    to the audit table
    e. If a column was delete  from a table, then verify that it was deleted  from the audit table
    f. If a table was added, does it have a primary key?  Or, does it have 2 foreign keys?
    g. Was the audit table created correctly?
       -- The audit table should NOT have any primary key
       -- The audit table should have the same columns as the primary key + 4 more:  username, timestamp, audit_type


    h. If a column was added and it is required, then there should probably be a default value  (to ensure that existing data migrates correctly)

    i. If the user changed any routes in uicontrols, then make sure the route was changed in constants.ts




