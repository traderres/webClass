Lessons of Contract 4  (2016 - 2020)
------------------------------------
On this contract I played a number of roles, including:
 - Teach lead (for the first 16 months)
 - Software Developer (for 3 years)
 - Mentor/Instructor/de-facto team lead (for last year)


Lessons
-------
 1. When doing a database migration:  practice, practice, practice!!
    -- We developed a java program to migrate the old database schema to a new one
    -- We would run it and check the number of records (to measure how well it worked)
       but we did not check the integrity of the records (audit records were not migrated at all, other records were completely messed up)
    -- In the end, the entire database migration was re-written by another programmer
    -- The 2nd version of the code was tested a number of times and it worked pretty well

 2. Rewrites take longer than you think
    -- We thought re-writing the old flagship product would take 6 months.  It really took 18 months
    -- We were 12 months late

 3. Be suspicious when you don't get requirements in writing

 4. Bigger the team --> Greater the conflict

 5. When developers lie, fire them immediately
    - Everyone knows who's lying
    - Yes, it's hard to fire someone:  no one enjoys it.  But, things get better when you cast off your dead weight
    - After we fired the developer (who lied), things got better.  Tensions were greatly reduced.  People would laugh more.
    - After we fired the developer, productivity improved

 6. When developers do not follow practices, you must penalize them
    - When they skip doing merge requests, that's bad
    - When they lie to cover it up, that's worse
    - When you know it happens and you do nothing, that's even worse

 7. Good is the enemy of the best
    - The upload processor worked well for a small number of files
    - The spark-streaming-distributed process could handle millions but it was not tested
    - Looking at the production database, it was clear that only about 12 files-per-day were added to the system on average
    - So, we should not have invested the 16 months on the distributed process
    - Even better:  Check your daily statistics *before* building a distributed process.  Quick & dirty goes pretty far.

 8. It hurts when you lose rock-stars
    - We lost K and K in the spring of 2019 and our productivity dropped noticeably

 9. Know clearance levels of your subs

10. Make sure multiple people can do Tier 3 support
    - Tier 3 support involves resolving issues with production systems, but it's almost always the same problems
      (a) low on disk space
      (b) low on memory
      (c) permission problems
      (d) dependencies are not running -- ElasticSearch is down, Database is low on database connections, HDFS is flaky

11. Peer programming is expensive but was effective (as the code developed during the sessions was high quality)

12. Train your people and they may leave anyway
    - We spent 8 months training B but he left anyway (his employer needed him on another contract that was in trouble)



