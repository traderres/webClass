How to Make a Builder Class in Java
-----------------------------------
Problem:  SonarQube does not like my big constructors
Solution: Create a Builder Class


Exercise
--------
 1. Create a java class:   MyBigDTO

 2. Add in private variables for these fields  (all strings)

			cageCode
			uniqueEntityIdentifier
			businessName
			address1
			address2
			city
			stateCode
			zipCode
			countryCode
			fullAddress


 3. Generate the *GETTERS*

 4. Generate a constructor (that uses *ALL* fields)

 5. Right-click on this file -> Analyze with SonarQube for IDE
	--> Problem the constructor
		"Constructor has 10 parameters which is greater than 7 authorized"





Problem:  I want an immutable object (it's initialized once and cannot change).  So, there are *NO SETTERS*
           But, my constructor has too many parameters

Solution: Use the builder Class


How to Create a Builder Class
-----------------------------
 1. Remove the generated constructor

 2. Build the *INTERNAL STATIC BUILDER* class
	a. Create an static class *INSIDE* this class Builder

	  	   public static class Builder {

			}

	b. Copy your private variables to this internal builder class

	c. Create a public method for each private variable

				public Builder withCageCode(String aCageCode) {
				    this.cageCode = aCageCode;
				    return this;
				}


	d. Create one more public method called build() that returns the big DTO
				public MyBigDTO build() {
				    return new MyDTO(this);
				}


 3. Add a new constructor to the MyDTO class
	-- It takes in the Builder object
	-- It sets the private variables




When finished the class looks something like this
-------------------------------------------------
package com.something.models;


public class MyBigDTO {

	private String cageCode;
	private String uniqueEntityIdentifier;
	private String businessName;
	private String address1;
	private String address2;
	private String city;
	private String stateCode;
	private String zipCode;
	private String countryCode;
	private String fullAddress;

	public String getCageCode() {
		return cageCode;
	}

	public String getUniqueEntityIdentifier() {
		return uniqueEntityIdentifier;
	}

	public String getBusinessName() {
		return businessName;
	}

	public String getAddress1() {
		return address1;
	}

	public String getAddress2() {
		return address2;
	}

	public String getCity() {
		return city;
	}

	public String getStateCode() {
		return stateCode;
	}

	public String getZipCode() {
		return zipCode;
	}

	public String getCountryCode() {
		return countryCode;
	}

	public String getFullAddress() {
		return fullAddress;
	}

	/**
	 * This is the constructor class that takes-in the *BUILDER* object
	 * In order to build this object you now use this:
	 *    CageCodeLookupDTO dto = new CageCodeLookupDTO.Builder()
	 *                                      .withCageCode("abcde")
	 *                                      .build();
	 * @param aBuilder holds the builder object
	 */
	private MyBigDTO(Builder aBuilder) {
		this.cageCode               = aBuilder.cageCode;
		this.uniqueEntityIdentifier = aBuilder.uniqueEntityIdentifier;
		this.businessName           = aBuilder.businessName;
		this.address1               = aBuilder.address1;
		this.address2               = aBuilder.address2;
		this.city                   = aBuilder.city;
		this.stateCode              = aBuilder.stateCode;
		this.zipCode                = aBuilder.zipCode;
		this.countryCode            = aBuilder.countryCode;
		this.fullAddress            = aBuilder.fullAddress;
	}


	/**
	 * This is the builder class that lets us initialize the object ONCE and pass-in lots of parameters
	 */
	public static class Builder {
		private String  cageCode;
		private String  uniqueEntityIdentifier;
		private String  businessName;
		private String  address1;
		private String  address2;
		private String  city;
		private String  stateCode;
		private String  zipCode;
		private String  countryCode;
		private String  fullAddress;

		public MyBigDTO build() {
			return new MyBigDTO(this);
		}

		public Builder withCageCode(String aCageCode) {
			this.cageCode = aCageCode;
			return this;
		}

		public Builder withUniqueEntityIdentifier(String aUniqueEntityIdentifier) {
			this.uniqueEntityIdentifier = aUniqueEntityIdentifier;
			return this;
		}

		public Builder withBusinessName(String aBusinessName) {
			this.businessName = aBusinessName;
			return this;
		}

		public Builder withAddress1(String aAddress1) {
			this.address1 = aAddress1;
			return this;
		}

		public Builder withAddress2(String aAddress2) {
			this.address2 = aAddress2;
			return this;
		}

		public Builder withCity(String aCity) {
			this.city = aCity;
			return this;
		}

		public Builder withStateCode(String aStateCode) {
			this.stateCode = aStateCode;
			return this;
		}

		public Builder withZipCode(String aZipCode) {
			this.zipCode = aZipCode;
			return this;
		}

		public Builder withCountryCode(String aCountryCode) {
			this.countryCode = aCountryCode;
			return this;
		}

		public Builder withFullAddress(String aFullAddress) {
			this.fullAddress = aFullAddress;
			return this;
		}

	}


}
