How to Add Embedded H2 Database to Your Project (without Spring)
----------------------------------------------------------------
Problem:   I am not using Spring but I want to use the embedded H2 Database
           I want to be able to connect to it from my IntelliJ Database Console
		   
Solution:  Use JdbcDataSource and set the file path where the file is stored
           Set the AUTO_SERVER=TRUE so that it runs in mixed mode
		   

Create an Embedded Database (that you *CAN* connect it from IntelliJ Databsae Console)
---------------------------------------------------------------------------------------
 1. Add the maven dependencies

       <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>1.4.200</version>
      </dependency>

      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>5.2.12.RELEASE</version>
      </dependency>


 2. Create this class:  EmbeddedDatabase
        package com.lessons.utilities;

        import org.h2.jdbcx.JdbcDataSource;
        import org.h2.tools.RunScript;

        import javax.sql.DataSource;
        import java.io.File;
        import java.io.FileReader;


        public class EmbeddedDatabase {

            private DataSource dataSource;

            /**
             * Create and start-up the H2 database
             */
            public EmbeddedDatabase() throws Exception {
                File f;

                String tempDirectory = System.getProperty("java.io.tmpdir");

                // Check if someone else is already connected to this database
                f = new File(tempDirectory + "/h2.lock.db");
                if (f.exists() ) {
                    throw new RuntimeException("Someone else is already connected to the database.  Disconnect the other client.");
                }

                // Delete the local database files (so the database starts out empty)
                f = new File(tempDirectory + "/h2.mv.db");
                if (f.exists() ) {
                    f.delete();
                }

                f = new File(tempDirectory + "/h2.trace.db");
                if (f.exists() ) {
                    f.delete();
                }


                // Intellij can connect to this embedded database using this url: 
				//    Linux:     jdbc:h2:file:/tmp/h2;TRACE_LEVEL_FILE=4;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;MODE=PostgreSQL
                //    Windows:   jdbc:h2:file:c:\\users\\WINDOWS-ACCOUNT-NAME\\ApDdata\\Local\\Temp\\h2;TRACE_LEVEL_FILE=4;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;MODE=PostgreSQL
				// Setup the h2 database to run in "mixed mode" so another process can connect to it using the same url
                JdbcDataSource jdbcDataSource = new JdbcDataSource();
                jdbcDataSource.setUrl("jdbc:h2:file:" + tempDirectory + "/h2;TRACE_LEVEL_FILE=4;AUTO_SERVER=TRUE;MODE=PostgreSQL");
                jdbcDataSource.setUser("");
                jdbcDataSource.setPassword("");

                // Run the schema.sql script
                // NOTE:  This command starts-up the local database
                RunScript.execute(jdbcDataSource.getConnection(), new FileReader("src/main/resources/db/schema.sql") );

                this.dataSource = jdbcDataSource;
            }


            public DataSource getDataSource() {
                return this.dataSource;
            }
        }



 3. Add this file:  src/main/resources/db/schema.sql
 
		CREATE TABLE reports(
		   ID INT,
		   NAME VARCHAR,
		   LAST_MOD TIMESTAMP WITH TIME ZONE AS CURRENT_TIMESTAMP
		);

 
 4. Use the class to run SQL
 
        // Create and startup the embedded h2 Database
        EmbeddedDatabase embeddedDatabase = new EmbeddedDatabase();
        DataSource ds = embeddedDatabase.getDataSource();
        
		
		JdbcTemplate jt = new JdbcTemplate(ds);
		
		// Insert a record into the embedded table
        String sql = "insert into reports(id, name) values(1, 'stuff')";
        int rowsAdded = jt.update(sql);
        logger.debug("rowsAdded={}", rowsAdded);

        // Get the total number of records in this table
        sql = "select count(*) from reports";
        Integer tableCount = jt.queryForObject(sql, Integer.class);
        logger.debug("tableCount={}", tableCount);
 
 
 5. Verify that you can Connect to the database
    a. Startup the application
    b. Open the Intellij Database Console
       1) Press +  -> Data Source -> H2
       2) In the "General" tab
       
          Connection Type:   Embedded     !! This is important
          Path:              /tmp/h2.mv.db
          User:              <blank>
          Password:          <blank>
          URL:               jdbc:h2:file:/tmp/h2;TRACE_LEVEL_FILE=4;AUTO_SERVER=TRUE;MODE=PostgreSQL
          
		  
		  The URL could be:		  
		     Linux:    jdbc:h2:file:/tmp/h2;TRACE_LEVEL_FILE=4;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;MODE=PostgreSQL
             Windows:  jdbc:h2:file:c:\\users\\WINDOWS-ACCOUNT-NAME\\ApDdata\\Local\\Temp\\h2;TRACE_LEVEL_FILE=4;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE;MODE=PostgreSQL
			 
		  
       3) Press "Test Connection"
         
          WARNING:  If "Test Connection" hangs, then you may be stuck at a breakpoint so press Continue in your application
          
     c. In the database console, attempt to view the contents of the reports table
        SQL> select * from reports
        
    
 By default, H2 stores all tables in the PUBLIC schema, so you should see your tables in the Database Console
    H2 -> H2 -> Schemas -> PUBLIC -> REPORTS (table)
    
  
 
