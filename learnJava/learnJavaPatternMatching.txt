How to Match Patterns in a Class using Java
-------------------------------------------

Create your Pattern

// Create a pattern to match a white space, quote, or double quote
Pattern pat = Pattern.compile("[\\s\"\']");

String sString = "Has a \"quote\" in it";

Matcher m = pat.matcher(sString);

if (m.find())
{
  // This string has a white-space, quote, or double quote somewhere in it
}



NOTE:  Use m.matches() to match the pattern against the *ENTIRE* original string
       Use m.find() to match the pattern against any *PART* of the original string


Pattern.compile() has a 2nd argument which can be:
 a) Pattern.MULTILINE or (?m) tells Java to accept the anchors ^ and $ to match at the start and end of each line (otherwise they     only match at the start/end of the entire string).

 b) Pattern.DOTALL or (?s) tells Java to allow the dot to match newline characters, too.


Sample Pattern to Remove Leading and Trailing Quotes
----------------------------------------------------
public class MyStringUtils
 {
   private static Pattern patRemoveLeadingTrailingQuotes = Pattern.compile("^\"(.$)\"$");


   public String removeLeadingAndTrailingQuotes(String aString)
    {
       Matcher m = patRemoveLeadingTrailingQuotes.matcher(aString);

       if (m.matches() )
       {
          return m.group(1);
       }
       else
       {
          return aString;
       }
    }

}


Sample Pattern to remove <Font>....</Font> but leave the contents alone
-----------------------------------------------------------------------
    private static final Pattern removeFontTags          = Pattern.compile("<\\/{0,1}font.*?>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    public static String removeFontTagsFromString(String aRawXml) {
        if (StringUtils.isEmpty(aRawXml)) {
            return aRawXml;
        }

        // Remove the <font> tags but leave the contents untouched
        //    "<Font Color="#000000">Est.</Font>" --> "Est."
        //    "<FONT Color="#000000">Est.</FONT>" --> "Est."
        //
        String cleanedXml = removeFontTags.matcher(aRawXml).replaceAll("");

        return cleanedXml;
    }


Sample Pattern to remove <Font>....</Font> and everything inside of it
----------------------------------------------------------------------
    private static final Pattern removeFontTags = Pattern.compile("[<]font.*[<]\\/font[>]", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    public static String removeFontTagsFromString(String aRawXml) {
        if (StringUtils.isEmpty(aRawXml)) {
            return aRawXml;
        }

        // Remove the <font> tags and everything side of them
        //    "hi <Font Color="#000000">Est.</Font> mom" --> "hi  mom"
        //
        String cleanedXml = removeFontTags.matcher(aRawXml).replaceAll("");

        return cleanedXml;
    }



Sample Pattern to extract text before the @ sign
------------------------------------------------
   private static final Pattern extractTextBeforeAtSign = Pattern.compile("(.*?)(?:@|\\z)",    Pattern.CASE_INSENSITIVE);

   public static String getEmailHandleFromEmail(String aEmail) {
        if (StringUtils.isBlank(aEmail)) {
            return "";
        }

        Matcher matcher = extractTextBeforeAtSign.matcher(aEmail);
        if (matcher.find())
        {
            String textBeforeAtSign = matcher.group(1);
            return textBeforeAtSign;
        }
        else {
            return "";
        }
    }
