How to Create a New Excel Files Using excel-streaming-reader
------------------------------------------------------------
Problem:  The older Apache POI library reads the entire Excel file into memory (it's not memory efficient)
          But, I want to process a large Excel file *without* reading the entire thing into memory


Approach:  Use the SXSSFWorkbook and SXSSFSheet classes
           NOTE:  This library will ONLY work with XLSX files. The older XLS format is not capable of being streamed.




Procedure
---------
 1. Add this dependency to your pom.xml
		<dependency>
			<!-- Apache POI dependency (used to generate xlsx files) -->
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>4.1.2</version>
		</dependency>

		<dependency>
			<!-- StringUtils Dependency -->
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>
		</dependency>

		<dependency>
			<!-- Spring-JDBC -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>



 2. Create this method:  ExcelUtilities.createExcelFileWithRowSet() to create a *NEW* excel file
	a. Right-click on com.lessons -> new Package
	   Package Name:  utilities

	b. Right-click on com.lessons.utilities -> New Java Class
	   Class Name:  ExcelUtilities

	c. Copy this to your newly-created class

		import org.apache.commons.lang3.StringUtils;
		import org.apache.poi.ss.usermodel.Cell;
		import org.apache.poi.ss.usermodel.CellStyle;
		import org.apache.poi.ss.usermodel.Font;
		import org.apache.poi.ss.usermodel.Row;
		import org.apache.poi.xssf.streaming.SXSSFSheet;
		import org.apache.poi.xssf.streaming.SXSSFWorkbook;
		import org.apache.poi.xssf.usermodel.XSSFWorkbook;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.jdbc.support.rowset.SqlRowSet;
		import org.springframework.jdbc.support.rowset.SqlRowSetMetaData;

		import java.io.File;
		import java.io.FileInputStream;
		import java.io.FileOutputStream;

		public class ExcelUtilities {
			private static final Logger logger = LoggerFactory.getLogger(ExcelUtilities.class);


			public static void createExcelFileWithRowSet(SqlRowSet aSqlRowSet,
														 String aOutputFilePath,
														 String aSheetName,
														 boolean aAddColumnNames) throws Exception {
				logger.debug("createExcelFileWithRowSet() started  writing to file: {}", aOutputFilePath);

				// Creating a Streaming Workbook instance
				//        Keep 100 rows in memory.  The remaining rows will be written to disk
				//        + This does not increase or decreate the time it takes to generate the XLSX file
				//        + This reduces memory consumption
				SXSSFWorkbook streamingWorkBook = new SXSSFWorkbook(100);

				// Create the worksheet (within this excel workbook)
				SXSSFSheet sheet = streamingWorkBook.createSheet(aSheetName);

				// Get a fixed list of column names
				SqlRowSetMetaData sqlRowSetMetaData = aSqlRowSet.getMetaData();
				String[] columnNames = sqlRowSetMetaData.getColumnNames();

				// In Apache POI, the first row starts with row number of zero
				int currentRowNumber = 0;

				if (aAddColumnNames) {
					// Set the first row with column headers
					addHeaderRowToSheet(sheet, columnNames);
					currentRowNumber++;
				}

				// Loop through the remaining data, writing it one row at a time
				while (aSqlRowSet.next()) {

					// Create a row in this worksheet
					Row row = sheet.createRow(currentRowNumber);

					// Loop through each column in this row, adding it to the excel sheet
					for (int i=0; i<columnNames.length; i++) {
						String columnName = columnNames[i];
						String value = aSqlRowSet.getString(columnName);

						// Create the cell in this row
						Cell cell = row.createCell(i);
						cell.setCellValue(value);
					}

					currentRowNumber++;
				}

				// Write the remaining contents of the excel file to disk
				try (FileOutputStream outputStream = new FileOutputStream(aOutputFilePath)) {
					// Overwrite the existing file
					streamingWorkBook.write(outputStream);
				}

				// Dispose of the temporary file (used by the streaming workbook)
				streamingWorkBook.dispose();

				logger.debug("createExcelFileWithRowSet() finished writing to file: {}", aOutputFilePath);
			}



			private static void addHeaderRowToSheet(SXSSFSheet aSheet, String[] aColumnNames) {
				if (aSheet == null) {
					throw new RuntimeException("Critical error in addHeaderRowToSheet():  The passed-in aSheet is null");
				}

				// Create a row in this worksheet
				Row row = aSheet.createRow(0);

				CellStyle headerCellStyle = aSheet.getWorkbook().createCellStyle();
				Font font = aSheet.getWorkbook().createFont();
				font.setBold(true);
				font.setFontHeightInPoints((short) 11);
				headerCellStyle.setFont(font);

				// Loop through the column names, writing them to this row
				int i=0;
				for (String columnName: aColumnNames) {
					// Create a cell in this worksheet
					Cell cell = row.createCell(i);
					cell.setCellValue(columnName);
					cell.setCellStyle(headerCellStyle);   // Set this cell as bold

					// This is the width that fits most of the headers
					aSheet.setColumnWidth(i, 4500);
					i++;
				}
			}
		}



