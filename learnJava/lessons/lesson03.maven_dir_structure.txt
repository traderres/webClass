Java Lesson:  Learning Maven
----------------------------




Lesson:  Maven Directory Structure Explained
--------------------------------------------
pom.xml       Maven's pom which is always at the top-level of a project
              POM stands for Project Object Model.  It is the XML representation of the project.

LICENSE.txt   A license file is encouraged for easy identification by users and is optional
README.txt    A simple note which might help first time users and is optional

target/       Directory for all generated output.  This includes:
                 Compiled classes
                 Generated sources that may be compiled,
                 The generated site
                 Anything else that might be generated as part of your build


  target/generated-sources/<plugin-id>/  Standard location for generated sources.

  src/main/java/             Standard location for application sources
  src/main/resources/        Standard location for application resources -- e.g., logback.xml
  src/main/filters/          Standard location for resource filters
  src/main/assembly/         Standard location for assembly filters
  src/main/config/           Standard location for application configuration filters

  src/test/java/             Standard location for test sources
  src/test/resources/        Standard location for test resources -- e.g., logback.xml used by test classes
  src/test/filters/          Standard location for test resource filters


Life Cycle
----------
    validate - validate the project is correct and all necessary information is available
    compile  - compile the source code of the project
    test     - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
    package  - take the compiled code and package it in its distributable format, such as a JAR.
    verify   - run any checks on results of integration tests to ensure quality criteria are met
    install  - install the package into the local repository, for use as a dependency in other projects locally
    deploy   - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.


How to skip compiling and running tests
---------------------------------------
		-DskipTests        Telling maven to     compile the test code but *NOT* run the tests
		-Dmaven.test.skip  Telling maven to not compile the test code (and *NOT* run the tests as they are not compiled)

