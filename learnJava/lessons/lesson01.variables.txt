Java Lesson:  Learning Variables
--------------------------------
Java has primitives and objects
-- Objects can be null
-- Objects can hold objects
-- Primitives are a single value
-- Primitives cannot be null


Java Primitive Types
--------------------
There are 8 primitive types:
 short
 int
 long
 float
 double
 char
 byte
 boolean


Java Primitives vs Objects
--------------------------

	 1. Primitives are **NOT** objects.  They cannot be null
        Primitives always start with a lower case letter
        Primitive is one piece of data

		int
		long
		double
		char
		boolean
		byte




	int value = 5;
	char s = 'c';
	boolean isValid = true;




	2. Objects are everything else
		-- Start with capital letter
		-- They can be **NULL**
		String
		ReportDTO
		List<ReportDTO> that's an object

		ReportDTO dto = null;

		// Boolean object can be null, or hold true, or hold false
		Boolean isSomething = null;
		isSomething = true;
		isSomething = false;



		// Call new to create them
		String sql = new String("select ");  // Long syntax
		String sql = "select ";				 // Short syntax


		Integer integer = new Integer(5);   // Long syntax
		Integer integer = 5;                // Short syntax


	3. When you use new, you are calling the constructor

			ReportDTO dto = new ReportDTO();
			dto.setName("Jane Smith");


			dto = null;
			dto.setName("John");     // BLOWS UP!!!!!


			if (dto == null) {
				logger.debug("dto is really null");
			}
			else {
				logger.debug("dto is not null");
			}




	Objects have methods that you can call:

		String sql = "select 1";    // Allocates space for an object

		sql = sql.toUpperCase();    // This is fine



		sql = null;    // YOU CANNOT CALL METHODS on a NULL OBJECT

		sql = sql.toUpperCase();    // This throws a NullPointerExceptoin






























































	Exercise 1:  Create a string called sql that holds the word "select 1"
					String sql = "select 1";

					sql -----------> "select 1";         id=1280



	Exercise 2:  Change that string so it holds "select 2";

					sql ----------> "select 2";           id=1282


	Exercise 3:  Create a primitive int that holds 27


	Exercise 4:    sql = null;

				   sql ----------> null



	Exercise 5:
		Create a class called AddStuffDTO


	REST Endpoint that passes-in this large DTO with lots of fields

		AddStuffDTO

			private String title;			// Optional field
			private String firstName;		// Required fields
			private String lastName;		// Required fields


		if dto.getFirstName() == null


