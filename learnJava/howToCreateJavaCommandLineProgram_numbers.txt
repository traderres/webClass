How to create a Java Command-line Program using IntelliJ and Maven (numbers)
----------------------------------------------------------------------------


Assumptions:
 A) You have Intellij installed
 B) You have Maven installed



Procedures
----------
 1. Create your "addNumbers" Maven command-line project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project

    b. Press "Create New Project"
       1) In the "New Project" window,
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  /usr/lib/jvm/java-1.8.0-openjdk
                      -- Press OK

            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next

       2) In the next screen
	      Name:   		addNumbers
		  Location: 	~/intellijProjects/addNumbers

		  Under "Artifact Coordinates"
            GroupId:     com.lessons
            ArtifactId:  addNumbers
            Version:     1.0-SNAPSHOT

          Press Next


       3) In the next screen,
          Maven home directory:  /opt/apache-maven-3.3.9     (or where ever you installed Maven)
          User settings file:    /home/adam/.m2/settings.xml
          Press Finish

       4) Project Name:      addNumbers
          Project Location:  /home/adam/intellijProjects/addNumbers
          Press Finish


          Now, maven has created a simple Java JAR project



 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
       3) Single-click on Inspections
       4) On the right side, you should see Proofreading -> Typo
	      Uncheck "Typo"
		  Press OK



 3. Setup the Maven directories for your Intellij project
    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program

    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/
      src/main/resources/               # Holds logback.xml used by java main program
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code



 4. Add dependencies for your project

    Your pom.xml should already have one dependency:
      <dependencies>

        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.11</version>
          <scope>test</scope>
        </dependency>

      </dependencies>



    a. Copy and paste these dependencies into your pom.xml
       NOTE:  Add these 2 dependencies should be between the <dependencies>...</depdendencies> tags

         <dependency>
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-lang3</artifactId>
             <version>3.3.2</version>
         </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>


    b. Change the maven.compiler.source and target from 1.7 to 1.8

       <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <maven.compiler.source>1.8</maven.compiler.source>
         <maven.compiler.target>1.8</maven.compiler.target>
       </properties>


	c. Update your maven dependencies inside Intellij
	   Right-click on pom.xml -> Maven -> Reload Project



   When finished, your pom.xml should look something like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>addNumbers</artifactId>
		  <version>1.0-SNAPSHOT</version>

		  <name>addNumbers</name>
		  <!-- FIXME change it to the project's website -->
		  <url>http://www.example.com</url>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>

		  <dependencies>
			<dependency>
			  <groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>3.3.2</version>
			</dependency>

			<dependency>
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
			</dependency>

			<dependency>
			  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.11</version>
			  <scope>test</scope>
			</dependency>
		  </dependencies>

		  <build>
			<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			  <plugins>
				<!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
				  <artifactId>maven-clean-plugin</artifactId>
				  <version>3.1.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-compiler-plugin</artifactId>
				  <version>3.8.0</version>
				</plugin>
				<plugin>
				  <artifactId>maven-surefire-plugin</artifactId>
				  <version>2.22.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-jar-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.5.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-deploy-plugin</artifactId>
				  <version>2.8.2</version>
				</plugin>
				<!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
				  <artifactId>maven-site-plugin</artifactId>
				  <version>3.7.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-project-info-reports-plugin</artifactId>
				  <version>3.0.0</version>
				</plugin>
			  </plugins>
			</pluginManagement>

		  </build>
		</project>



 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on resources -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

         <?xml version="1.0" encoding="UTF-8" ?>

         <configuration debug="false">
             <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                 <encoder>
                     <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                 </encoder>
             </appender>

             <logger name="com.lessons" level="DEBUG" additivity="false">
                 <appender-ref ref="CONSOLE"/>
             </logger>

             <root level="INFO">
                 <appender-ref ref="CONSOLE"/>
             </root>

         </configuration>



 6. Add some loggers to the App class
    a. Edit src/main/java/com/lessons/App.java

	b. Replace its contents with this:
		package com.lessons;

		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;

		/**
		 * Hello world!
		 *
		 */
		public class App
		{
			private static final Logger logger = LoggerFactory.getLogger(App.class);

			public static void main( String[] args )
			{
				logger.debug("main() started.");

				logger.debug("main() finished.");
			}
		}


 7. Debug the App class
    a. Edit src/main/java/com/lessons/App.java
    b. Single-click in the margin next to the first logger (around line 16)
	   -- You should see a dot in intellij
	   -- This means that a breakpoint is here

	c. Debug the application for the first time by Right-clicking on App.java -> Debug 'App.main()'
	d. Press F8 to step over lines
	e. Press F9 to continue
	f. Click on the "Console" (in the "Debug") window
	   You should see this:
			Connected to the target VM, address: '127.0.0.1:35443', transport: 'socket'
			07/31/2020 16:38:51 DEBUG com.lessons.App main() started.
			07/31/2020 16:38:52 DEBUG com.lessons.App main() finished.
			Disconnected from the target VM, address: '127.0.0.1:35443', transport: 'socket'

       If you can see the logger calls, then your loggers are working




 6. Create your class:  AddStuff
    a. Right-click on src/main/java/com/lessons -> New Java Class
       Name:  AddStuff

    b. Change your class to this:

       package com.lessons;

       import org.slf4j.Logger;
       import org.slf4j.LoggerFactory;

       public class AddStuff
       {
           private static final Logger logger = LoggerFactory.getLogger(AddStuff.class);


           private int operand1;
           private int operand2;

           /**********************************************************
            * AddStuff()   **CONSTRUCTOR**
            *
            * Assumes that the strings are numeric
            ********************************************************** */
           public AddStuff(String aArg1, String aArg2)
           {
               logger.debug("AddStuff() constructor started.");

               this.operand1 = java.lang.Integer.parseInt(aArg1);
               this.operand2 = java.lang.Integer.parseInt(aArg2);
           }



           /**********************************************************
            * getSum()
            *
            * Add=up the numeric values and return the result
            ********************************************************** */
           public int getSum()
           {
               logger.debug("getSum() called.  Returns {}", this.operand1 + this.operand2);
               return(this.operand1 + this.operand2);
           }

       }


 7. Edit the App class  (this is your driver class)
    a. Edit src/main/java/com/lessons/App.java

    b. Replace the App class with this:

       package com.lessons;

       import org.apache.commons.lang3.StringUtils;
       import org.slf4j.Logger;
       import org.slf4j.LoggerFactory;

       public class App
       {
           private static final Logger logger = LoggerFactory.getLogger(App.class);


           /**********************************************************
            * main()
            *
            * Main program to access this class from the command-line
            ********************************************************** */
           public static void main(String[] args)
           {
               logger.debug("main() started");

               // Verify the command line arguments
               verifyCommandLineArgs(args);

               String arg1 = args[0];
               String arg2 = args[1];

               // Create a new instance (or copy) of the AddStuff class
               AddStuff a = new AddStuff(arg1, arg2);

               // Calculate the sum
               int sum = a.getSum();

               logger.debug("sum={}", sum);
               System.out.println(arg1 +  "+" + arg2 + "=" + sum);


               logger.debug("main() finished.");
           }


           /**********************************************************
            * verifyCommandLineArgs()
            *
            * Verify that the args are valid
            * Verify that only 2 args were provided
            ********************************************************** */
           private static void verifyCommandLineArgs(String[] args)
           {
               if (args.length != 2)
               {
                   // The user did not provide the two arguments
                   throw new RuntimeException("You did not provide exactly 2 arguments");
               }

               String arg1 = args[0];
               String arg2 = args[1];

               if (StringUtils.isNumeric(arg1) == false)
               {
                   throw new RuntimeException("Your 1st argument of " + arg1 + " is not numeric.  It must be a number.");
               }
               else if (StringUtils.isNumeric(arg2) == false)
               {
                   throw new RuntimeException("Your 2nd argument of " + arg2 + " is not numeric.  It must be a number.");
               }
           }

       }


 NOTE:  If you have not imported your Maven dependencies, then do so:
          Right click on your pom.xml -> Maven -> Reload Project



 8. Activate your debugger -- to step through your App.main()
    a. Set a breakpoint or or near line 20 of your App.main by clicking in the margin
       NOTE:  your breakpoint should be on this line:  logger.debug("main() started");

    b. Pull Run -> Debug 'App'
	   -- Your code should run up to your breakpoint


    c. Press F9 to continue the program and you should see this in your Console:
          Exception in thread "main" java.lang.RuntimeException: You did not provide exactly 2 arguments
             at com.lessons.App.verifyCommandLineArgs(App.java:52)
             at com.lessons.App.main(App.java:22)


    d. Let's tell your debugger to add 2 arguments
       1) Pull Run / Edit Configurations...
       2) Single-click on App  (on the left)
       3) On the right side
          a) In the big "Program Arguments" box, type-in this:
               10 25
          b) Press OK

          Now, your debugger will pass-in 2 arguments to your main


     e. Pull Run / Debug 'App'
        You should see this:

        10/14/2019 17:49:20 DEBUG com.lessons.App main() started
        10/14/2019 17:49:20 DEBUG com.lessons.AddStuff AddStuff() constructor started.
        10/14/2019 17:49:20 DEBUG com.lessons.AddStuff getSum() called.  Returns 35
        10/14/2019 17:49:20 DEBUG com.lessons.App sum=35
        10+25=35
        10/14/2019 17:49:20 DEBUG com.lessons.App main() finished.




 9. Create a Java JAR
     a. Update your pom.xml to tell Maven to rename your java JAR that has *all* of the dependencies
        Edit your pom.xml

        Add the following text so that appears **AFTER** the <pluginManagement>...</pluginManagement> section
                                and it appears **BEFORE** the closing </build>
             <plugins>
                 <plugin>
                     <artifactId>maven-compiler-plugin</artifactId>
                     <version>3.1</version>
                     <configuration>
                         <source>1.8</source>
                         <target>1.8</target>
                     </configuration>
                 </plugin>

                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-jar-plugin</artifactId>
                     <version>2.3.2</version>
                     <configuration>
                         <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                         <finalName>addNumbers</finalName>
                     </configuration>
                 </plugin>

                 <plugin>
                     <artifactId>maven-assembly-plugin</artifactId>

                     <configuration>
                         <descriptorRefs>
                             <descriptorRef>jar-with-dependencies</descriptorRef>
                         </descriptorRefs>

                         <archive>
                             <manifest>
                                 <addClasspath>true</addClasspath>
                             </manifest>
                         </archive>
                     </configuration>

                     <executions>
                         <execution>
                             <id>make-assembly</id>
                             <phase>package</phase>
                             <goals>
                                 <goal>single</goal>
                             </goals>
                             <configuration>
                                 <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                                 <appendAssemblyId>false</appendAssemblyId>
                                 <finalName>addNumbersUber</finalName>
                             </configuration>
                         </execution>
                     </executions>
                 </plugin>

             </plugins>

       When you're done, the pom.xml should look something like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>addNumbers</artifactId>
		  <version>1.0-SNAPSHOT</version>

		  <name>addNumbers</name>
		  <!-- FIXME change it to the project's website -->
		  <url>http://www.example.com</url>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>

		  <dependencies>
			<dependency>
			  <groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>3.3.2</version>
			</dependency>

			<dependency>
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
			</dependency>

			<dependency>
			  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.11</version>
			  <scope>test</scope>
			</dependency>
		  </dependencies>

		  <build>
			<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			  <plugins>
				<!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
				  <artifactId>maven-clean-plugin</artifactId>
				  <version>3.1.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-compiler-plugin</artifactId>
				  <version>3.8.0</version>
				</plugin>
				<plugin>
				  <artifactId>maven-surefire-plugin</artifactId>
				  <version>2.22.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-jar-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.5.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-deploy-plugin</artifactId>
				  <version>2.8.2</version>
				</plugin>
				<!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
				  <artifactId>maven-site-plugin</artifactId>
				  <version>3.7.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-project-info-reports-plugin</artifactId>
				  <version>3.0.0</version>
				</plugin>
			  </plugins>
			</pluginManagement>

			<plugins>
			  <plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
				  <source>1.8</source>
				  <target>1.8</target>
				</configuration>
			  </plugin>

			  <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
				  <!-- Set the name of the generated Java JAR filename *without* dependencies -->
				  <finalName>addNumbers</finalName>
				</configuration>
			  </plugin>

			  <plugin>
				<artifactId>maven-assembly-plugin</artifactId>

				<configuration>
				  <descriptorRefs>
					<descriptorRef>jar-with-dependencies</descriptorRef>
				  </descriptorRefs>

				  <archive>
					<manifest>
					  <addClasspath>true</addClasspath>
					</manifest>
				  </archive>
				</configuration>

				<executions>
				  <execution>
					<id>make-assembly</id>
					<phase>package</phase>
					<goals>
					  <goal>single</goal>
					</goals>
					<configuration>
					  <!-- Set the name of the generated Java JAR filename *with* dependencies -->
					  <appendAssemblyId>false</appendAssemblyId>
					  <finalName>addNumbersUber</finalName>
					</configuration>
				  </execution>
				</executions>
			  </plugin>

			</plugins>
		  </build>
		</project>


    b. Build your Java JAR by running mvn package
       unix> cd ~/intellijProjects/addNumbers
       unix> mvn clean package

    c. List the contents of ~/intellijProjects/addNumbers/target
	   unix> ls -l target

	   You should see this:
		-rw-rw-r--. 1 adam adam    4844 Jul 31 17:05 addNumbers.jar              <-- Smaller JAR (not useful)
		-rw-rw-r--. 1 adam adam 1204065 Jul 31 17:05 addNumbersUber.jar          <-- Uber JAR    (really useful)
		drwxrwxr-x. 2 adam adam       6 Jul 31 17:05 archive-tmp/
		drwxrwxr-x. 3 adam adam      36 Jul 31 17:05 classes/
		drwxrwxr-x. 3 adam adam      25 Jul 31 17:05 generated-sources/
		drwxrwxr-x. 3 adam adam      30 Jul 31 17:05 generated-test-sources/
		drwxrwxr-x. 2 adam adam      28 Jul 31 17:05 maven-archiver/
		drwxrwxr-x. 3 adam adam      35 Jul 31 17:05 maven-status/
		drwxrwxr-x. 2 adam adam      73 Jul 31 17:05 surefire-reports/
		drwxrwxr-x. 3 adam adam      17 Jul 31 17:05 test-classes/


        NOTE:  The addNumbersUber.jar has *ALL* of its dependencies so we can run it



10. Run your Java JAR from the command-line  (using java -cp)
    unix> cd ~/intellijProjects/addNumbers
    unix> java -cp ./target/addNumbersUber.jar com.lessons.App 15 25

       You should see this:
       10/14/2019 17:52:10 DEBUG com.lessons.App main() started
       10/14/2019 17:52:10 DEBUG com.lessons.AddStuff AddStuff() constructor started.
       10/14/2019 17:52:10 DEBUG com.lessons.AddStuff getSum() called.  Returns 40
       10/14/2019 17:52:10 DEBUG com.lessons.App sum=40
       15+25=40
       10/14/2019 17:52:10 DEBUG com.lessons.App main() finished.



11. Reduce logging in com.lessons from DEBUG to WARN, rebuild, and re-run
    a. Browse your src/main/resources/logback.xml
       You should see this:

            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

    b. Change the logging to show WARN and higher
            <logger name="com.lessons" level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

    c. Rebuild your java JAR
       unix> cd ~/intellijProjects/addNumbers
       unix> mvn clean package


    d. Run your Java JAR from the command-line  (using java -cp)
       DOS> java -cp ./target/addNumbersUber.jar com.lessons.App 15 25

       You should see this:
       15+25=40



12. Change your Java JAR so that it is "executable" JAR

    a. Go to your pom.xml

    b. Look at your maven-assembly-plugin.  It should look like this:
          <plugin>
           <artifactId>maven-assembly-plugin</artifactId>

           <configuration>
             <descriptorRefs>
               <descriptorRef>jar-with-dependencies</descriptorRef>
             </descriptorRefs>

             <archive>
               <manifest>
                 <addClasspath>true</addClasspath>
               </manifest>
             </archive>
           </configuration>

           <executions>
             <execution>
               <id>make-assembly</id>
               <phase>package</phase>
               <goals>
                 <goal>single</goal>
               </goals>
               <configuration>
                 <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                 <appendAssemblyId>false</appendAssemblyId>
                 <finalName>addNumbersUber</finalName>
               </configuration>
             </execution>
           </executions>
         </plugin>

     c. Add this one line to the <manifest>...</manifest> section:

	       <mainClass>com.lessons.App</mainClass>


		When done, the manifest section should look like this:

            <manifest>
              <mainClass>com.lessons.App</mainClass>
              <addClasspath>true</addClasspath>
            </manifest>


    d. Rebuild your java JAR
       unix> cd ~/intellijProjects/addNumbers
       unix> mvn clean package

    e. Run your executable java JAR (using java -jar)
       unix> java -jar ./target/addNumbersUber.jar 15 25

       You should see this:
       15+25=40


13. Examine the manifest of your JAR
    a. On Windows, rename your .jar to .zip, unzip it, and open-up the META-INF/MANIFEST.MF
	   On Unix:    unzip -q -c ./target/addNumbersUber.jar META-INF/MANIFEST.MF   # Unzip this file to the console

	   You should see this:
			Manifest-Version: 1.0
			Archiver-Version: Plexus Archiver
			Created-By: Apache Maven
			Built-By: adam
			Build-Jdk: 1.8.0_252
			Main-Class: com.lessons.App             <-- This tells the java -jar command which main to run



14. Override the logback.xml (within your addNumbersUber.jar)
    a. Create this file:  /tmp/override.logback.xml
	   unix> vi /tmp/override.logback.xml

			<?xml version="1.0" encoding="UTF-8" ?>
			<!DOCTYPE project>

			<configuration debug="false">
				<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
					<encoder>
						<pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
					</encoder>
				</appender>


				<logger name="org.springframework" level="DEBUG" additivity="false">
					<appender-ref ref="CONSOLE"/>
				</logger>

				<logger name="com.lessons" level="DEBUG" additivity="false">
					<appender-ref ref="CONSOLE"/>
				</logger>

				<root level="DEBUG">
					<appender-ref ref="CONSOLE"/>
				</root>
			</configuration>


	 b. Run your Java JAR  (uses the logback.xml from your src/main/resources/logback.xml)
	    unix> cd ~/intellijProjects/addNumbers
		unix> mvn clean package
		uinx> java -jar ./target/addNumbersUber.jar  15 25

        You should see this:
			15+25=40


     c. Run your Java JAR  (using the /tmp/override.logback.xml)
	    unix> java -Dlogback.configurationFile=/tmp/override.logback.xml  -jar ./target/addNumbersUber.jar  15 25

        You should see this:
			08/03/2020 14:26:16 DEBUG com.lessons.App main() started
			08/03/2020 14:26:16 DEBUG com.lessons.AddStuff AddStuff() constructor started.
			08/03/2020 14:26:16 DEBUG com.lessons.AddStuff getSum() called.  Returns 40
			08/03/2020 14:26:16 DEBUG com.lessons.App sum=40
			15+25=40
			08/03/2020 14:26:16 DEBUG com.lessons.App main() finished.


