How to Create a Java Command Line Program to Query a Postgres Database
-----------------------------------------------------------------------
Assumptions:
 A) You have Intellij installed
 B) You have Maven installed
 C) You have a Postgres database you can talk to
 D) You have Postgres database credentials


NOTE:  If you are running Windows,
       then replace
              /home/adam/    -->     c:\users\<YOUR USERNAME>\


Assumptions
-----------
 A) You have created this postgres database and user

    a. Create a postgres database and postgres user account
	   unix> psql -U postgres -h localhost
	   password:  secret

		  create database app1_db;
		  create user app1_db with password 'secret';
		  grant all privileges on database app2_db to app1_user;
		  alter database app1_db     SET search_path=app1_db;
		  alter role     app1_user   SET search_path=app1_db;
		  \q


	b. Create the app2_db schema, reports table the reports table with data
	   unix> psql -U app2_user -d app2_db -h localhost
	   password:  secret

		  create schema app1_db;
	      \q;




Procedures
----------
 1. Create your "postgresReport" Maven command-line project in Intellij
    a. Startup Intellij
       NOTE:  IF an existing Intellij project appear, then pull File / Close Project

    b. Press "Create New Project"
       1) In the "New Project" window,
            a) Select Maven [on the left]
            b) Next to Project SDK:  Select your Java JDK
               NOTE:  If you do not see your java JDK, then
                      Press New
                      -- Browse to your Java JDK:  /usr/lib/jvm/java-1.8.0-openjdk
                      -- Press OK

            c) Check "Create from archetype"
            d) Select maven-archetype-quickstart
               Press Next

       2) In the next screen
	      Name:   		postgresReport
		  Location: 	~/intellijProjects/postgresReport

		  Under "Artifact Coordinates"
            GroupId:     com.lessons
            ArtifactId:  postgresReport
            Version:     1.0-SNAPSHOT

          Press Next


       3) In the next screen, make sure you're using your Maven (not the bundled one)
          Maven home directory:  /opt/apache-maven-3.3.9
          User settings file:    /home/adam/.m2/settings.xml
                                 /home/adam/.m2/repository
          Press Finish


          Now, maven has created a simple Java JAR project


 2. Configure Intellij preferences for this project
    a. Turn off spell-checking
       1) Pull File / Settings
       2) Search for spelling
       3) Single-click on Inspections
       4) On the right side, you should see Proofreading -> Typo
	      Uncheck "Typo"
		  Press OK



 3. Setup the Maven test directories for your Intellij project

    Add these directories
       src/test/resources/             # Holds the logback.xml used by unit test code
       src/main/resources/             # Holds the logback.xml used by main program


    a. Right-click on src/test   -> New -> Directory:    resources
    b. Right-click on src/main   -> New -> Directory:    resources


    Now, you should have this directory structure
      src/main/java/
      src/main/resources/               # Holds logback.xml used by java main program
      src/test/java
      src/test/resources/               # Holds logback.xml used by unit test code




 4. Add dependencies for your project
    Your pom.xml should already have one dependency:
      <dependencies>

        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.11</version>
          <scope>test</scope>
        </dependency>

      </dependencies>



    a. Copy and paste these dependencies into your pom.xml
       NOTE:  Add all of these dependencies should be between these tags:
        <dependencies>
         . . .
         </dependencies>


       <dependency>
          <!-- Logback Classic -->
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
          <version>1.2.3</version>
        </dependency>

        <dependency>
          <!-- Spring-JDBC -->
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>5.0.3.RELEASE</version>
        </dependency>

        <dependency>
          <!-- Postgres Database Driver -->
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>42.2.6</version>
        </dependency>

        <dependency>
          <!-- StringUtils Dependency -->
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-lang3</artifactId>
          <version>3.5</version>
        </dependency>



    b. Reimport maven dependencies
       Right-click on pom.xml -> Maven -> Reload project



 5. Create this file:  logback.xml
    a. Browse to src/main/resources
    b. Right-click on classes -> New -> File
       filename:  logback.xml
    c. Copy this contents to your logback.xml file
       WARNING:  You *CANNOT* have leading spaces before <?xml version="1.0"... ?>

        <?xml version="1.0" encoding="UTF-8" ?>

        <configuration debug="false">
            <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d{MM/dd/yyyy HH:mm:ss} %-5level %c %m%n</pattern>
                </encoder>
            </appender>

            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <logger name="org.springframework" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

            <root level="DEBUG">
                <appender-ref ref="CONSOLE"/>
            </root>

        </configuration>





 6. Create a class:  PostgresReport
    a. Right-click on /src/main/java/com/lessons -> New Class
       Name:  PostgresReport

       You should see something like this:

           package com.lessons;

           public class PostgresReport {

           }


    b. Change your class to this:

		package com.lessons;

		import org.apache.commons.lang3.StringUtils;
		import org.slf4j.Logger;
		import org.slf4j.LoggerFactory;
		import org.springframework.jdbc.core.JdbcTemplate;
		import org.springframework.jdbc.datasource.SingleConnectionDataSource;
		import org.springframework.jdbc.support.rowset.SqlRowSet;
		import org.springframework.jdbc.support.rowset.SqlRowSetMetaData;

		import javax.sql.DataSource;
		import java.io.*;
		import java.util.Properties;

		public class PostgresReport {

			private static final Logger logger = LoggerFactory.getLogger(PostgresReport.class);

			private DataSource dataSource;


			public static void main( String[] args ) throws Exception {
				Long startTime = System.currentTimeMillis();
				logger.debug("main() started");

				if (args.length != 1) {
					System.out.println("USAGE:  java -cp /path/to/PostgresReport.jar com.lessons.PostgresReport  /path/to/postgresReport.properties\nThe first argument is missing.  The first argument should be a property file.");
					System.exit(1);
				}
				String propertyFilePath = args[0];

				// Get the data source
				DataSource dataSource = buildDataSourceUsingPropertyFile(propertyFilePath);

				// Pass-in the data source and run the report
				PostgresReport PostgresReport = new PostgresReport(dataSource);
				PostgresReport.runReport();

				Long endTime = System.currentTimeMillis();
				long totalSeconds = (endTime - startTime) / 1000;
				logger.debug("main() finished after {} seconds.", totalSeconds);
			}



			/**
			 * Read the property file
			 * Pull out url, username, password, schema
			 * Create a data source
			 * @param aPropertyFilePath path of hte property file
			 * @return DataSource object
			 */
			private static DataSource buildDataSourceUsingPropertyFile(String aPropertyFilePath) throws IOException {

				// Read the file into the props object
				Properties props = new Properties();
				try (InputStream inputStream = new FileInputStream(aPropertyFilePath)) {
					// Read the file and automatically close it as soon as we leave this try block
					props.load(inputStream);
				}

				if ( (! props.containsKey("url")) || (! props.containsKey("username")) || (! props.containsKey("password")) || (! props.containsKey("schema"))) {
					// Some of the required properties are missing
					throw new RuntimeException("I found the property file here: " + aPropertyFilePath + " but some of the required fields are missing.  It must have username, password, url, and schema.");
				}

				// Pull the url, username, password, and schema from the props object
				String url =      props.getProperty("url");
				String username = props.getProperty("username");
				String password = props.getProperty("password");
				String schema   = props.getProperty("schema");

				// Create the Data Source
				SingleConnectionDataSource sdds = new SingleConnectionDataSource();
				sdds.setUsername(username);
				sdds.setPassword(password);
				sdds.setSchema(schema);
				sdds.setUrl(url);

				// Run a real SQL query (to verify that the DataSource works)
				String sql = "select now()";
				JdbcTemplate jt = new JdbcTemplate(sdds);
				String currentDate = jt.queryForObject(sql, String.class);
				logger.debug("Current database time is {}", currentDate);

				return sdds;
			}


			public PostgresReport(DataSource aDataSource) {
				this.dataSource = aDataSource;
			}



			/**
			 * Helper method to write the SqlRowSet to a flatfile
			 * @param aSqlRowSet
			 * @param aOutputFilePath
			 * @param aSeparator
			 * @param aAddColumnNames
			 * @throws Exception
			 */
			private void sendRowSetToFile(SqlRowSet aSqlRowSet,
										  String aOutputFilePath,
										  String aSeparator,
										  boolean aAddColumnNames) throws Exception {
				logger.info("Starting to write to file: {}  separator={}", aOutputFilePath, aSeparator);

				// **OVERWRITE** this file for writing
				File outputFile = new File(aOutputFilePath);

				try (FileWriter fw = new FileWriter(outputFile) ) {
					SqlRowSetMetaData sqlRowSetMetaData = aSqlRowSet.getMetaData();

					// Get a fixed list of column names
					String[] columnNames = sqlRowSetMetaData.getColumnNames();

					if (aAddColumnNames) {
						// Add column names
						String columnNamesCsv = StringUtils.join(columnNames, aSeparator);
						fw.append(columnNamesCsv);
						fw.append("\n");
					}

					// Loop through each row
					while (aSqlRowSet.next()) {

						// Loop through each column
						for (int i=0; i<columnNames.length; i++) {
							String columnName = columnNames[i];
							String value = aSqlRowSet.getString(columnName);
							fw.append(value);

							if (i < (columnNames.length - 1 )) {
								fw.append(aSeparator);
							}
						}

						fw.append("\n");
					}

					logger.info("Finished writing to file:  {}  separator={}", aOutputFilePath, aSeparator);
				}
			}


			private void runReport() throws Exception {
				logger.debug("runReport() started");

				// Construct the SQL for report 1
				String sql = "select now() as \"Right Now\", now() - interval '1 day' as \"Yesterday\", now() - interval '7 days' as \"1 Week Ago\"";

				// Get a connection from the data source, execute the SQL, get a read-only SqlRowSet, and return the connection to the pool
				JdbcTemplate jt = new JdbcTemplate(this.dataSource);
				SqlRowSet rs = jt.queryForRowSet(sql);

				// Send the info in the SqlRowSet to a file
				String outputFilePath = "/tmp/output.txt";
				boolean addColumnNames = true;
				sendRowSetToFile(rs, outputFilePath, ",", addColumnNames);

				logger.debug("runReport() finished successfully.");
			}


		}




 7. Create a property file with database credentials
    unix> vi /tmp/postgresReport.properties

        #
        # reports properties file
        #
        url=jdbc:postgresql://localhost:5432/app1_db
        username=app1_user
        password=secret
        schema=app1_db



 8. Setup your debugger
    a. Set a breakpoint near line 19 in your PostgresReport.main() by clicking in the margin
       NOTE:  This line should have this line of code in it:
                 logger.debug("main() started");

    b. Browse to src/main/java/com/lessons/PostgresReport -> Right-Click -> Debug 'PostgresReport.main()'
       You should see this:
	   13:59:38.659 [main] DEBUG com.lessons.PostgresReport - main() started
Exception in thread "main" java.lang.RuntimeException: Critical error in main():  The first argument is missing.  The first argument should be a property file.
	at com.lessons.PostgresReport.main(PostgresReport.java:28)



    c. Add the property file as the first argument
       Pull Run -> Edit Configurations
          Program arguments:  /tmp/postgresReport.properties

    d. Pull Run -> Debug 'PostgresReport'
	   You should see this:
		08/01/2020 15:58:53 DEBUG com.lessons.PostgresReport main() started
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.core.JdbcTemplate Executing SQL query [select now()]
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Fetching JDBC Connection from DataSource
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.datasource.SingleConnectionDataSource Creating new JDBC DriverManager Connection to [jdbc:postgresql://localhost:5432/app1_db]
		08/01/2020 15:58:53 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Established shared JDBC Connection: org.postgresql.jdbc.PgConnection@6e06451e
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Returning JDBC Connection to DataSource
		08/01/2020 15:58:53 DEBUG com.lessons.PostgresReport Current database time is 2020-08-01 15:58:53.471652-04
		08/01/2020 15:58:53 DEBUG com.lessons.PostgresReport runReport() started
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.core.JdbcTemplate Executing SQL query [select now() as "Right Now", now() - interval '1 day' as "Yesterday", now() - interval '7 days' as "1 Week Ago"]
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Fetching JDBC Connection from DataSource
		08/01/2020 15:58:53 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Returning JDBC Connection to DataSource
		08/01/2020 15:58:53 INFO  com.lessons.PostgresReport Starting to write to file: /tmp/output.txt  separator=,
		08/01/2020 15:58:53 INFO  com.lessons.PostgresReport Finished writing to file:  /tmp/output.txt  separator=,
		08/01/2020 15:58:53 DEBUG com.lessons.PostgresReport runReport() finished successfully.
		08/01/2020 15:58:53 DEBUG com.lessons.PostgresReport main() finished after 0 seconds.




 9. Create a Java JAR
    a. Update your pom.xml to tell Maven to rename your java JAR that has *all* of the dependencies
       Edit your pom.xml

       Add the following text so that appears **AFTER* the <pluginManagement>...</pluginManagement> section
                               but it appears **BEFORE** the closing </build>

            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.2</version>
                    <configuration>
                        <!-- Set the name of the generated Java JAR filename *without* dependencies -->
                        <finalName>PostgresReport</finalName>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>

                    <configuration>
                        <descriptorRefs>
                            <descriptorRef>jar-with-dependencies</descriptorRef>
                        </descriptorRefs>

                        <archive>
                            <manifest>
                                <addClasspath>true</addClasspath>
                            </manifest>
                        </archive>
                    </configuration>

                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                            <configuration>
                                <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                                <appendAssemblyId>false</appendAssemblyId>
                                <finalName>UberPostgresReport</finalName>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

            </plugins>

    b. Remove the <url> tag
		<!-- FIXME change it to the project's website -->
		<url>http://www.example.com</url>

    c. Set the maven.compiler.source to 1.8  (in the <properties>...</properties> section)
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>


    Now, your pom.xml should look like this:
		<?xml version="1.0" encoding="UTF-8"?>

		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		  <modelVersion>4.0.0</modelVersion>

		  <groupId>com.lessons</groupId>
		  <artifactId>postgresReport</artifactId>
		  <version>1.0-SNAPSHOT</version>

		  <name>postgresReport</name>

		  <properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<maven.compiler.source>1.8</maven.compiler.source>
			<maven.compiler.target>1.8</maven.compiler.target>
		  </properties>

		  <dependencies>

			<dependency>
			  <!-- Logback Classic -->
			  <groupId>ch.qos.logback</groupId>
			  <artifactId>logback-classic</artifactId>
			  <version>1.2.3</version>
			</dependency>

			<dependency>
			  <!-- Spring-JDBC -->
			  <groupId>org.springframework</groupId>
			  <artifactId>spring-jdbc</artifactId>
			  <version>5.0.3.RELEASE</version>
			</dependency>

			<dependency>
			  <!-- Postgres Database Driver -->
			  <groupId>org.postgresql</groupId>
			  <artifactId>postgresql</artifactId>
			  <version>42.2.6</version>
			</dependency>

			<dependency>
			  <!-- StringUtils Dependency -->
			  <groupId>org.apache.commons</groupId>
			  <artifactId>commons-lang3</artifactId>
			  <version>3.5</version>
			</dependency>


			<dependency>
			  <groupId>junit</groupId>
			  <artifactId>junit</artifactId>
			  <version>4.11</version>
			  <scope>test</scope>
			</dependency>
		  </dependencies>

		  <build>
			<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
			  <plugins>
				<!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
				<plugin>
				  <artifactId>maven-clean-plugin</artifactId>
				  <version>3.1.0</version>
				</plugin>
				<!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
				<plugin>
				  <artifactId>maven-resources-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-compiler-plugin</artifactId>
				  <version>3.8.0</version>
				</plugin>
				<plugin>
				  <artifactId>maven-surefire-plugin</artifactId>
				  <version>2.22.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-jar-plugin</artifactId>
				  <version>3.0.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.5.2</version>
				</plugin>
				<plugin>
				  <artifactId>maven-deploy-plugin</artifactId>
				  <version>2.8.2</version>
				</plugin>
				<!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
				<plugin>
				  <artifactId>maven-site-plugin</artifactId>
				  <version>3.7.1</version>
				</plugin>
				<plugin>
				  <artifactId>maven-project-info-reports-plugin</artifactId>
				  <version>3.0.0</version>
				</plugin>
			  </plugins>
			</pluginManagement>

			<plugins>
			  <plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
				  <source>1.8</source>
				  <target>1.8</target>
				</configuration>
			  </plugin>

			  <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
				  <!-- Set the name of the generated Java JAR filename *without* dependencies -->
				  <finalName>PostgresReport</finalName>
				</configuration>
			  </plugin>

			  <plugin>
				<artifactId>maven-assembly-plugin</artifactId>

				<configuration>
				  <descriptorRefs>
					<descriptorRef>jar-with-dependencies</descriptorRef>
				  </descriptorRefs>

				  <archive>
					<manifest>
					  <addClasspath>true</addClasspath>
					</manifest>
				  </archive>
				</configuration>

				<executions>
				  <execution>
					<id>make-assembly</id>
					<phase>package</phase>
					<goals>
					  <goal>single</goal>
					</goals>
					<configuration>
					  <!-- Set the name of the generated Java JAR filename *with* dependencies -->
					  <appendAssemblyId>false</appendAssemblyId>
					  <finalName>UberPostgresReport</finalName>
					</configuration>
				  </execution>
				</executions>
			  </plugin>

			</plugins>
		  </build>
		</project>




    d. Build your Java JAR by running mvn package
       1) Open a Terminal
       2) In the terminal, type-in this:
          unix> cd ~/intellijProjects/postgresReport
          unix> mvn clean package

       3) Verify that you can see the Java JARs
          unix> ls -l ./target

            drwxrwxr-x. 2 adam adam       6 Jul 16 19:49 archive-tmp/
            drwxrwxr-x. 3 adam adam      36 Jul 16 19:49 classes/
            drwxrwxr-x. 3 adam adam      25 Jul 16 19:49 generated-sources/
            drwxrwxr-x. 3 adam adam      30 Jul 16 19:49 generated-test-sources/
            drwxrwxr-x. 2 adam adam      28 Jul 16 19:49 maven-archiver/
            drwxrwxr-x. 3 adam adam      35 Jul 16 19:49 maven-status/
            -rw-rw-r--. 1 adam adam    4560 Jul 16 19:49 PostgresReports.jar            <--- Smaller JAR
            drwxrwxr-x. 2 adam adam      73 Jul 16 19:49 surefire-reports/
            drwxrwxr-x. 3 adam adam      17 Jul 16 19:49 test-classes/
            -rw-rw-r--. 1 adam adam 4148318 Jul 16 19:49 UberPostgresReport.jar        <--- Larger JAR


          NOTE:  The UberPostgresReport.jar has all of its dependencies.  It only needs a java JRE to run it




10. Run your Java JAR from the command-line  (using the java -cp technique)
    a. Open a DOS window by pressing <Start><Run>CMD
    b. In the DOS window, type-in this:
       DOS> cd ~/intellijProjects/reports
       DOS> java -cp ./target/UberPostgresReport.jar com.lessons.PostgresReport  /tmp/postgresReport.properties


       You should see this:
		08/01/2020 15:58:31 DEBUG com.lessons.PostgresReport main() started
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.core.JdbcTemplate Executing SQL query [select now()]
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Fetching JDBC Connection from DataSource
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.datasource.SingleConnectionDataSource Creating new JDBC DriverManager Connection to [jdbc:postgresql://localhost:5432/app1_db]
		08/01/2020 15:58:31 INFO  org.springframework.jdbc.datasource.SingleConnectionDataSource Established shared JDBC Connection: org.postgresql.jdbc.PgConnection@4667ae56
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Returning JDBC Connection to DataSource
		08/01/2020 15:58:31 DEBUG com.lessons.PostgresReport Current database time is 2020-08-01 15:58:31.441924-04
		08/01/2020 15:58:31 DEBUG com.lessons.PostgresReport runReport() started
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.core.JdbcTemplate Executing SQL query [select now() as "Right Now", now() - interval '1 day' as "Yesterday", now() - interval '7 days' as "1 Week Ago"]
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Fetching JDBC Connection from DataSource
		08/01/2020 15:58:31 DEBUG org.springframework.jdbc.datasource.DataSourceUtils Returning JDBC Connection to DataSource
		08/01/2020 15:58:31 INFO  com.lessons.PostgresReport Starting to write to file: /tmp/output.txt  separator=,
		08/01/2020 15:58:31 INFO  com.lessons.PostgresReport Finished writing to file:  /tmp/output.txt  separator=,
		08/01/2020 15:58:31 DEBUG com.lessons.PostgresReport runReport() finished successfully.
		08/01/2020 15:58:31 DEBUG com.lessons.PostgresReport main() finished after 0 seconds.





11. Reduce the spring-jdbc and your own package's logging
    a. Browse your src/main/resources/logback.xml

       You should see this:
            <logger name="com.lessons" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
            <logger name="org.springframework" level="DEBUG" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>


       Change it to this
            <logger name="com.lessons" level="INFO" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>
            <logger name="org.springframework" level="WARN" additivity="false">
                <appender-ref ref="CONSOLE"/>
            </logger>

    b. Rebuild your java JAR
       unix> cd ~/intellijProjects/reports
       unix> mvn clean package

    c. Run your Java JAR from the command-line  (using the java -cp technique)
       unix> java -cp ./target/UberPostgresReport.jar com.lessons.PostgresReport  /tmp/postgresReport.properties

       You should see this:
		08/01/2020 16:00:47 INFO  com.lessons.PostgresReport Starting to write to file: /tmp/output.txt  separator=,
		08/01/2020 16:00:47 INFO  com.lessons.PostgresReport Finished writing to file:  /tmp/output.txt  separator=,



12. Change your Java JAR so that it is "executable" JAR
    a. Go to your pom.xml

    b. Look at your maven-assembly-plugin.  It should look like this:
        <plugin>
          <artifactId>maven-assembly-plugin</artifactId>

          <configuration>
            <descriptorRefs>
              <descriptorRef>jar-with-dependencies</descriptorRef>
            </descriptorRefs>

            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
              </manifest>
            </archive>
          </configuration>

          <executions>
            <execution>
              <id>make-assembly</id>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
              <configuration>
                <!-- Set the name of the generated Java JAR filename *with* dependencies -->
                <appendAssemblyId>false</appendAssemblyId>
                <finalName>UberPostgresReport</finalName>
              </configuration>
            </execution>
          </executions>
        </plugin>


     c. Add this one line to the <manifest>...</manifest> section:
	       <mainClass>com.lessons.PostgresReport</mainClass>


		When done, the manifest section should look like this:

            <manifest>
              <mainClass>com.lessons.PostgresReport</mainClass>
              <addClasspath>true</addClasspath>
            </manifest>


    d. Rebuild your java JAR
       unix> cd ~/intellijProjects/reports
       unix> mvn clean package

    e. Run your executable java JAR  (using the java -jar technique)
       unix> java -jar ./target/UberPostgresReport.jar  /tmp/postgresReport.properties

	   You should see this:
		08/01/2020 16:05:17 INFO  com.lessons.PostgresReport Starting to write to file: /tmp/output.txt  separator=,
		08/01/2020 16:05:17 INFO  com.lessons.PostgresReport Finished writing to file:  /tmp/output.txt  separator=,




 13. Examine the manifest of your JAR
    a. On Windows, rename your .jar to .zip, unzip it, and open-up the META-INF/MANIFEST.MF
	   On Unix:    unzip -q -c ./target/UberPostgresReport.jar META-INF/MANIFEST.MF   # Unzip this file to the console

	   You should see this:
			Manifest-Version: 1.0
			Archiver-Version: Plexus Archiver
			Created-By: Apache Maven
			Built-By: adam
			Build-Jdk: 1.8.0_252
			Main-Class:com.lessons.PostgresReport             <-- This tells the java -jar command which main to run

