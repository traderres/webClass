How to Build and Push Spring Boot Images (using docker & jib-maven-plugin)
--------------------------------------------------------------------------
Problem:  We want to build our spring-boot image and push it to Amazon ECR


Assumptions:
 A) You need docker installed to push the images
 B) You followed the steps in learnDocker/howToChangeAngularWebAppsToRunInContainers.txt to build an image



Part 1:  Build an Image (using the jib-maven-plugin)
----------------------------------------------------
 1. Add a maven profile called "buildImage" that will run the jib:docker-build  (to build a docker image)
    WARNING:  The  jib:docker-build goal requires docker to be installed

    a. Edit backend/pom.xml

    b. Add this profile to the end

			<profile>
			  <id>buildImage</id>

			  <build>
				<plugins>
				  <plugin>
					<groupId>com.google.cloud.tools</groupId>
					<artifactId>jib-maven-plugin</artifactId>
					<version>3.3.1</version>
					<configuration>
					  <from>
					     <!-- The source image runs linux with JDK 1.8-362 -->
					     <image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>
					  </from>

					  <to>
						<image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>
					  </to>
					</configuration>

					<executions>
					  <execution>
						<phase>package</phase>
						<goals>
						  <goal>dockerBuild</goal>
						</goals>
					  </execution>
					</executions>

				  </plugin>
				</plugins>
			  </build>
			</profile>


   Alternate Maven Profile (that does not require docker)
   -------------------------------------------------------
   NOTE:  If you do not have docker installed, then you use the "buildImageWithoutDocker" profile [see below]
          This profile uses the jib:build goal (which does not require docker to be installed)

		<profile>
		  <id>buildImageWithoutDocker</id>

		  <build>
			<plugins>
			  <plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>3.3.1</version>
				<configuration>
				  <from>
					<!-- The source image runs linux with JDK 1.8-362 -->
					<image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>
				  </from>

				  <to>
					<image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>
				  </to>
				</configuration>

				<executions>
				  <execution>
					<phase>package</phase>
					<goals>
					  <!-- The "build" goal does not require docker to be installed -->
					  <goal>build</goal>
					</goals>
				  </execution>
				</executions>

			  </plugin>
			</plugins>
		  </build>
		</profile>

		Use this command to build the image and push to a docker repo
		unix> export USERNAME=traderres      # This is the username for the  <to><image>...</image></to repository
		unix> export PASSWORD=secret         # This is the password for the <to><image>...</image></to> repository
		unix> mvn clean package -Pprod -PbuildImageWithoutDocker  -Djib.to.auth.username=$USERNAME -Djib.to.auth.password=$PASSWORD



     Here's what a sample pom.xml would look like with both profiles added to the pom.xml
     ------------------------------------------------------------------------------------
      <?xml version="1.0" encoding="UTF-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <parent>
          <artifactId>angularApp1</artifactId>
          <groupId>com.lessons</groupId>
          <version>1.0-SNAPSHOT</version>
        </parent>

        <artifactId>backend</artifactId>
        <version>1.0-SNAPSHOT</version>

        <name>backend</name>

        <properties>
          <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
        </properties>

        <dependencyManagement>
          <!-- Set Spring Boot Dependencies -->
          <dependencies>
            <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-dependencies</artifactId>
              <version>2.2.1.RELEASE</version>
              <type>pom</type>
              <scope>import</scope>
            </dependency>
          </dependencies>
        </dependencyManagement>

        <dependencies>

          <dependency>
            <!-- Include the front-end as a dependency so the front-end is compiled *BEFORE* the backend is compiled -->
            <groupId>${project.groupId}</groupId>
            <artifactId>frontend</artifactId>
            <version>${project.version}</version>
          </dependency>

          <dependency>
            <!-- Spring Boot Web -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>

            <exclusions>
              <exclusion>
                <!-- Remove Tomcat from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
              </exclusion>

              <exclusion>
                <!-- Remove logging from spring as we will use logback -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-logging</artifactId>
              </exclusion>
            </exclusions>
          </dependency>

          <dependency>
            <!-- Add Dependency for the Undertow App Server -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>

            <exclusions>
              <exclusion>
                <!-- Remove logging from undertow as we will use logback -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-logging</artifactId>
              </exclusion>
            </exclusions>
          </dependency>

          <dependency>
            <!-- Send logging from Java Common Logging to SLF4J -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.5</version>
          </dependency>

          <dependency>
            <!-- SLF4J will use Logback-classic as its logging implementation -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
          </dependency>

          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.2.1.RELEASE</version>
          </dependency>

          <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>5.2.1.RELEASE</version>
          </dependency>

          <dependency>
            <!-- Implementation for converting objects to JSON -->
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.3</version>
          </dependency>

          <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
          </dependency>
        </dependencies>

        <build>

          <plugins>
            <plugin>
              <!-- This plugin provides the tools needed to repackage the Spring Boot JAR into a runnable JAR
                   Run this command to generate the runnable Spring Boot Jar
                      mvn clean package  *or*
                      mvn clean package spring-boot:repackage
               -->
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
              <version>2.2.1.RELEASE</version>
              <configuration>
                <addResources>true</addResources>
              </configuration>

              <executions>
                <execution>
                  <goals>
                    <goal>repackage</goal>
                  </goals>
                  <configuration>
                    <classifier>exec</classifier>
                  </configuration>
                </execution>
              </executions>

            </plugin>
          </plugins>

        </build>

        <profiles>

          <profile>
            <!--    B U I L D    I M A G E       P R O F I L E    -->
            <id>buildImage</id>

            <build>
              <plugins>
                <plugin>
                  <groupId>com.google.cloud.tools</groupId>
                  <artifactId>jib-maven-plugin</artifactId>
                  <version>3.3.1</version>
                  <configuration>
                    <from>
                      <!-- The source image runs linux with JDK 1.8-362 -->
                      <image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>
                    </from>

                    <to>
                      <image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>
                    </to>
                  </configuration>

                  <executions>
                    <execution>
                      <phase>package</phase>
                      <goals>
                        <!-- The "dockerBuild" goal requires docker to be installed -->
                        <goal>dockerBuild</goal>
                      </goals>
                    </execution>
                  </executions>

                </plugin>
              </plugins>
            </build>
          </profile>



          <profile>
             <!--    B U I L D      I M A G E      W I T H O U T    D O C K E R     P R O F I L E    -->
            <id>buildImageWithoutDocker</id>

            <build>
              <plugins>
                <plugin>
                  <groupId>com.google.cloud.tools</groupId>
                  <artifactId>jib-maven-plugin</artifactId>
                  <version>3.3.1</version>
                  <configuration>
                    <from>
                      <!-- The source image runs linux with JDK 1.8-362 -->
                      <image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>
                    </from>

                    <to>
                      <image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>
                    </to>
                  </configuration>

                  <executions>
                    <execution>
                      <phase>package</phase>
                      <goals>
                        <!-- The "build" goal does not require docker to be installed -->
                        <goal>build</goal>
                      </goals>
                    </execution>
                  </executions>

                </plugin>
              </plugins>
            </build>
          </profile>
        </profiles>

      </project>








 2. OPTIONAL / Remove the old image
    unix> docker rmi -f traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 3. Build the image
    unix> mvn clean package -Pprod -PbuildImage

 4. Run the image locally
    NOTE:  We need the --security-opt seccomp=unconfined so that docker does ont contrain resources
    unix> docker run --network=host -p 8080:8080 --security-opt seccomp=unconfined traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 5. Verify that the webapp starts



Part 2:  (OPTIONAL) Add additional files to the image  (if needed)
------------------------------------------------------------------
 1. Edit the "buildImage" maven profile by adding <ExtraDirectories>...</extraDirectories> to the configuration section

    <profile>
       <id>buildImage</id>

       <build>
         <plugins>
           <plugin>
             <groupId>com.google.cloud.tools</groupId>
             <artifactId>jib-maven-plugin</artifactId>
             <version>3.3.1</version>
             <executions>
               <execution>
                 <phase>package</phase>
                 <goals>
                   <goal>dockerBuild</goal>
                 </goals>
               </execution>
             </executions>

             <configuration>
			   <from>
				 <!-- The source image runs linux with JDK 1.8-362 -->
				 <image>eclipse-temurin:8u362-b09-jdk@sha256:3b83f3fc0d016d7536dfd5e8a98ece451061b7dbb6d5db3ddea2db30b6153b28</image>
			   </from>

               <to>
                 <image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>
               </to>

               <extraDirectories>
                 <paths>
                   <path>
                     <!-- Copies from 'src/main/dev_resources' into '/sf328-backend/src/main/dev_resources' on the container. -->
                     <from>src/main/dev_resources</from>
                     <into>/sf328-backend/src/main/dev_resources</into>
                   </path>
                 </paths>
               </extraDirectories>

             </configuration>

           </plugin>
         </plugins>
       </build>
     </profile>






 2. OPTIONAL / Remove the old image
    unix> docker rmi -f traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 3. Build the image
    unix> mvn clean package -Pprod -PbuildImage

 4. Run the image locally
    unix> docker run --network=host -p 8080:8080 --security-opt seccomp=unconfined traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 5. Verify that the webapp starts




Part 3:  Push the Image to my-public-repo (Public Repo)
-------------------------------------------------------
 1. Change the backend/pom.xml
       <image>traderres/my-public-repo:${project.artifactId}-${project.version}</image>

 2. Remove the old image
    unix> docker rmi -f traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 3. Build the image
    unix> mvn clean package -Pprod -PbuildImage

 4. Get the image info
    unix> docker images -a

        REPOSITORY                               TAG
    	traderres/my-public-repo                 sf328-backend-1.0.8-SNAPSHOT


 5. Push the image to the traderres/my-public-repo  (public repo)
     a. Login to Docker
        unix> docker login
        Username:
        Password:

    b. Push the image
       unix> docker push traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT


 6. Verify that the push worked
    a. Go to https://hub.docker.com/r/traderres/my-public-repo/tags
    b. Verify that you see the tag called sf328-backend-1.0.8-SNAPSHOT



Part 4:  Push the Image to my-private-repo (Private Repo)
---------------------------------------------------------
 1. Change the backend/pom.xml
    Change the image name so that the tag refers to my-private-repo  (instead of my-public-repo)
       <image>traderres/my-private-repo:${project.artifactId}-${project.version}</image>


 2. OPTIONAL / Remove the old image
    unix> docker rmi -f traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

 3. Build the image
    unix> mvn clean package -Pprod -PbuildImage

 4. Get the image info
    unix> docker images -a

        REPOSITORY                               TAG
    	traderres/my-private-repo                sf328-backend-1.0.8-SNAPSHOT


 5. Push the image to the traderres/my-public-repo  (public repo)
     a. Login to Docker
        unix> docker login
        Username:
        Password:

    b. Push the image
       unix> docker push traderres/my-private-repo:sf328-backend-1.0.8-SNAPSHOT


 6. Verify that the push worked
    a. Go to https://hub.docker.com/
    b. Login with your docker account
    c. Click on Repositories
    d. Click on traderres / my-private-repo
       *OR*
       Go to theh https://hub.docker.com/repository/docker/traderres/my-private-repo

    e. Verify that you see the tag called sf328-backend-1.0.8-SNAPSHOT




Part 4:  Push the Image to an AWS ECR Repo
------------------------------------------
  1. Install Amazon CLI
     a. Install the AWS client
        unix> cd
 		unix> mkdir aws-cli
 		unix> cd aws-cli
		unix> curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unix> unzip awscliv2.zip
		unix> sudo ./aws/install

    b. Verify it works
    	unix> aws --version
    	aws-cli/2.10.3 Python/3.9.11 Linux/4.18.0-305.7.1.el8_4.x86_64 exe/x86_64.centos.8 prompt/off


  2. Run AWS Configure to configure it
     unix> aws configure
     AWS Access Key ID [None]:    my-access-key
     AWS Secret Access Key:       my-secret-key
     Region:                      us-gov-west-1
     Default Output format:       json


  3. Login to AWS ECR
     unix> aws ecr get-login-password --region us-gov-west-1 | docker login --username AWS --password-stdin 527362555097.dkr.ecr.us-gov-west-1.amazonaws.com

     You should see the following:
     	Login Succeeded


  4. OPTIONAL / Remove the old image
     unix> docker rmi -f traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT

  5. Build the image
     unix> mvn clean package -Pprod -PbuildImage

  6. Create a tag for the AWC ECR repo
     unix> docker tag  traderres/my-public-repo:sf328-backend-1.0.8-SNAPSHOT  527362555097.dkr.ecr.us-gov-west-1.amazonaws.com/poc:sf328-backend-1.0.8-SNAPSHOT

  7. Push the image to AWS ECR repo
   	 unix> docker push 527362555097.dkr.ecr.us-gov-west-1.amazonaws.com/poc:sf328-backend-1.0.8-SNAPSHOT


