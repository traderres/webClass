How to Sign Commits with a Generated GPG Key in Rocky Linux 9
-------------------------------------------------------------
Problem:  My Gitlab environment requires me to use a GPG key to sign commits
Solution: Create a GPG key, add it to your account, and associate your GPG key with Git

References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-gpg/


Assumptions
 A) You have gpg 2.2.20 or later


Part 1 / Install gpg
--------------------
 1. Install gpg
    unix> sudo dnf install gpg

 2. Verify that gpg is recent
    unix> gpg --version

    You should see something like this:
		gpg (GnuPG) 2.3.3
		libgcrypt 1.10.0-unknown
		Copyright (C) 2021 Free Software Foundation, Inc.
		License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.

		Home: /home/adam/.gnupg
		Supported algorithms:
		Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				CAMELLIA128, CAMELLIA192, CAMELLIA256
		AEAD: EAX, OCB
		Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 2 / Create the GPG key
---------------------------
 1. Generate the key pair
    unix> gpg --full-gen-key


 2. Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
    (14) Existing key from card

	-- Enter 1 for RSA and RSA (default)


 3. RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048)

    -- Enter 4096


 4. Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years

    -- Enter 5y (so the key expires in 5 years)


 5. Key expires at Sat 20 Oct 2029 10:45:50 AM EDT
    Is this correct? (y/N)

	-- Enter Y



 6. GnuPG needs to construct a user ID to identify your key.
    Real Name:  John Smith

 7. Email Address:   john.smith@zztop.com

 8. Comment:  my gpg key

 9. You selected this USER-ID:
      "John Smith (my gpg key) <john.smith@zztop.com>"
      Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?

    -- Enter O


10. Enter passphrase
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"


11. Enter passphrase
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"


	You will see this output
	------------------------
	gpg: key D832634BCB4D7494 marked as ultimately trusted
	gpg: revocation certificate stored as '/home/YOUR_ACCOUNT/.gnupg/openpgp-revocs.d/26C7A241D4AB535BEBDDDEA6D832634BCB4D7494.rev'
	public and secret key created and signed.

	pub   rsa4096 2024-10-21 [SC] [expires: 2029-10-20]
		  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
	uid                      John Smith (my gpg key) <john.smith@zztop.com>
	sub   rsa4096 2024-10-21 [E] [expires: 2029-10-20]





Part 3 / Add the GPG public key to your Gitlab account
------------------------------------------------------
 1. Get the public certificate
    a. List the GPG keys (associated with this email address)
 	   unix> gpg --list-secret-keys --keyid-format LONG   <EMAIL ADDRESS>
	         gpg --list-secret-keys --keyid-format LONG  john.smith@zztop.com


		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]
					         ^
					         |
					         +---------- This is the ID

    b. Use the ID to show the public key
       unix> gpg --armor --export ID

      *OR*

      unix> gpg --armor --export DDA2D531A0D8A038


      You should see:
     	 -----BEGIN PGP PUBLIC KEY BLOCK-----
		XAokw8iBMvFMR54hCzz3/P7NFb8GJ2sWp7EUC6tPbhIePLrc9yGZGQo2arFIFC34
		sYZkRuTZT3S3dWYE8dp6ZKTirLWbCUCf5uX13JJpzBMmqDQY6cZMDSsx+rNqMMYU
		VKZddlV43m2iJoI7oTv2zH2AYJ/YVNjkKLRhjkjIqW9QcXCJATpXrLChWHv0L2R/
		5LufjM3g12h8qAomO6ymfL8szdmBYQ==
		=Szrm
		-----END PGP PUBLIC KEY BLOCK-----


 2. Copy the PGP public key (including the top and bottom lines)

 3. Tell Gitlab to trust this gpg key
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select GPG Keys.
    e. Press Add new key.
    f. In the GPG Keys page,
       -- Paste in your public key.
       -- Press "Add key"



Part 4 / Clone the IL2 Project that requires a GPG key for commit signing
-------------------------------------------------------------------------
 1. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il2.dso.mil/platform-one/products/DCSA/bogus
       Click on your project -- e.g., reference-app

    b. Press "Code"

    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

 5. Run the git clone command using your access token
    a. Open a terminal
    b. In the terminal run these commands
       terminal> cd c:\tools\projects         # or where ever your projects are stored
       terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL





Part 5 / Tell your Git project to use GPG keys for commits
----------------------------------------------------------
 1. List the GPG keys (associated with this email address)
 	unix> gpg --list-secret-keys --keyid-format LONG

                           +------------ This is the private key id / user.signingkey
                           |
                           V
		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]


 2. Copy the GPG private key ID that starts with sec  -- e.g., D832634BCB4D7494

 3. Run this command to configure Git to sign your commits with your key,
    replacing <KEY ID> with your GPG key ID:

    unix> cd ~/intellijProjects/bogus
    unix> git config --local user.signingkey <KEY ID>
          *OR*
    unix> git config --local user.signingkey D832634BCB4D7494


 4. Run this command to set your user.email
    ## This is needed for the commits to appear as "Verified" ##
    terminal> git config --local user.email john.smith@zztop.com

 5. Tell git what your full name should be
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"


 6. Run this command to tell Git where to find the gpg command
    terminal> git config --local commit.gpgsign true
    terminal> git config --local gpg.program gpg


 7. Verify those git settings are set
    unix> git config --list --local | sort

    You should see:
      user.email=john.smith@zztop.com
      user.signingkey=D832634BCB4D7494



Part 6 / Try your first git commit signing w/GPG key from command-line
----------------------------------------------------------------------
 1. Open a terminal

 2. Run these commands:
    unix> cd ~/intellijProjects/bogus
    unix> git checkout -b YOUR_INITIALS/test

 3. Make a change to the README.med
    terminal> echo "hi" >> README.md

 4. Attempt to commit the change
    terminal> git commit -a -m "Test Commit"

 5. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 6. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
		gpg: Signature made 11/17/24 15:18:59 Eastern Standard Time
		gpg:                using RSA key 129F9A2322358BA0655F6D580A46A
		gpg: Good signature from "<FULL NAME> (my gpg key) <EMAIL ADDRESS>" [ultimate]
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 7 / Try your first git commit signing w/GPG key from intelliJ
------------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project (bogus)

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number / Your full name / my gpg key / your email address
	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md

 5. Do a commit and push
 	-- Set the message as "test commit 2"

	-- Verify it works without error




Part 8 / Verify that your branch has "Verified" next to your commits in the Gitlab history
------------------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il2.dso.mil/platform-one/products/DCSA/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

 6. Click on "Verified"




Part 9 / Create a shell script to setup Git GPG Signing on a SINGLE PROJECT  (setupProjectForIl2.sh)
----------------------------------------------------------------------------------------------------
 1. Create a scripts directory
    unix> mkdir ~/scripts

 2. Add scripts to the PATH
    unix> vi ~/.bashrc

    	# Add scripts to the path
    	export PATH=~/scripts:${PATH}

 3. Create the script
    unix> touch ~/scripts/setupProjectForIl2.sh
    unix> chmod u+x ~/scripts/setupProjectForIl2.sh
    unix> vi ~/scripts/setupProjectForIl2.sh

		# Clear existing IL2 or IL5 settings
		git config --local --unset commit.gpgsign
		git config --local --unset gpg.program
		git config --local --unset gpg.format
		git config --local --unset gpg.x509.program
		git config --local --unset user.email
		git config --local --unset user.name
		git config --local --unset user.signingkey

		# Setup this git project for CAC signing of commits
        git config --local commit.gpgsign true
        git config --local gpg.program gpg
		git config --local user.email john.smith@zztop.com
		git config --local user.name "John Smith"
		git config --local user.signingkey <THE GPG PRIVATE KEY ID>

 		git config --list --local | sort
		echo -e "\nFinished configuring git for IL2 / GPG signing of commits"


 4. Update this script with **YOUR** user.signingkey / email address / full name
    a. Set the full name in the script

    b. Set the email address should be

    c. Set the signing key
 	   unix> gpg --list-secret-keys --keyid-format LONG

                           +------------ This is the private key id / user.signingkey
                           |
                           V
		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]


 5. Clone the bogus2 project
    terminal> cd ~/intellijProjects      # or the specific directory where you STORE all of your projects
    terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus2.git

 6. Apply the script to this project (to setup CAC-signing of commits)
    terminal> cd bogus2
    terminal> setupProjectForIl2.sh

 7. Verify that this project is configured for CAC signing
    a. Create a new branch
       terminal> git checkout -b YOUR_INITIALS/test

	b. Make a change to the README.med
       terminal> echo "hi" >> README.md

	c. Attempt to commit the change

 8. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 9. Look at the signature in the log
    terminal> git log --show-signature

	commit a73ea8e3303d10fad29a27ae16e580de570fc1f0 (HEAD -> alr/test5, origin/alr/test5)
	gpgsm: Signature made 2024-11-17 21:54:11 UTC
	gpgsm:                using rsa2048 key 16B29B06F3828681E7E895F09CEBE38B7BC333D5
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Good signature from "/CN=SMITH.JOHN.1234567890/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US"
	gpgsm:                 aka "john.smith.ctr@mail.mil"
	Author: John Smith <john.smith.ctr@mail.mil>
	Date:   Sun Nov 17 16:54:11 2024 -0500

		Test Commit






How to Delete all of your GPG keys
----------------------------------
 1. List the keys
    unix> gpg --list-keys

 2. Delete the private key *FIRST*
    unix> gpg --delete-secret-key "JOHN SMITH"         # Delete the private key

      Delete this key from the keyring?   Y

 3. Delete the public key *SECOND*
    unix> gpg --delete-key "JOHN SMITH"


 4. Verify that the key is gone by listing the keys
    unix> gpg --list-keys









