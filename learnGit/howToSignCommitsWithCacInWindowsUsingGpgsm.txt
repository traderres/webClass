How to Sign Commits with a CAC on Windows (Using gpgsm)
-------------------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/




Part 1 / Make sure you have a Git 2.47 or later
-----------------------------------------------
 1. Verify that git is not too old
    a. Open a terminal
       terminal> git --version
       git version 2.47.0.windows.2               # WARNING:  These procedures definitely worked with git 2.47.0
                                                  #           (They might not work with an OLDER version of git)

    If the git version is **OLDER** than 2.47.0, then upgrade
       	1) Uninstall your old Git version / Use the Windows Control Panel -> Uninstall Git For Windows
       	2) Erase this directory:  c:\program files x86\git
    	3) Download a newer version of git
    	   Go to https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe
		   *OR*
    	   Go to https://gitforwindows.org/
    	   Press the "Download" button

    	4) Run the "Git for Windows" installer (you just downloaded) / Git-2.47.0.2-64-bit.exe
		   In the Select Destination Folder,              Use defaults and press "Next"
		   In the Select Components popup,                Use defaults and press "Next"
		   In the Start Menu popup,                       Use defaults and press "Next"
		   In the Choose Default Editor,                  Use defaults and press "Next"
		   In the Adjusting name of initial branch,       Use defaults and press "Next"
		   In the Adjusting Path environment,             Use defaults and press "Next"
		   In the Choosing SSH executable,                Use defaults and press "Next"    (Use bundled OpenSSH)
		   In the Choosing HTTPS transport backend,       Use defaults and press "Next"    (Use the OpenSSL library)
		   In the Configuring the line ending conversion, Use defaults and press "Next"    (core.autocrlf is true)
		   In the Configuring Terminal Emulator,          Use defaults and press "Next"    (Use MinTTY)
		   In the Choose behavior of "Git Pull",          Use defaults and press "Next"    (fast-forward or merge)
		   In the Choose a Credential Helper,             Use defaults and press "Next"    (Git Credential Manager)
		   In the Configuring extra options,              Use defaults and press "Next"    (Enable file system caching)
		   In the Configuring experimental options,       Press "Install"
		   In the Completing the Git Setup Wizard,        Uncheck all  and press "Finish"



Part 2 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    Go to https://files.gpg4win.org/gpg4win-4.3.1.exe
    *OR*
    a. Go to https://www.gpg4win.org/download.html
    b. Press the Download Icon
    c. Press $0
    d. Press "USD"
    e. Press "Download"
       *OR*

     Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
	   In the "Installer Language",              Use defaults and press "OK"   (English)
       In the "Welcome" page,                    Use defaults and press "Next"
       In the "Choose Components" page,          Use defaults and press "Next"
       In the "Choose Install Location" page,    Set the path to c:\tools\gpg4win           ## THIS IS NOT THE DEFAULT SETTING!!!!!!
       In the "Installation Complete" page,      Use defaults and press "Next"
       In the "Completing gpg4win Setup" page,   Use defaults and press "Finish"

	b. Close Kleopatra
	   -- We will not need it for these procedures to work


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2


 4. Add Openssl to your PATH   (it's included with "Git for Windows")
    a. Add this to your path:  C:\Program Files\Git\usr\bin
	b. Verify openssl is found
	   1) Open a new terminal
	      terminal> openssl version

	      You should see the following:  (bundled with git 2.0.47)
	         OpenSSL 3.2.3 3 Sep 2024 (Library: OpenSSL 3.2.3 3 Sep 2024)



Part 3 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 3. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 4. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus
    b. Press "Code"
    c. Copy the "Clone with HTTPS"
    d. Paste this into a temporary text file


 5. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git


  6. Delete any existing bogus and bogus2 project
     a. Open a terminal
        terminal> cd c:\tools\ideaProjects
        terminal> rd /s /q bogus
        terminal> rd /s /q bogus2

  6. Run the git clone command using your access token
     terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus.git

		** DO NOT OPEN THIS PROJECT IN INTELLIJ YET **





Part 4 / Download certs to c:\temp
----------------------------------
 1. Create this directory:  c:\temp

 2. Insert your CAC into your card reader

 3. Use the Windows "Manage User Certificates" to get the "thumbprint id" of your CAC certificate [that is used for document signing]
    a. In Windows, search for "manage user certificates"
    b. Run "Manage User Certificates"
    c. Expand Personal -> Certificates
    d. Make the window wider -- so you can see the columns
    e. Sort by "Expiration Date"
       -- You should see your 3 certificates (from your CAC)
       -- Look for the CAC certificate that has the expiration date in the future -- probably April 2025
       -- Look for the CAC certificate that has an "Intended Purpose" of "Secure Email, Document Signing"

    f. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

 4. Click on the "Certificate Path"
 	You should see something like this:
 				DoD Root CA 6
 					DOD Email CA-72
 						Signature - Smith.john.1234567890


 5. For your signature cert, Click on the "Details" tab
    a. Press "Copy to File..."
	   In the Welcome popup,        Use defaults and press "Next"
	   In the Export Private Key,   Use defaults and press "Next"
	   In the Export File Format,   Use defaults and press "Next"
	   In the File to Export,       c:\temp\cac
	   In the Completing wizard,    Use defaults and press "Finish"

 6. Download the cer file for the parent of your signature -- e.g., DOD Email CA-72
    a. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"
    b. Click on "Certification Path"
    c. Double-Click on the DOD Email CA-72  (the cert directly *ABOVE* your signature)
    d. Click on the "Details" tab
    e. Press "Copy to File..."
	   In the Welcome popup,        Use defaults and press "Next"
	   In the Export Private Key,   Use defaults and press "Next"
	   In the Export File Format,   Use defaults and press "Next"
	   In the File to Export,       c:\temp\parent1
	   In the Completing wizard,    Use defaults and press "Finish"

 7. Download the cer file for the 2nd parent of your signature -- e.g., DoD Root CA 6
    a. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"
    b. Click on "Certification Path"
    c. Double-Click on the DoD Root CA 6  (the cert directly 2 links above your signature)
    d. Click on the "Details" tab
    e. Press "Copy to File..."
	   In the Welcome popup,        Use defaults and press "Next"
	   In the Export Private Key,   Use defaults and press "Next"
	   In the Export File Format,   Use defaults and press "Next"
	   In the File to Export,       c:\temp\parent2
	   In the Completing wizard,    Use defaults and press "Finish"


 8. Get information about your CAC cert
    terminal> cd c:\temp
    terminal> openssl x509 -inform der -in cac.cer -text


 5. Download the CA issuer cer file for your cert
    terminal> openssl x509 -inform der -in cac.cer -text | findstr "CA Issuers"

        Issuer: C=US, O=U.S. Government, OU=DoD, OU=PKI, CN=DOD EMAIL CA-72
                  URI:http://crl.disa.mil/crl/DODEMAILCA_72.crl
                CA Issuers - URI:http://crl.disa.mil/sign/DODEMAILCA_72.cer
                                                ^
                                                |
                                                |
                                    Get the url after URI:

 6. Download the cer file
    terminal> cd c:\temp
    terminal> curl -O http://crl.disa.mil/sign/DODEMAILCA_72.cer




Part 6 / Configure gpgsm
------------------------
At this point, this directory should already exist:
     C:\Users\john.smith\AppData\Roaming\gnupg


 1. Create directories:
    terminal> cd C:\Users\john.smith\AppData\Roaming\gnupg
    terminal> mkdir trusted-certs
    terminal> mkdir logs

 2. Created this directory:  C:\Users\john.smith\AppData\Roaming\gnupg\trusted-certs
    terminal> mkdir C:\Users\john.smith\AppData\Roaming\gnupg\trusted-certs

 3. Create this file:       C:\Users\john.smith\AppData\Roaming\gnupg\dirmngr.conf
		log-file C:\Users\john.smith\AppData\Roaming\gnupg\logs\dirmngr.log.txt
		ignore-cert-extension 2.5.29.30
		ignore-cert-extension 2.5.29.36
		ignore-cert-extension 2.5.29.54


 4. Create this file:       C:\Users\john.smith\AppData\Roaming\gnupg\gpgsm.conf
		 disable-crl-checks
		 ignore-cert-extension 2.5.29.30
		 ignore-cert-extension 2.5.29.36
		 ignore-cert-extension 2.5.29.54


 5. Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\gpg-agent.conf
		pinentry-program c:\tools\gpg4win\bin\pinentry.exe
		allow-mark-trustedy


 6. Restart gpg
    terminal> gpgconf --kill all
    terminal> dirmngr




			 -- Copied the cac.cer, parent1.cer, parent2.cer to this trusted-certs\ directory
			 -- Rename .cer to .der


			 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\logs

			 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\dirmngr.conf
				log-file C:\Users\john.smith\AppData\Roaming\gnupg\logs\dirmngr.log.txt
				ignore-cert-extension 2.5.29.30
				ignore-cert-extension 2.5.29.36
				ignore-cert-extension 2.5.29.54


			 Imported this file:  0-Boeing_PCA_G3.cer
				terminal> gpgsm --import  0-Boeing_PCA_G3.cer


			 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\gpgsm.conf
				 ignore-cert-extension 2.5.29.30
				 ignore-cert-extension 2.5.29.36
				 ignore-cert-extension 2.5.29.54

			 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\gpg-agent.conf
			 Created this file:    C:\Users\john.smith\AppData\.gnupg\gpg-agent.conf
				pinentry-program c:\tools\gpg4win\bin\pinentry.exe


			terminal> gpgsm --list-chain --with-validation





 6. Import the certs
    terminal> cd c:\temp
	terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import parent2.cer
	terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import parent1.cer
	terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import cac.cer


 5. Download the CA issuer cer file for your cert
    terminal> openssl x509 -inform der -in cac.cer -text | findstr "CA Issuers"

        Issuer: C=US, O=U.S. Government, OU=DoD, OU=PKI, CN=DOD EMAIL CA-72
                  URI:http://crl.disa.mil/crl/DODEMAILCA_72.crl
                CA Issuers - URI:http://crl.disa.mil/sign/DODEMAILCA_72.cer
                                                ^
                                                |
                                                |
                                    Get the url after URI:

 6. Download the cer file
    terminal> cd c:\temp
    terminal> curl -O http://crl.disa.mil/sign/DODEMAILCA_72.cer
	terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check  --import DODEMAILCA_72.cer




 7. Tell gpg to trust your cert
 	a. Get the crl url
       terminal> set CER_FILENAME=DODEMAILCA_72.cer
       terminal> openssl x509 -inform der -in %CER_FILENAME% -text | findstr crl

							Copy the url after "URI:" / We need this
									|
									V
                  URI:http://crl.disa.mil/crl/DODROOTCA6.crl
                CA Issuers - URI:http://crl.disa.mil/issuedto/DODROOTCA6_IT.p7c


    b. Tell dirmngr to trust it
       terminal> dirmngr --verbose --force --fetch-crl   http://crl.disa.mil/crl/DODROOTCA6.crl

		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'ROOT': Certificate expired
		dirmngr[7140]: error loading certificate 'CA': Certificate expired
		dirmngr[7140]: error loading certificate 'CA': Certificate expired
		dirmngr[7140]: permanently loaded certificates: 33
		dirmngr[7140]:     runtime cached certificates: 0
		dirmngr[7140]:            trusted certificates: 33 (33,0,0,0)
		dirmngr[7140]: fetching CRL from 'http://crl.disa.mil/crl/DODROOTCA6.crl'
		dirmngr[7140]: detected interfaces: IPv4
		dirmngr[7140]: update times of this CRL: this=20241114T183042 next=20241215T183042
		dirmngr[7140]: locating CRL issuer certificate by authorityKeyIdentifier
		dirmngr[7140]: error fetching certificate by subject: Configuration error
		dirmngr[7140]: CRL issuer certificate {134F3CBBDB5D4529A59470B6DAAC9E4CE22FC10B} not found
		dirmngr[7140]: crl_parse_insert failed: Missing certificate
		dirmngr[7140]: processing CRL from 'http://crl.disa.mil/crl/DODROOTCA6.crl' failed: Missing certificate


 7. Import the CER file and Cac crt
    terminal> gpgsm --verbose   --disable-policy-checks --auto-issuer-key-retrieve --disable-crl-checks --disable-ocsp --auto-issuer-key-retrieve --import %CER_FILENAME%
    terminal> gpgsm --verbose   --disable-policy-checks --auto-issuer-key-retrieve --disable-crl-checks --disable-ocsp  --auto-issuer-key-retrieve --import cac.crt


 8. Restart the GPG agent
    terminal> gpgconf --kill all

 9. Verify that gpg can see your card reader
 	NOTE:  You might have to unplug the cac reader
 	terminal> gpg --card-status

 	Reader ...........: Alcor EMV Smartcard Reader 0
    Application ID ...: B76E80AC68C2461CBA168914BE68E07A
    Application type .: PIV


10. Verify that you can see the secret keys
    terminal> gpgsm --list-secret-keys

           ID: 0x7BC333D5        <-- This is your git user.signingkey
          S/N: 087594
        (dec): 554388
       Issuer: /CN=DOD EMAIL CA-72/OU=PKI/OU=DoD/O=U.S. Government/C=US
      Subject: /CN=RESNICK.ADAM.LAWRENCE.1511651901/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US
          aka: adam.l.resnick.ctr@mail.mil
     validity: 2024-08-02 00:00:00 through 2025-04-17 23:59:59
     key type: rsa2048
    key usage: digitalSignature nonRepudiation
ext key usage: emailProtection (suggested), ms-documentSigning (suggested)
     policies: 2.16.840.1.101.2.1.11.42:N:
     sha1 fpr: 16:B2:9B:06:F3:82:86:81:E7:E8:95:F0:9C:EB:E3:8B:7B:C3:33:D5
     sha2 fpr: A1:F0:92:13:25:E0:BD:92:5E:38:91:3B:AE:C1:1B:C3:3B:19:3C:3F:13:AE:B3:41:59:63:6B:C5:11:4E:33:5A
     card s/n: B76E80AC68C2461CBA168914BE68E07A



10. Restart the gpg-aagent
    terminal> gpg-agent

	You should see:
		gpg-agent[6568]: gpg-agent running and available


11. Verify the certificate chain
    terminal> gpgsm --list-chain --with-validation
    terminal> gpgsm --list-chain --with-validation  --auto-issuer-key-retrieve --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54

	terminal> gpgsm  --auto-issuer-key-retrieve



			A.  Download the certs from Manage User Certificates to c:\temp
						-- Generate c:\temp\parent1
						-- Generate c:\temp\parent2
						-- Generate c:\temp\parent3
						-- Generate c:\temp\parent4



					terminal> gpgsm --verbose  --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve  --import parent4.cer
					terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import parent3.cer
					terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import parent2.cer
					terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import parent1.cer
					terminal> gpgsm --verbose --disable-crl-checks  --disable-trusted-cert-crl-check --auto-issuer-key-retrieve --import cac.crt


				terminal> gpgconf --kill all
				terminal> gpgsm --list-secret-keys






		terminal>  gpgsm --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54 --disable-crl-check --import parent4.cer

		gpgsm --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54 --disable-crl-check --import parent4.cer

retrieve--
12.
  1) Copy the cer file to C:\Users\john.smith\AppData\Roaming\gnupg\trusted-certs
  2) gpgconf --kill all
  3) dirmngr
  4) gpgsm  --list-chain  --with-validation  --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54





 Get the fingerprint of your cac.crt
 terminal> openssl x509 -fingerprint -in cac.crt -noout

 SHA1 Fingerprint=16:B2:9B:06:F3:82:86:81:E7:E8:95:F0:9C:EB:E3:8B:7B:C3:33:D5


 Add this to the trustlist.txt
 terminal> notepad  C:\Users\john.smith\.gnupg\trustlist.txt
 terminal> notepad C:\Users\john.smith\AppData\Roaming\gnupg\trustlist.txt

	# Trust out cert
	16:B2:9B:06:F3:82:86:81:E7:E8:95:F0:9C:EB:E3:8B:7B:C3:33:D5 S relax


 terminal> gpgconfg --kill all
 terminal> dirmngr



 terminal> gpgsm --list-chain --with-validation --disable-crl-checks --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54 --auto-issuer-key-retrieve -



 Created this folder:  C:\Users\john.smith\AppData\Roaming\gnupg\trusted-certs
 -- Copied the cac.cer, parent1.cer, parent2.cer to this trusted-certs\ directory
 -- Rename .cer to .der


 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\logs

 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\dirmngr.conf
	log-file C:\Users\john.smith\AppData\Roaming\gnupg\logs\dirmngr.log.txt
	ignore-cert-extension 2.5.29.30
	ignore-cert-extension 2.5.29.36
	ignore-cert-extension 2.5.29.54


 Imported this file:  0-Boeing_PCA_G3.cer
    terminal> gpgsm --import  0-Boeing_PCA_G3.cer


 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\gpgsm.conf
	 ignore-cert-extension 2.5.29.30
	 ignore-cert-extension 2.5.29.36
	 ignore-cert-extension 2.5.29.54

 Created this file:    C:\Users\john.smith\AppData\Roaming\gnupg\gpg-agent.conf
 Created this file:    C:\Users\john.smith\AppData\.gnupg\gpg-agent.conf
    pinentry-program c:\tools\gpg4win\bin\pinentry.exe


terminal> gpgsm --list-chain --with-validation






 Trick that works
 -----------------
  1) Copy the cer file to C:\Users\john.smith\AppData\Roaming\gnupg\trusted-certs
  2) gpgconf --kill all
  3) dirmngr
  4) gpgsm  --list-chain  --with-validation  --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54



 I could manually sign with this command:
 terminal> gpg --ignore-cert-extension 2.5.29.30 --ignore-cert-extension 2.5.29.36 --ignore-cert-extension 2.5.29.54




Part 5 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 3. Tell Git to use your certificate for this *ONE PROJECT ONLY*
    a. Set the signing key for YOUR project

        terminal> gpgsm --list-secret-keys

               ID: 0x7BC333D5        <-- This is your git user.signingkey
              S/N: 087594
            (dec): 554388
           Issuer: /CN=DOD EMAIL CA-72/OU=PKI/OU=DoD/O=U.S. Government/C=US
          Subject: /CN=SMITH.JOHN..123456789/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US
              aka: john.smith.ctr@mail.mil

       terminal> cd ideaProjects\bogus
   	   terminal> git config --local user.signingkey <THE ID FROM ABOVE>

    b. Tell git what your email address should be
       terminal> git config --local user.email john.smith@zztop.com          # This email address must match your CAC

 	c. Tell git what the full name should be
       terminal> git config --local user.name "John Smith"

    d. Add these remaining git settings
		terminal> git config --local commit.gpgsign true
		terminal> git config --local gpg.format x509
		terminal> git config --local gpg.x509.program c:\tools\GnuPG\bin\gpgsm.exe
		terminal> git config --local gpg.program c:\tools\GnuPG\bin\gpg.exe

    e. Verify that GIT settings are correctly set
        terminal> git config --local --list | sort

    You should see:
		commit.gpgsign=true
		...
		gpg.format=x509
		gpg.program=c:\tools\GnuPG\bin\gpg.exe
		gpg.x509.program=c:\tools\GnuPG\bin\gpgsm.exe
		....
		user.email=john.smith@zztop.com
		user.name=John Smith
		user.signingkey=123456789123456789



Part 6 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Create a new branch
    terminal> cd ideaProjects\bogus
    terminal> git checkout -b YOUR_INITIALS/test

 2. Make a change to the README.md
    terminal> echo "hi" >> README.md

 3. Attempt to commit the change
    terminal> set GIT_TRACE=1
    terminal> git commit -a -m "Test Commit"
    -- You should be prompted to enter your CAC pin

 4. Enter your PIN
    -- After entering your pin, the commit should be accepted

 5. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!


 6. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 7 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project (bogus)

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number you used for the your user.signingkey

       NOTE:  You may see the warning "Cannot find suitable private key"

	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md
    Make your message:   Test Commit 2

 5. Do a commit and push
    -- It will prompt you for your PIN

 6. Enter your PIN
    -- After entering your pin, the commit should be accepted




Part 8 / Verify that your branch has "Verified" next to your commits in the Gitlab history
------------------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

 6. Click on "Verified"
    -- You should see your CAC information



Part 9 / Create a batch script to setup Git CAC Signing on a SINGLE PROJECT  (setupProjectForIl5.bat)
-----------------------------------------------------------------------------------------------------
 1. Open a terminal
    terminal> c:\progra~1\notepad++\notepad++   C:\tools\GnuPG\bin\setupProjectForIl5.bat

 2. Copy this to your text editor
		@echo off

		REM ** Clear existing IL2 or IL5 settings
		git config --local --unset commit.gpgsign
		git config --local --unset gpg.program
		git config --local --unset gpg.format
		git config --local --unset gpg.x509.program
		git config --local --unset user.email
		git config --local --unset user.name
		git config --local --unset user.signingkey

		REM ** Setup this git project for CAC signing of commits
		git config --local commit.gpgsign true
		git config --local gpg.format x509
		git config --local gpg.x509.program smimesign
		git config --local user.email john.smith@zztop.com
		git config --local user.name "John Smith"
		git config --local user.signingkey <THE ID FROM THUMBPRINT>

 		git config --list --local | sort
 		echo.
		echo Finished configuring git for IL5 / CAC signing of commits



 3. Update this script with **YOUR** user.signingkey / email address / full name
    a. Set the full name in the script
    b. Set the email address in the script
    c. Set the signing key

       1) Use the Windows "Manage User Certificates" to get the "thumbprint id" of your CAC certificate [that is used for document signing]
       2) In Windows, search for "manage user certificates"
       3) Run "Manage User Certificates"
       4) Expand Personal -> Certificates
       5) Make the window wider -- so you can see the columns
       6) Sort by "Expiration Date"
        -- You should see your 3 certificates (from your CAC)
        -- Look for the CAC certificate that has the expiration date in the future -- probably April 2025
        -- Look for the CAC certificate that has an "Intended Purpose" of "Secure Email, Document Signing"

       7) Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

       8) Click on the "Details" of your CAC Certificate

       9) Scroll Down in the list until you see Thumbprint

       10) Copy the Thumbprint value from the **BOTTOM** of this popup
           -- This is your user.signingkey


    d. Save the batch script


 4. Clone the bogus2 project
    terminal> cd c:\tools\ideaProjects      # or the specific directory where you STORE all of your projects
    terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus2.git

 5. Apply the script to this project (to setup CAC-signing of commits)
    terminal> cd bogus2
    terminal> setupProjectForIl5

 6. Verify that this project is configured for CAC signing
    a. Create a new branch
       terminal> git checkout -b YOUR_INITIALS/test

	b. Make a change to the README.med
       terminal> echo "hi" >> README.md

	c. Attempt to commit the change
       terminal> git commit -a -m "Test Commit"
       -- You should be prompted to enter your CAC pin

	d. Enter your PIN
       -- After entering your pin, the commit should be accepted

 7. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 8. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit

