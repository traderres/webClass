How to Sign Commits with a CAC (on Rocky Linux 9)
-------------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/


Part 1 / Configure gpgsm and gpg
--------------------------------
 1. Install tools
    unix> sudo dnf install gnupg-pkcs11-scd opensc  gnupg2 dirmngr gnupg2-smime pcsc-tools

 2. Verify gpg is configured
    unix> gpgconf

	gpg:OpenPGP:/usr/bin/gpg
	gpgsm:S/MIME:/usr/bin/gpgsm
	keyboxd:Public Keys:/usr/libexec/keyboxd
	gpg-agent:Private Keys:/usr/bin/gpg-agent
	scdaemon:Smartcards:/usr/libexec/scdaemon
	dirmngr:Network:/usr/bin/dirmngr
	pinentry:Passphrase Entry:/usr/bin/pinentry


 3. Create this file:  ~/.gnupg/gnupg-pkcs11-scd.conf
    unix> vi ~/.gnupg/gnupg-pkcs11-scd.conf

		providers p1
		provider-p1-library /usr/lib64/opensc-pkcs11.so
		providers smartcardhsm
		provider-smartcardhsm-library /usr/lib64/opensc-pkcs11.so


 4. Create this file:  ~/.gnupg/gpg-agent.conf
    unix> vi ~/.gnupg/gpg-agent.conf

		scdaemon-program /usr/bin/gnupg-pkcs11-scd


 5. Configure the gpg agent to use a command-line interface to enter your pin
    NOTE:  We will change it to a graphical one later / but we need it initially
    unix> echo 'pinentry-program /usr/bin/pinentry-curses' >> ~/.gnupg/gpg-agent.conf
    unix> echo 'export GPG_TTY=$(tty)' >> ~/.bashrc


 6. Run gpg --card-status to verify that the gpg program can detect your card
    a. Insert your cac card into your card reader

    b. Run this command
       unix> gpg --card-status

	I got the following output:
		gpg: WARNING: server 'scdaemon' is older than us (0.10.0 < 2.3.3)
		gpg: Note: Outdated servers may lack important security fixes.
		gpg: Note: Use the command "gpgconf --kill all" to restart them.
		Reader ...........: [none]
		Application ID ...: D276000124011150313138F4114D1111
		Application type .: OpenPGP
		Version ..........: 11.50
		Manufacturer .....: ?
		Serial number ....: 38F4114D
		Name of cardholder: [not set]
		Language prefs ...: [not set]
		Salutation .......:
		URL of public key : [not set]
		Login data .......: [not set]
		Signature PIN ....: forced
		Key attributes ...: rsa48 rsa48 rsa48
		Max. PIN lengths .: 0 0 0
		PIN retry counter : 0 0 0
		Signature counter : 0
		Signature key ....: [none]
		Encryption key....: [none]
		Authentication key: [none]
		General key info..: [none]




 7. Add DoD Root Certificate 3 and 6 to your systems root trust store by doing the following:
    unix> cd ~/Downloads
    unix> wget https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/zip/unclass-dod_approved_external_pkis_trust_chains.zip
    unix> unzip unclass-dod_approved_external_pkis_trust_chains.zip
    unix> sudo cp DoD_Approved_External_PKIs_Trust_Chains_v11.1_20240716/_DoD/Trust_Anchors_Self-Signed/0-DoD_Root_CA_3.cer  /etc/pki/ca-trust/source/anchors
    unix> sudo cp DoD_Approved_External_PKIs_Trust_Chains_v11.1_20240716/_DoD/Trust_Anchors_Self-Signed/0-DoD_Root_CA_6.cer  /etc/pki/ca-trust/source/anchors
    unix> sudo update-ca-trust


 8. Add DoD Root Certificate 6 to your systems root trust store by doing the following:
    unix> cd ~/Downloads
    unix> wget https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/zip/unclass-certificates_pkcs7_v5-6_dod.zip
    unix> unzip unclass-certificates_pkcs7_v5-6_dod.zip
    unix> sudo cp -p Certificates_PKCS7_v5.6_DoD/DoD_PKE_CA_chain.pem /etc/pki/ca-trust/source/anchors/DoD_PKE_CA_chain.crt
    unix> sudo update-ca-trust


 9. Verify that Dod Root CA 3 and Root CA 6 are trusted
    unix> trust list | grep -i 'DoD Root CA 3'
	label: DoD Root CA 3

    unix> trust list | grep -i 'DoD Root CA 6'
    label: DoD Root CA 6



10. Get the id of the x509 certificate used for "Digital Signature"
    unix> pkcs15-tool --list-certificates

		Using reader with a card: Alcor Micro AU9520 00 00
		X.509 Certificate [Certificate for PIV Authentication]
			Object Flags   : [0x00]
			Authority      : no
			Path           : 0101cece
			ID             : 01
			Encoded serial : 02 03 07DA43

		X.509 Certificate [Certificate for Digital Signature]
			Object Flags   : [0x00]
			Authority      : no
			Path           : 0100cece
			ID             : 02              <------------------ This is the ID we want because it is for "Digital Signature"!!
			Encoded serial : 02 03 087594

		X.509 Certificate [Certificate for Key Management]
			Object Flags   : [0x00]
			Authority      : no
			Path           : 0102cece
			ID             : 03
			Encoded serial : 02 03 08A10A

		X.509 Certificate [Certificate for Card Authentication]
			Object Flags   : [0x00]
			Authority      : no
			Path           : 0500cece
			ID             : 04
			Encoded serial : 02 03 07C246


11. Run the following to import the Root CRL for your certificate (using the ID from the previous step)
    a. Remove and insert your CAC card into your card reader
    b. Run this command to get the certificate of your CAC digital signature
       unix> pkcs15-tool --read-certificate 02

		-----BEGIN CERTIFICATE-----
		MIIE2DCCA8CgAwIBAgIDCHWUMA0GCSqGSIb3DQEBCwUAMF0xCzAJBgNVBAYTAlVT
		MRgwFgYDVQQKEw9VLlMuIEdvdmVybm1lbnQxDDAKBgNVBAsTA0RvRDEMMAoGA1UE
		CxMDUEtJMRgwFgYDVQQDEw9ET0QgRU1BSUwgQ0EtNzIwHhcNMjQwODAyMDAwMDAw
		WhcNMjUwNDE3MjM1OTU5WjCBgzELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4g
		R292ZXJubWVudDEMMAoGA1UECxMDRG9EMQwwCgYDVQQLEwNQS0kxEzARBgNVBAsT
		CkNPTlRSQUNUT1IxKTAnBgNVBAMTIFJFU05JQ0suQURBTS5MQVdSRU5DRS4xNTEx
		NjUxOTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5Rd2ZluPo2HQ
		K6RVJi4gEX+GKVzh5ijMiPtziTyNmqFOjDeQIpYDva5KqJhwXFdPOYKySaRK4wQg
		AQQBgjcKAwwwDQYJKoZIhvcNAQELBQADggEBAC5SVwPuo61P+Kv+fXniGiuAhlt1
		4cecB7Utn3K5cSEdUhTJWBzRsnP/tIDXn/FNNRCzeC5tid0/rlS5GUG8oHKf0cPC
		vpKr+NTPobD6zCn55FBu2hA8JKPkfGunVRzcDj2TOTuioaZMDCl3GvOczzoibup2
		Q5FDFwasHPpVGjdpckDDua6Zuc5nvY6wJ/xZf8fra4EPNkxMN8OSAngwPXHoQSGm
		9KbYEHJDHDQxrLHDtObwkO87kUF6svHng2DhM+9hr41DE+Hz/mlkj1hoqtp5PV57
		mpAsFoiRQUUXjWxhNYia1RufADeesb2QVv2+psLky+8bMVBjiqezh8Qn1Es=
		-----END CERTIFICATE-----

    b. Write the cert to a file called mycert.crt
       1) Remove and insert your CAC card into your card reader
  	   2) Run this command to write your CAC certificate to a file
  	      unix> pkcs15-tool --read-certificate 02 > mycert.crt

    c. Download the cer file for your CAC
       unix> wget $(openssl x509 -in mycert.crt -text | grep "CA Issuers" | awk '{ print $4 }' | sed 's/URI://g')
       -- Downloads DODEMAILCA_72.cer

    d. Tell gpg to trust your cert
       unix> export CER_FILENAME=DODEMAILCA_72.cer         # name of downloaded file from previous step
       unix> touch ~/.gnupg/trustlist.txt
       unix> dirmngr  --fetch-crl $(openssl x509 -inform der -in $CER_FILENAME -text | grep crl | grep -v "CA Issuers" | sed 's/URI://g')

		You should see this:
			dirmngr[18045.0]: permanently loaded certificates: 151
			dirmngr[18045.0]:     runtime cached certificates: 0
			dirmngr[18045.0]:            trusted certificates: 151 (151,0,0,0)
			dirmngr[18045.0]: number of system provided CAs: 377
			dirmngr[18045.0]: root certificate is not marked trusted
			dirmngr[18045.0]: fingerprint=D37ECF61C0B4ED88681EF3630C4E2FC787B37AEF
			dirmngr[18045.0]: DBG: BEGIN Certificate 'issuer':
			dirmngr[18045.0]: DBG:      serial: 01
			dirmngr[18045.0]: DBG:   notBefore: 2023-01-24 16:36:17
			dirmngr[18045.0]: DBG:    notAfter: 2053-01-24 16:36:17
			dirmngr[18045.0]: DBG:      issuer: CN=DoD Root CA 6,OU=PKI,OU=DoD,O=U.S. Government,C=US
			dirmngr[18045.0]: DBG:     subject: CN=DoD Root CA 6,OU=PKI,OU=DoD,O=U.S. Government,C=US
			dirmngr[18045.0]: DBG:   hash algo: 1.2.840.113549.1.1.12
			dirmngr[18045.0]: DBG:   SHA1 fingerprint: D37ECF61C0B4ED88681EF3630C4E2FC787B37AEF
			dirmngr[18045.0]: DBG: END Certificate

       unix> gpgsm --import $CER_FILENAME
       unix> gpgsm --import mycert.crt


12. Restart the GPG agent
    unix> gpgconf --kill all


13. Use gpgsm find your user.signingkey
    unix> gpgsm --list-secret-keys

  /home/adam/.gnupg/pubring.kbx
  -----------------------------
             ID: 0x7BC325214       <---------- This is your git user.signingkey
            S/N: 085595
          (dec): 557328
         Issuer: /CN=DOD EMAIL CA-72/OU=PKI/OU=DoD/O=U.S. Government/C=US
        Subject: /CN=SMITH.JOHN.1234567890/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US
            aka: john.smith.ctr@mail.mil
       validity: 2024-08-02 00:00:00 through 2025-04-17 23:59:59
       key type: rsa2048
      key usage: digitalSignature nonRepudiation
  ext key usage: emailProtection (suggested), ms-documentSigning (suggested)
       policies: 2.16.840.1.101.2.1.11.42:N:
       sha1 fpr: 16:B2:9B:06:F3:82:86:81:E7:E8:95:F0:9C:EB:E3:8B:7B:C3:33:D5
       sha2 fpr: A1:F0:92:13:25:E0:BD:92:5E:38:91:3B:AE:C1:1B:C3:3B:19:3C:3F:13:AE:B3:41:59:63:6B:C5:11:4E:33:5A
       card s/n: FF7F00





Part 2 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 3. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 4. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus
    b. Press "Code"
    c. Copy the "Clone with HTTPS"
    d. Paste this into a temporary text file


 5. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

  6. Delete any existing bogus and bogus2 project
     a. Open a terminal
        terminal> cd c:\tools\ideaProjects
        terminal> rd /s /q bogus
        terminal> rd /s /q bogus2

  6. Run the git clone command using your access token
     terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus.git

		** DO NOT OPEN THIS PROJECT IN INTELLIJ YET **



Part 3 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 1. Tell Git to use your certificate for this *ONE PROJECT ONLY*
	unix> cd ~/intellijProjects/bogus
	unix> signingkey=$( gpgsm --list-secret-keys | egrep '(key usage|ID)' | grep -B 1 digitalSignature | awk '/ID/ {print $2}')
 	unix> git config --local user.signingkey $signingkey

 2. Tell git what your email address should be
    unix> signingEmail=$(gpgsm --list-secret-keys | grep aka | awk '{ print $2 }')
    unix> git config --local user.email $signingEmail

 3. Tell git what the full name should be
    unix> git config --local user.name "John Smith"

 4. Add these other settings
	unix> git config --local commit.gpgsign true
	unix> git config --local gpg.format x509
	unix> git config --local gpg.x509.program gpgsm
    unix> git config --local gpg.program /usr/bin/gpg

 5. Verify that GIT settings are correctly set
    terminal> git config --local --list | sort

    You should see:
      commit.gpgsign=true
      ...
	  gpg.format=x509
	  gpg.program=/usr/bin/gpg
	  gpg.x509.program=gpgsm
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith
      user.signingkey=123456789123456789



Part 4 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Create a new branch
 	unix> cd ~/intellijProjects/bogus
 	unix> git checkout -b YOUR_INITIALS/test1

 2. Make a change to the README.md
    unix> echo "hi" >> README.md

 3. Attempt to commit the change
 	unix> git commit -a -m "Test Commit"

    1) You will be prompted:
       "Do you ultimately trust Dod Root CA....."
       -- Select "YES"

    2) You will be prompted:
	   Please verify that the certified identified has the finger print
	   -- Select "Correct"

	3) Verify that your trust list has been updated
	   unix> cat ~/.gnupg/trustlist.txt


	-- At this point, you should be prompted for your CAC pin
	-- Enter your pin
	And, the commit should work



 4. Configure the gpg agent to prompt for pin using a GRAPHICAL pin program
    a. Tell gpg-agent to use a graphical pin program
       unix> vi ~/.gnupg/gpg-agent.conf

			scdaemon-program /usr/bin/gnupg-pkcs11-scd
			pinentry-program /usr/bin/pinentry-gnome3

	b. Restart the GPG agent
       unix> gpgconf --kill all

    c. Verify the configuration
       unix> gpgconf


 5. Make another change to the README.md
    unix> echo "hi there" >> README.md

 6. Attempt to commit the change
 	unix> git commit -a -m "Test Commit 2"
	-- You should be prompted to enter your CAC pin from a graphical popup

 7. Push up your changes
    unix> git push
	-- Verify it works

 8. Verify that the log shows a good signature
    unix> git log --show-signature

	commit e2ef0694e70a68f786c8f3a49de37a965dca3c89 (HEAD -> alr/test1, origin/alr/test1)
	gpgsm: Signature made 2024-11-17 21:36:16 UTC
	gpgsm:                using rsa2048 key 16B29B06F3828681E7E895F09CEBE38B7BC333D5
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Good signature from "/CN=SMITH.JOHN.1234567890/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US"
	gpgsm:                 aka "john.smith.ctr@mail.mil"
	Author: John Smith <john.smith.ctr@mail.mil>
	Date:   Sun Nov 17 16:36:16 2024 -0500

		Test Commit 2




Part 5 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project (bogus)

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number you used for the your user.signingkey

       NOTE:  You may see the warning "Cannot find suitable private key"

	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md
    Make your message:   Test Commit 3

 5. Do a commit and push
    -- It will prompt you for your PIN

 6. Enter your PIN
    -- After entering your pin, the commit should be accepted





Part 6 / Verify that your branch has "Verified" next to your commits in the Gitlab history
------------------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

 6. Click on "Verified"
    -- You should see your CAC information




Part 7 / Create a batch script to setup Git CAC Signing on a SINGLE PROJECT  (setupProjectForIl5.sh)
----------------------------------------------------------------------------------------------------
 1. Create a scripts directory
    unix> mkdir ~/scripts

 2. Add scripts to the PATH
    unix> vi ~/.bashrc

    	# Add scripts to the path
    	export PATH=~/scripts:${PATH}

 3. Create the script
    unix> touch ~/scripts/setupProjectForIl5.sh
    unix> chmod u+x ~/scripts/setupProjectForIl5.sh
    unix> vi ~/scripts/setupProjectForIl5.sh

		# Clear existing IL2 or IL5 settings
		git config --local --unset commit.gpgsign
		git config --local --unset gpg.program
		git config --local --unset gpg.format
		git config --local --unset gpg.x509.program
		git config --local --unset user.email
		git config --local --unset user.name
		git config --local --unset user.signingkey

		# Setup this git project for CAC signing of commits
		git config --local commit.gpgsign true
       	git config --local gpg.format x509
       	git config --local gpg.x509.program gpgsm
        git config --local gpg.program /usr/bin/gpg
		git config --local user.email john.smith@zztop.com
		git config --local user.name "John Smith"
		git config --local user.signingkey <THE ID>

 		git config --list --local | sort
		echo -e "\nFinished configuring git for IL5 / CAC signing of commits"



 4. Update this script with **YOUR** user.signingkey / email address / full name
    a. Set the full name in the script

    b. Set the email address should be
       unix> signingEmail=$(gpgsm --list-secret-keys | grep aka | awk '{ print $2 }')
       unix> $signingEmail
       -- Store this in the script for user.email

    c. Set the signing key
       unix> signingkey=$( gpgsm --list-secret-keys | egrep '(key usage|ID)' | grep -B 1 digitalSignature | awk '/ID/ {print $2}')
       unix> echo $signingkey
       -- Store this in the script for the user.signingkey



 5. Clone the bogus2 project
    terminal> cd ~/intellijProjects      # or the specific directory where you STORE all of your projects
    terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus2.git

 6. Apply the script to this project (to setup CAC-signing of commits)
    terminal> cd bogus2
    terminal> setupProjectForIl5.sh

 7. Verify that this project is configured for CAC signing
    a. Create a new branch
       terminal> git checkout -b YOUR_INITIALS/test

	b. Make a change to the README.med
       terminal> echo "hi" >> README.md

	c. Attempt to commit the change
       terminal> git commit -a -m "Test Commit"
       -- You should be prompted to enter your CAC pin

	d. Enter your PIN
       -- After entering your pin, the commit should be accepted

 8. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 9. Look at the signature in the log
    terminal> git log --show-signature

	commit a73ea8e3303d10fad29a27ae16e580de570fc1f0 (HEAD -> alr/test5, origin/alr/test5)
	gpgsm: Signature made 2024-11-17 21:54:11 UTC
	gpgsm:                using rsa2048 key 16B29B06F3828681E7E895F09CEBE38B7BC333D5
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Note: non-critical certificate policy not allowed
	gpgsm: Good signature from "/CN=SMITH.JOHN.1234567890/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US"
	gpgsm:                 aka "john.smith.ctr@mail.mil"
	Author: John Smith <john.smith.ctr@mail.mil>
	Date:   Sun Nov 17 16:54:11 2024 -0500

		Test Commit














