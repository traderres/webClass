How to Sign Commits with a CAC (on Windows 10)
----------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC

Assumptions
 A) You have git for windows installed


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/




Part 1 / Download & Install smimesign
-------------------------------------
 1. Go to https://github.com/github/smimesign/releases/tag/v0.2.0-rc1

 2. Download mimesign-windows-v0.2.0-rc1.exe
    -- Save it to your Downloads/ directory

 3. Run mimesign-windows-v0.2.0-rc1.exe
    a. In the "License Agreement" page
       -- Press "I accept the agreement"
       -- Press "Next"

    b. In the "Select Destination Location"
       -- Set it to c:\tools\smimesign
       -- Press "Next"

    c. In the "Completing the setup"
       -- Press "Finish"

 4. Create a user environment
    a. In windows, search for edit environment
    b. Select "Edit environment variables for your account"
    c. In the top, press "New..."
       Varialbe name:      smimesign
       Variable value:     c:\tools\smimesign


 5. Create a system environment variable
    a. In windows, search for edit system
    b. Select "Edit the system variables"
    c. Press "Environment Variables"
    d. On the *BOTTOM*
       -- Double click on your Path variable
       -- Press "New"
       -- Insert this value:  c:\tools\smimesign
    e. Press "OK"
    f. Press "OK"
    g. Press "OK"

 6. Verify that it's in your path
    a. Open a new terminal
    b. Run these commands:
       terminal> smimesign --version

       You should see this:
         v0.2.0-rc1



Part 2 / Get the ID of your CAC Digital Signature
-------------------------------------------------
 1. Insert your CAC

 2. Get the serial number used for digital signatures
    a. In Windows, search for "manage user certificates"
    b. Run Manage User Certificates

 3. In the Certificate Manager App
    a. Expand Personal -> Certificates
    b. Sort by "Expiration Date"
       -- So, the most recent certificates are on the bottom
       -- You should see your 3 certificates (from your CAC)

    c. Look at the certificate that has an "Intended Purpose" of "Secure Email, Digital Signing"
       -- Double-click on that cert  (that is the cert used for your digital signature)

    d. Click on Details

    e. Copy the serial number
       NOTE:  You should be able to copy it from the lower part of this Details popup
       -- Paste it in a file somewhere.  We will need it later


 4. Use smimesign to get the ID of your CAC Digital signature
    a. Open a new terminal
    b. In the terminal, run these commands:
       terminal> smimesign â€“-list-keys

    c. Look for the group that has your serial number
       NOTE:  The listing may strip off leading zeros
              If your serial number is 012345
              Then, you are looking for
                  ID:  123456789123456789123456789
                 S/N:  12345

    d. Copy the ID above that serial number

 5. Tell Git to use that serial number
    terminal> git config --global user.signingkey 123456789123456789123456789

 6. Verify the ID is set in git
    terminal> git config --list | findstr key

    You should see
      user.signingkey=123456789123456789123456789




Part 3 / Configure Git to use your signing key/email address/full name
-----------------------------------------------------------------------
 1. Run this command to set your user.email
    terminal> git config --global user.email john.smith@zztop.com

 2. Run this command to set your git name
    terminal> git config --global user.name "John Smith"

 3. Run this command to tell Git where to find the gpg command
    terminal> git config --global gpg.x509.program c:\tools\smimesign\smimesign.exe
    terminal> git config --global gpg.format x509

 4. Verify those git settings are set
    terminal> git config --list | sort

    You should see:
      gpg.program=c:\tools\smimesign\smimesign.exe
      gpg.format=x509
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith




Part 4 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il2.dso.mil/platform-one-/products/DCSA/reference-app
    b. Press "Code"
    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

   5. Run the git clone command using your access token
      a. Open a terminal
      b. In the terminal run these commands
         terminal> cd c:\tools\projects    # or whereever your projects are stored
         terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL




Part 5 / Try your first git commit from command-line
----------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project

 3. Make sure git is *NOT* configured to use the GPG key
    a. Pull File -> Settings
    b. Search for gpg
    c. Press "Configure GPG Key..."
    d. In the popup
        -- Uncheck "Sign with GPG Key"
        -- Press OK

 4. Create a new branch
    a. In IntelliJ, open the above project
       terminal> git checkout -b test 2

 5. Make a change to the README.md

 6. Do the commit from *COMMAND LINE*
    terminal> git commit -a -m "This is a test"





