How to Sign Commits with a CAC (on Windows 10)
----------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC

Assumptions
 A) You have git for windows installed
 B) You have a recent version of git
    -- This worked successfully with git version 2.47.0.windows.2


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/




Part 1 / Make sure you have a Git 2.47 or later
-----------------------------------------------
 1. Create this directory:  c:\temp

 2. Verify that git is not too old
    a. Open a terminal
       terminal> git --version
       git version 2.47.0.windows.2               # WARNING:  These procedures definitely worked with git 2.47.0
                                                  #           (They might not work with an OLDER version of git)

    If the git version is **OLDER** than 2.47.0, then upgrade
       	1) Uninstall your old Git version / Use the Windows Control Panel -> Uninstall Git For Windows
    	2) Download a newer version of git
    	   Go to https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe
		   *OR*
    	   Go to https://gitforwindows.org/
    	   Press the "Download" button

    	3) Run the "Git for Windows" installer (you just downloaded) / Git-2.47.0.2-64-bit.exe
		   In the Select Destination Folder,              Use defaults and press "Next"
		   In the Select Components popup,                Use defaults and press "Next"
		   In the Start Menu popup,                       Use defaults and press "Next"
		   In the Choose Default Editor,                  Use defaults and press "Next"
		   In the Adjusting name of initial branch,       Use defaults and press "Next"
		   In the Adjusting Path environment,             Use defaults and press "Next"
		   In the Choosing SSH executable,                Use defaults and press "Next"    (Use bundled OpenSSH)
		   In the Choosing HTTPS transport backend,       Use defaults and press "Next"    (Use the OpenSSL library)
		   In the Configuring the line ending conversion, Use defaults and press "Next"    (core.autocrlf is true)
		   In the Configuring Terminal Emulator,          Use defaults and press "Next"    (Use MinTTY)
		   In the Choose behavior of "Git Pull",          Use defaults and press "Next"    (fast-forward or merge)
		   In the Choose a Credential Helper,             Use defaults and press "Next"    (Git Credential Manager)
		   In the Configuring extra options,              Use defaults and press "Next"    (Enable file system caching)
		   In the Configuring experimental options,       Press "Install"
		   In the Completing the Git Setup Wizard,        Uncheck all  and press "Finish"



Part 2 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    Go to https://files.gpg4win.org/gpg4win-4.3.1.exe
    *OR*
    a. Go to https://www.gpg4win.org/download.html
    b. Press the Download Icon
    c. Press $0
    d. Press "USD"
    e. Press "Download"
       *OR*

     Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
	   In the "Installer Language",              Use defaults and press "OK"   (English)
       In the "Welcome" page,                    Use defaults and press "Next"
       In the "Choose Components" page,          Use defaults and press "Next"
       In the "Choose Install Location" page,    Set the path to c:\tools\gpg4win           ## THIS IS NOT THE DEFAULT SETTING!!!!!!
       In the "Installation Complete" page,      Use defaults and press "Next"
       In the "Completing gpg4win Setup" page,   Use defaults and press "Finish"

	b. Close Kleopatra
	   -- We will not need it for these procedures to work


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 3 / Download & Install smimesign
-------------------------------------
 1. Go to https://github.com/github/smimesign/releases/download/v0.2.0-rc1/smimesign-windows-v0.2.0-rc1.exe
    *OR*
    Go to https://github.com/github/smimesign/releases/tag/v0.2.0-rc1
    Click on smimesign-windows-v0.2.0-rc1.exe

    Save smimesign-windows-v0.2.0-rc1.exe to your Downloads/ directory


 3. Run smimesign-windows-v0.2.0-rc1.exe
    In the "License Agreement" page,       Choose "I accept" and press "Next"
    In the "Destination Location" page,    Set the path to c:\tools\smimesign         ## THIS IS NOT THE DEFAULT SETTING!!!!!!
    In the "Completing the setup" page,    Press "Finish"


 4. Create an environment variable called "smimesign" for your account
    a. In windows, search for edit environment
    b. Select "Edit environment variables for your account"
    c. In the top, press "New..."
       Variable name:      smimesign
       Variable value:     c:\tools\smimesign
    d. Press "OK" a few times


 5. Verify that it's in your path
    a. Open a new terminal
    b. Run these commands:
       terminal> smimesign --version

       You should see this:
         v0.2.0-rc1


 6. Verify that you can use smimesign to list the keys on your CAC
    a. Insert your CAC card into the CAC reader
    b. Run this command:
       terminal> smimesign --list-keys

       -- You should see the certificates on your CAC



Part 4 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 3. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 4. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus
    b. Press "Code"
    c. Copy the "Clone with HTTPS"
    d. Paste this into a temporary text file


 5. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

  6. Delete any existing bogus and bogus2 project
     a. Open a terminal
        terminal> cd c:\tools\ideaProjects
        terminal> rd /s /q bogus
        terminal> rd /s /q bogus2

  6. Run the git clone command using your access token
     terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus.git

		** DO NOT OPEN THIS PROJECT IN INTELLIJ YET **




Part 5 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 1. Insert your CAC into your card reader

 2. Use the Windows "Manage User Certificates" to get the "thumbprint id" of your CAC certificate [that is used for document signing]
    a. In Windows, search for "manage user certificates"
    b. Run "Manage User Certificates"
    c. Expand Personal -> Certificates
    d. Make the window wider -- so you can see the columns
    e. Sort by "Expiration Date"
       -- You should see your 3 certificates (from your CAC)
       -- Look for the CAC certificate that has the expiration date in the future -- probably April 2025
       -- Look for the CAC certificate that has an "Intended Purpose" of "Secure Email, Document Signing"

    f. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

    g. Click on the "Details" of your CAC Certificate

    h. Scroll Down in the list until you see Thumbprint

    i. Copy the Thumbprint value from the **BOTTOM** of this popup
       -- This is your user.signingkey

 3. Tell Git to use your certificate for this *ONE PROJECT ONLY*
    a. Set the signing key for YOUR project
       terminal> cd ideaProjects\bogus
   	   terminal> git config --local user.signingkey <THE ID FROM THUMBPRINT>

    b. Add these remaining git settings
  	   terminal> git config --local gpg.format x509
       terminal> git config --local gpg.x509.program smimesign
	   terminal> git config --local commit.gpgsign true

 4. Tell git what your email address should be
    terminal> git config --local user.email john.smith@zztop.com          # This email address must match your CAC

 5. Tell git what your full name should be
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"

 6. Verify that GIT settings are correctly set
    terminal> git config --local --list | sort

    You should see:
      commit.gpgsign=true
      ...
      gpg.format=x509
      gpg.x509.program=smimesign
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith
      user.signingkey=123456789123456789



Part 6 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Create a new branch
    terminal> cd ideaProjects\bogus
    terminal> git checkout -b YOUR_INITIALS/test

 2. Make a change to the README.med
    terminal> echo "hi" >> README.md

 3. Attempt to commit the change
    terminal> git commit -a -m "Test Commit"
    -- You should be prompted to enter your CAC pin

 4. Enter your PIN
    -- After entering your pin, the commit should be accepted

 5. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!


 6. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 7 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project (bogus)

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number you used for the your user.signingkey

       NOTE:  You may see the warning "Cannot find suitable private key"

	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md
    Make your message:   Test Commit 2

 5. Do a commit and push
    -- It will prompt you for your PIN

 6. Enter your PIN
    -- After entering your pin, the commit should be accepted




Part 8 / Verify that your branch has "Verified" next to your commits in the Gitlab history
------------------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

 6. Click on "Verified"
    -- You should see your CAC information



Part 9 / Create a batch script to setup Git CAC Signing on a SINGLE PROJECT  (setupProjectForIl5.bat)
-----------------------------------------------------------------------------------------------------
 1. Open a terminal
    terminal> c:\progra~1\notepad++\notepad++   C:\tools\GnuPG\bin\setupProjectForIl5.bat

 2. Copy this to your text editor
		@echo off

		REM ** Clear existing IL2 or IL5 settings
		git config --local --unset commit.gpgsign
		git config --local --unset gpg.program
		git config --local --unset gpg.format
		git config --local --unset gpg.x509.program
		git config --local --unset user.email
		git config --local --unset user.name
		git config --local --unset user.signingkey

		REM ** Setup this git project for CAC signing of commits
		git config --local commit.gpgsign true
		git config --local gpg.format x509
		git config --local gpg.x509.program smimesign
		git config --local user.email john.smith@zztop.com
		git config --local user.name "John Smith"
		git config --local user.signingkey <THE ID FROM THUMBPRINT>

 		git config --list --local | sort
 		echo.
		echo Finished configuring git for IL5 / CAC signing of commits



 3. Update this script with **YOUR** user.signingkey / email address / full name
    a. Set the full name in the script
    b. Set the email address in the script
    c. Set the signing key

       1) Use the Windows "Manage User Certificates" to get the "thumbprint id" of your CAC certificate [that is used for document signing]
       2) In Windows, search for "manage user certificates"
       3) Run "Manage User Certificates"
       4) Expand Personal -> Certificates
       5) Make the window wider -- so you can see the columns
       6) Sort by "Expiration Date"
        -- You should see your 3 certificates (from your CAC)
        -- Look for the CAC certificate that has the expiration date in the future -- probably April 2025
        -- Look for the CAC certificate that has an "Intended Purpose" of "Secure Email, Document Signing"

       7) Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

       8) Click on the "Details" of your CAC Certificate

       9) Scroll Down in the list until you see Thumbprint

       10) Copy the Thumbprint value from the **BOTTOM** of this popup
           -- This is your user.signingkey


    d. Save the batch script


 4. Clone the bogus2 project
    terminal> cd c:\tools\ideaProjects      # or the specific directory where you STORE all of your projects
    terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus2.git

 5. Apply the script to this project (to setup CAC-signing of commits)
    terminal> cd bogus2
    terminal> setupProjectForIl5

 6. Verify that this project is configured for CAC signing
    a. Create a new branch
       terminal> git checkout -b YOUR_INITIALS/test

	b. Make a change to the README.med
       terminal> echo "hi" >> README.md

	c. Attempt to commit the change
       terminal> git commit -a -m "Test Commit"
       -- You should be prompted to enter your CAC pin

	d. Enter your PIN
       -- After entering your pin, the commit should be accepted

 7. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 8. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit

