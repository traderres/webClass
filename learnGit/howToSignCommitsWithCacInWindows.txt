How to Sign Commits with a CAC (on Windows 10)
----------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC

Assumptions
 A) You have git for windows installed
 B) You have a recent version of git
    -- This worked successfully with git version 2.47.0.windows.2


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/




Part 1 / Make sure you have a newer version of git and you have openssl in your PATH
------------------------------------------------------------------------------------
 1. Create this directory:  c:\temp


 2. Verify that git is not too old
    a. Open a terminal
       terminal> git --version
       git version 2.47.0.windows.2               # WARNING:  These procedures definitely worked with git 2.47.0
                                                  #           (They might not work with your OLDER version of git)

    If the git version is **OLDER** than 2.47.0, then upgrade
       	1) Uninstall your old Git version / Use the Windows Control Panel -> Uninstall Git For Windows
    	2) Download a newer version of git
    	   Go to https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe
		   *OR*
    	   Go to https://gitforwindows.org/
    	   Press the "Download" button

    	3) Install your newer version of Git for Windows


 3. Verify that you have openssl in your PATH
    a. Open a terminal
       terminal> openssl version

       -- If you see version info, then you're good.  Skip to the next part.
            OpenSSL 3.2.3 3 Sep 2024 (Library: OpenSSL 3.2.3 3 Sep 2024)


       -- If you get an error, then add it to your path
          NOTE:  "Git for windows" comes with openssl but it is NOT added to the PATH automatically

    		a. Find where openssl.exe is on your computer
    		   terminal> cd \
    		   terminal> dir /s openssl.exe

    		   MOST LIKELY, it is located in this directory:  c:\Program Files\Git\usr\bin

    		b. In Windows, search for edit environment -> Edit environment variables for your account
    			1) In the TOP, double-click on PATH
    			2) Add this to your PATH:   c:\Program Files\Git\usr\bin

			c. Open a *NEW* terminal
			   terminal> openssl version
			   -- You should see version information now




Part 2 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    a. Go to https://www.gpg4win.org/download.html
    b. Press the Download Icon
    c. Press $0
    d. Press "USD"
    e. Press "Download"
       *OR*
       Go to https://files.gpg4win.org/gpg4win-4.3.1.exe

    f. Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
    b. For the "Installer Language"
       -- Use the default of "English"
       -- Press OK

	c. For the "Welcome" page
	   -- Press "Next"

	d. For the "Choose Components" page
	   -- Use the defaults
	   -- Press "Next"

	e. For the "Install Location" page
	   -- Destination Folder:  c:\tools\gpg4win           <<--- THIS IS NOT THE DEFAULT SETTING / PLEASE USE THIS!!!!!
	   -- Press "Install"

    f. In the "Installation Complete" page
       -- Press "Next"

    g. In the "Completing Gpg4win Setup"
       -- Uncheck "Run Kleopatra"
       -- Press "Finish"

       NOTE:  We do **NOT** need to run Kleopatra for these procedures to work


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 3 / Download & Install smimesign
-------------------------------------
 1. Go to https://github.com/github/smimesign/releases/tag/v0.2.0-rc1

 2. Download smimesign-windows-v0.2.0-rc1.exe
    -- Save it to your Downloads/ directory

 3. Run smimesign-windows-v0.2.0-rc1.exe
    a. Press "Install anyway"

    b. In the "License Agreement" page
       -- Press "I accept the agreement"
       -- Press "Next"

    c. In the "Select Destination Location"
       -- Set it to c:\tools\smimesign                   <<----- THIS IS NOT THE DEFAULT SETTING!!!!!
       -- Press "Next"

    d. In the "Completing the setup"
       -- Press "Finish"


 4. Create an environment variable called "smimesign" for your account
    a. In windows, search for edit environment
    b. Select "Edit environment variables for your account"
    c. In the top, press "New..."
       Variable name:      smimesign
       Variable value:     c:\tools\smimesign
    d. Press "OK" a few times


 5. Verify that it's in your path
    a. Open a new terminal
    b. Run these commands:
       terminal> smimesign --version

       You should see this:
         v0.2.0-rc1





Part 4 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 3. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 4. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus
    b. Press "Code"
    c. Copy the "Clone with HTTPS"
    d. Paste this into a temporary text file


 5. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

  6. Run the git clone command using your access token
     a. Open a terminal
     b. In the terminal run these commands
        terminal> cd ideaProjects      # or the specific directory where you STORE YOUR PROJECT
        terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus.git

		** DO NOT OPEN THIS PROJECT IN INTELLIJ YET **


Part 5 / Download Certificates in your CAC's Certificate Chain
--------------------------------------------------------------
 1. Insert your CAC into your card reader

 2. Open the Certificate Manager
    a. In Windows, search for "manage user certificates"
    b. Run "Manage User Certificates"

 3. In the Certificate Manager App, run these steps:
    a. Expand Personal -> Certificates
    b. Make the window wider -- so you can see the columns
    c. Sort by "Expiration Date"
       -- You should see your 3 certificates (from your CAC)
       -- Of your 3 certificates (from your CAC), look for the CAC that has the expiration date in the future -- probably April 2025

    d. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

	e. Click on "Certificate Path"
		-- You should see something like this
				DoD Root CA 6
					DOD EMAIL CA-72
						YOUR CAC CARD



 4. From the Certificate Manager, Download certs that make up your CAC's chain
	a. Download your CAC Cert to c:\temp\cac.er
	   1) Go to the "Details" tab for YOUR CAC Card
	   2) Press "Copy to File..."
	      a) In the Welcome Page,         press Next
	      b) In the Export Private Key,   press Next
	      c) In the Export File Format,   press Next
	      d) Filename:                    c:\temp\cac                   # Windows will add the .cer extension to it for you
	      e) Press Next
	      f) Press Finish

	b. Download the 1st parent to c:\temp\parent1.cer:  DOD EMAIL CA-72
	   1) Double-Click on "DOD EMAIL CA-72"      (In the "Certificate Path", this is ABOVE you CAC Card)
	   2) Press "Details"
	   3) Press "Copy to File..."
	      a) In the Welcome Page,         press Next
	      b) In the Export Private Key,   press Next
	      c) In the Export File Format,   press Next
	      d) Filename:                    c:\temp\parent1                # Windows will add the .cer extension to it for you
	      e) Press Next
	      f) Press Finish

	c. Download the 1st parent to c:\temp\parent2.cer:   DoD Root CA 6
	   1) Double-Click on "DoD Root CA 6"
	   2) Press "Details"
	   3) Press "Copy to File..."
	      a) In the Welcome Page,         press Next
	      b) In the Export Private Key,   press Next
	      c) In the Export File Format,   press Next
	      d) Filename:                    c:\temp\parent2                # Windows will add the .cer extension to it for you
	      e) Press Next
	      f) Press Finish


 5. Open a terminal and import these cer files
	terminal> cd c:\temp
	terminal> gpgsm --import parent2.cer
	terminal> gpgsm --import parent1.cer
	terminal> gpgsm --import cac.cer


 6. Download & Import the cer file for your CAC certificate
    a. Get the url to download the CER file
       terminal> openssl x509 -in cac.cer -text | findstr "CA Issuers"
					...
					CA Issuers - URI:http://crl.disa.mil/sign/DODEMAILCA_72.cer
					...                            ^
                                                   |
                                                   |
    b. Copy the url after URI:            Copy this URL starting from http://


	b. Download that cer file
	   terminal> curl -O http://crl.disa.mil/sign/DODEMAILCA_72.cer

	c. Import that cer file
	   terminal> gpgsm --import DODEMAILCA_72.cer


 7.	Restart the GPG agent
	terminal> gpgconf --kill all




Part 6 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 1. Insert your CAC into your card reader

 2. Open the Certificate Manager
    a. In Windows, search for "manage user certificates"
    b. Run "Manage User Certificates"

 3. In the Certificate Manager App, run these steps:
    a. Expand Personal -> Certificates
    b. Make the window wider -- so you can see the columns
    c. Sort by "Expiration Date"
       -- You should see your 3 certificates (from your CAC)
       -- Of your 3 certificates (from your CAC), look for the CAC that has the expiration date in the future -- probably April 2025

    d. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

    e. Click on the "Details" of your CAC Certificate

    f. Scroll Down in the list until you see Thumbprint

    g. Copy the Thumbprint value from the **BOTTOM** of this popup
       -- This is your user.signingkey


 4. Tell Git to use your certificate for this *ONE PROJECT ONLY*
    a. Set the signing key for YOUR project
       terminal> cd ideaProjects\bogus
   	   terminal> git config --local user.signingkey <THE ID FROM THUMBPRINT>

    c. Add these remaining settings
  	   terminal> git config --local gpg.format x509
       terminal> git config --local gpg.x509.program smimesign
	   terminal> git config --local commit.gpgsign true

 5. Run this command to set your user.email
    terminal> git config --local user.email john.smith@zztop.com

 6. Run this command to set your git name
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"

 7. Verify that these values are set
    terminal> git config --local --list | sort

    You should see:
      commit.gpgsign=true
      ...
      gpg.format=x509
      gpg.x509.program=smimesign
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith
      user.signingkey=123456789123456789



Part 7 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Open a terminal

 2. Run these commands:
    terminal> cd ideaProjects\bogus
    terminal> git checkout -b YOUR_INITIALS/test

 3. Make a change to the README.med
    terminal> echo "hi" >> README.md

 4. Attempt to commit the change
    terminal> git commit -a -m "Test Commit"
    -- You should be prompted to enter your CAC pin

 5. Enter your PIN
    -- After entering your pin, the commit should be accepted

 6. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!



 6. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 8 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number you used for the your user.signingkey
	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md

 5. Do a commit and push
    -- It will prompt you for your PIN

 6. Enter your PIN
    -- After entering your pin, the commit should be accepted




Part 9 / Verify that your branch has "Verified" next to your commits in the history
-----------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

