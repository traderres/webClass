How to Sign Commits with a CAC (on Windows 10)
----------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC

Assumptions
 A) You have git for windows installed


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/



Part 1 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    a. Go to https://www.gpg4win.org/download.html
    b. Press $0
    c. Press "USD"
    c. Press "Download"
       *OR*
       Go to https://files.gpg4win.org/gpg4win-4.3.1.exe

    e. Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
    b. For the "Installer Language"
       -- Use the default of "English"
       -- Press OK
	c. For the "Welcome" page
	   -- Press "Next"
	d. For the "Choose Components" page
	   -- Use the defaults
	   -- Press "Next"
	e. For the "Install Location" page
	   -- Destination Folder:  c:\tools\gpg4win
	   -- Press "Install"
    f. In the "Installation Complete" page
       -- Press "Next"
    g. In the "Completing Gpg4win Setup"
       -- Uncheck "Run Kleopatra"
       -- Press "Finish"


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 2 / Download & Install smimesign
-------------------------------------
 1. Go to https://github.com/github/smimesign/releases/tag/v0.2.0-rc1

 2. Download smimesign-windows-v0.2.0-rc1.exe
    -- Save it to your Downloads/ directory

 3. Run smimesign-windows-v0.2.0-rc1.exe
    a. Press "Install anyway"

    b. In the "License Agreement" page
       -- Press "I accept the agreement"
       -- Press "Next"

    c. In the "Select Destination Location"
       -- Set it to c:\tools\smimesign
       -- Press "Next"

    d. In the "Completing the setup"
       -- Press "Finish"


 4. Create a user environment
    a. In windows, search for edit environment
    b. Select "Edit environment variables for your account"
    c. In the top, press "New..."
       Variable name:      smimesign
       Variable value:     c:\tools\smimesign
    d. Press "OK" a few times


 5. Verify that it's in your path
    a. Open a new terminal
    b. Run these commands:
       terminal> smimesign --version

       You should see this:
         v0.2.0-rc1




Part 3 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/core-admin
    b. Press "Code"
    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

   5. Run the git clone command using your access token
      a. Open a terminal
      b. In the terminal run these commands
         terminal> cd c:\tools\projects    # or whereever your projects are stored
         terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL



Part 3 / Get the ID of your CAC Digital Signature
-------------------------------------------------
 1. Insert your CAC
	a. Enter your CAC PIN
	b. Press the Consent button
	c. Press "Accept"
		-- Verify that the IL5 items appear in the appgate SDP

 2. Open the Certificate Manager
    a. In Windows, search for "manage user certificates"
    b. Run Manage User Certificates

 3. In the Certificate Manager App, run these steps:
    a. Expand Personal -> Certificates
    b. Sort by "Expiration Date"
       -- So, the most recent certificates are on the bottom
       -- You should see your 3 certificates (from your CAC)

    c. Double-click on your CAC cert that has an "Intended Purpose" of "Secure Email, Document Signing"

	d. Click on "Certificate Path"
		-- You should see something like this
			CertPath Bridge CA - G3
				Federal Bridge CA G4
					DoD Interoperability Root CA 2
						DoD Root CA 6
							DOD EMAIL CA-72
								YOUR CAC INFORMATION


	e. Double-click on your CAC Cert
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\cac
	   6) Press Finish
	   7) Press OK


	f. Double-Click on the cert DOD EMAIL CA-72
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\parent1
	   6) Press Finish
	   7) Press OK

	g. Double-Click on the cert  DoD Root CA 6
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\parent2
	   6) Press Finish
	   7) Press OK

	h. Double-Click on the cert  DoD Interoperability Root CA 2
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\parent3
	   6) Press Finish
	   7) Press OK

	i. Double-Click on the cert Federal Bridge CA G4
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\parent4
	   6) Press Finish
	   7) Press OK

	j. Double-Click on the cert CertPath Bridge CA - G3
	   1) Press "Details"
	   2) Press "Copy to File..."
	   3) In the Welcome Page, press Next
	   4) In the Select Format, use the defaults DER encoded binary, press "Next"
	   5) Filename:   c:\temp\parent5
	   6) Press Finish
	   7) Press OK


 6. Open a terminal and import these cer files
    terminal> cd c:\temp
    terminal> gpgsm --disable-crl-check --import parent1.cer
    terminal> gpgsm --disable-crl-check --import parent2.cer
    terminal> gpgsm --disable-crl-check --import parent3.cer
    terminal> gpgsm --disable-crl-check --import parent4.cer
    terminal> gpgsm --disable-crl-check --import parent5.cer
    terminal> gpgsm --disable-crl-check --import cac.cer

	Restart the GPG agent
    terminal> gpgconf --kill all


 7. Startup Klepatra
    -- Tell it to trust your CAC




Part 4 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 1. Verify that gpgsm can see the secret key for your CAC
	terminal> gpgsm --list-secret-keys

		You should see this:
					   ID: 0x7BC333D5
					  S/N: 087594
					(dec): 554388
				   Issuer: /CN=DOD EMAIL CA-72/OU=PKI/OU=DoD/O=U.S. Government/C=US
				  Subject: /CN=RESNICK.ADAM.LAWRENCE.1511651901/OU=CONTRACTOR/OU=PKI/OU=DoD/O=U.S. Government/C=US
					  aka: adam.l.resnick.ctr@mail.mil
				 validity: 2024-08-02 00:00:00 through 2025-04-17 23:59:59
				 key type: rsa2048
				key usage: digitalSignature nonRepudiation
			ext key usage: emailProtection (suggested), ms-documentSigning (suggested)
				 policies: 2.16.840.1.101.2.1.11.42:N:
				 sha1 fpr: 16:B2:9B:06:F3:82:86:81:E7:E8:95:F0:9C:EB:E3:8B:7B:C3:33:D5
				 sha2 fpr: A1:F0:92:13:25:E0:BD:92:5E:38:91:3B:AE:C1:1B:C3:3B:19:3C:3F:13:AE:B3:41:59:63:6B:C5:11:4E:33:5A
				 card s/n: D276000124011150313138F4114D1111


 2. Finish configuring git for YOUR PROJECT
    terminal> cd c:\tools\projects\my-project
	terminal> git config --local user.signingkey <THE THUMBRPRINT ID>
	terminal> git config --local gpg.x509.program c:\tools\GnuPG\bin\gpgsm.exe
	terminal> git config --local commit.gpgsign true

 2. Run this command to set your user.email
    terminal> git config --local user.email john.smith@zztop.com

 3. Run this command to set your git name
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"

 4. Verify that these values are set
    terminal> git config --local --list | sort

    You should see:
      gpg.program=c:\tools\smimesign\smimesign.exe
      gpg.format=x509
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith




Part 5 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Open a terminal

 2. Run these commands:
    terminal> cd c:\tools\projects\bogus
    terminal> git checkout -b YOUR_INITIALS/test

 3. Make a change to the README.med
    terminal> echo "hi" >> README.md

 4. Attempt to commit the change
    terminal> git commit -a -m "Test Commit"

    -- You should be prompted to enter your CAC pin

 5. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test

    -- Verify that this works

 6. Look at the signature in the log
    terminal> git log --show-signature

    You should see
    	smimesign:  Signature made using certificate ID.....
    	smimesign:  Good signature from "CN=......"
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 6 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked

 4. Make a change in IntelliJ to the README.md

 5. Do a commit and push
    -- It will prompt you for your PIN
	-- Verify that the push works

