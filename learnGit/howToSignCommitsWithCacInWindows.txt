How to Sign Commits with a CAC (on Windows 10)
----------------------------------------------
Problem:  My Gitlab environment requires me to sign commits with a CAC

Assumptions
 A) You have git for windows installed


References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-cac/



Part 1 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    a. Go to https://www.gpg4win.org/download.html
    b. Press $0
    c. Press "USD"
    c. Press "Download"
       *OR*
       Go to https://files.gpg4win.org/gpg4win-4.3.1.exe

    e. Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
    b. For the "Installer Language"
       -- Use the default of "English"
       -- Press OK
	c. For the "Welcome" page
	   -- Press "Next"
	d. For the "Choose Components" page
	   -- Use the defaults
	   -- Press "Next"
	e. For the "Install Location" page
	   -- Destination Folder:  c:\tools\gpg4win
	   -- Press "Install"
    f. In the "Installation Complete" page
       -- Press "Next"
    g. In the "Completing Gpg4win Setup"
       -- Uncheck "Run Kleopatra"
       -- Press "Finish"


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 2 / Clone the IL5 Project
------------------------------
 1. Turn on appgate

 2. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il5.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il5.dso.mil/platform-one/products/DCSA/ni2/core-admin
    b. Press "Code"
    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

   5. Run the git clone command using your access token
      a. Open a terminal
      b. In the terminal run these commands
         terminal> cd c:\tools\projects    # or whereever your projects are stored
         terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL




Part 3 / Download & Install smimesign
-------------------------------------
 1. Go to https://github.com/github/smimesign/releases/tag/v0.2.0-rc1

 2. Download smimesign-windows-v0.2.0-rc1.exe
    -- Save it to your Downloads/ directory

 3. Run smimesign-windows-v0.2.0-rc1.exe
    a. Press "Install anyway"

    b. In the "License Agreement" page
       -- Press "I accept the agreement"
       -- Press "Next"

    c. In the "Select Destination Location"
       -- Set it to c:\tools\smimesign
       -- Press "Next"

    d. In the "Completing the setup"
       -- Press "Finish"

 4. Create a user environment
    a. In windows, search for edit environment
    b. Select "Edit environment variables for your account"
    c. In the top, press "New..."
       Variable name:      smimesign
       Variable value:     c:\tools\smimesign
    d. Press "OK" a few times

 5. Create a system environment variable
    a. In windows, search for edit system
    b. Select "Edit the system variables"
    c. Press "Environment Variables"
    d. On the *BOTTOM*
       -- Double click on your Path variable
       -- Press "New"
       -- Insert this value:  c:\tools\smimesign
    e. Press "OK"
    f. Press "OK"
    g. Press "OK"

 6. Verify that it's in your path
    a. Open a new terminal
    b. Run these commands:
       terminal> smimesign --version

       You should see this:
         v0.2.0-rc1



Part 4 / Get the ID of your CAC Digital Signature
-------------------------------------------------
 1. Insert your CAC

 2. Get the serial number used for digital signatures
    a. In Windows, search for "manage user certificates"
    b. Run Manage User Certificates

 3. In the Certificate Manager App
    a. Expand Personal -> Certificates
    b. Sort by "Expiration Date"
       -- So, the most recent certificates are on the bottom
       -- You should see your 3 certificates (from your CAC)

    c. Look at the certificate that has an "Intended Purpose" of "Secure Email, Digital Signing"
       -- Double-click on that cert  (that is the cert used for your digital signature)

    d. Click on Details

    e. Copy the serial number
       NOTE:  You should be able to copy it from the lower part of this "Details" popup
       -- Paste it in a file somewhere.  We will need it later


 4. Use smimesign to get the ID of your CAC Digital signature
    a. Open a new terminal
    b. In the terminal, run these commands:
       terminal> smimesign â€“-list-keys

    c. Look for the group that has your serial number
       NOTE:  The listing may strip off leading zeros
              If your serial number is 012345
              Then, you are looking for
                  ID:  123456789123456789123456789         <-- This is your CAC user.signingkey
                 S/N:  12345

    d. Copy the ID above that serial number


Part 4 / Configure Git to use your signing key/email address/full name
----------------------------------------------------------------------
 1. Tell Git to use that serial number for this project
    terminal> cd c:\tools\projects\my-project
    terminal> git config --local user.signingkey 123456789123456789123456789

 2. Run this command to set your user.email
    terminal> git config --local user.email john.smith@zztop.com

 3. Run this command to set your git name
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"

 4. Run this command to tell Git where to find the gpg command
    terminal> git config --local gpg.x509.program c:\tools\smimesign\smimesign.exe
    terminal> git config --local gpg.format x509
	terminal> git config --local commit.gpgsign true

 5. Verify that these values are set
    terminal> git config --list | sort

    You should see:
      gpg.program=c:\tools\smimesign\smimesign.exe
      gpg.format=x509
      ....
      user.email=john.smith@zztop.com
      user.name=John Smith




Part 5 / Try your first git commit signing w/cac from command-line
------------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project

 3. Make sure git is *NOT* configured to use the GPG key
    a. Pull File -> Settings
    b. Search for gpg
    c. Press "Configure GPG Key..."
    d. In the popup
        -- Uncheck "Sign with GPG Key"
        -- Press OK

 4. Create a new branch
    a. In IntelliJ, open the above project
       terminal> git checkout -b test2

 5. Make a change to the README.md

 6. Close IntelliJ

		 !!!!DO THE NEXT STEP FROM COMMAND-LINE!!!!

 7. Do the commit from *COMMAND LINE*  (so you can tell Git to *TRUST* this)
    terminal> cd c:\tools\projects\my-project
    terminal>
    terminal> git commit -a -m "This is a test"

    a. You will be prompted:
       "Do you ultimately trust....."
       -- Select "YES"

	b. You will be prompted:
	   Please verify that the certified identified has the finger print
	   -- Select "Correct"



Part 6 / Try your first git commit signing w/cac from intelliJ
--------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- It should show the same key as the variable above

 4. Make a change in IntelliJ to a file
 5. Do a commit and push
    -- It will prompt you for your PIN





