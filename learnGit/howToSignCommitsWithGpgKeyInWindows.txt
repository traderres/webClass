How to Sign Commits with a Generated GPG Key in Windows
-------------------------------------------------------
Problem:  My Gitlab environment requires me to use a GPG key to sign commits
Solution: Create a GPG key, add it to your account, and associate your GPG key with Git

References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-gpg/




Part 1 / Make sure you have a Git 2.47 or later
-----------------------------------------------
 1. Create this directory:  c:\temp

 2. Verify that git is not too old
    a. Open a terminal
       terminal> git --version
       git version 2.47.0.windows.2               # WARNING:  These procedures definitely worked with git 2.47.0
                                                  #           (They might not work with an OLDER version of git)

    If the git version is **OLDER** than 2.47.0, then upgrade
       	1) Uninstall your old Git version / Use the Windows Control Panel -> Uninstall Git For Windows
    	2) Download a newer version of git
    	   Go to https://github.com/git-for-windows/git/releases/download/v2.47.0.windows.2/Git-2.47.0.2-64-bit.exe
		   *OR*
    	   Go to https://gitforwindows.org/
    	   Press the "Download" button

    	3) Run the "Git for Windows" installer (you just downloaded) / Git-2.47.0.2-64-bit.exe
		   In the Select Destination Folder,              Use defaults and press "Next"
		   In the Select Components popup,                Use defaults and press "Next"
		   In the Start Menu popup,                       Use defaults and press "Next"
		   In the Choose Default Editor,                  Use defaults and press "Next"
		   In the Adjusting name of initial branch,       Use defaults and press "Next"
		   In the Adjusting Path environment,             Use defaults and press "Next"
		   In the Choosing SSH executable,                Use defaults and press "Next"    (Use bundled OpenSSH)
		   In the Choosing HTTPS transport backend,       Use defaults and press "Next"    (Use the OpenSSL library)
		   In the Configuring the line ending conversion, Use defaults and press "Next"    (core.autocrlf is true)
		   In the Configuring Terminal Emulator,          Use defaults and press "Next"    (Use MinTTY)
		   In the Choose behavior of "Git Pull",          Use defaults and press "Next"    (fast-forward or merge)
		   In the Choose a Credential Helper,             Use defaults and press "Next"    (Git Credential Manager)
		   In the Configuring extra options,              Use defaults and press "Next"    (Enable file system caching)
		   In the Configuring experimental options,       Press "Install"
		   In the Completing the Git Setup Wizard,        Uncheck all  and press "Finish"




Part 2 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    Go to https://files.gpg4win.org/gpg4win-4.3.1.exe
    *OR*
    a. Go to https://www.gpg4win.org/download.html
    b. Press the Download Icon
    c. Press $0
    d. Press "USD"
    e. Press "Download"
       *OR*

     Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
	   In the "Installer Language",              Use defaults and press "OK"   (English)
       In the "Welcome" page,                    Use defaults and press "Next"
       In the "Choose Components" page,          Use defaults and press "Next"
       In the "Choose Install Location" page,    Set the path to c:\tools\gpg4win           ## THIS IS NOT THE DEFAULT SETTING!!!!!!
       In the "Installation Complete" page,      Use defaults and press "Next"
       In the "Completing gpg4win Setup" page,   Use defaults and press "Finish"

	b. Close Kleopatra
	   -- We will not need it for these procedures to work


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2




Part 3 / Create the GPG key
---------------------------
 1. Open a new terminal

 2. Generate the key pair
    terminal> gpg --full-gen-key


 3. Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
    (14) Existing key from card

	-- Enter 1 for RSA and RSA (default)


 4. RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048)

    -- Enter 4096


 5. Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years

    -- Enter 5y (so the key expires in 5 years)


 6. Key expires at Sat 20 Oct 2029 10:45:50 AM EDT
    Is this correct? (y/N)

	-- Enter Y



 7. GnuPG needs to construct a user ID to identify your key.
    Real Name:  John Smith

 8. Email Address:   john.smith@zztop.com

 9. Comment:  my gpg key

10. You selected this USER-ID:
      "John Smith (my gpg key) <john.smith@zztop.com>"
      Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?

    -- Enter O  (which is short for Okay)


11. Enter passphrase (first time)
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"


12. Enter passphrase (second time)
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"



	You will see this output
	------------------------
	gpg: key D832634BCB4D7494 marked as ultimately trusted
	gpg: revocation certificate stored as '/home/YOUR_ACCOUNT/.gnupg/openpgp-revocs.d/26C7A241D4AB535BEBDDDEA6D832634BCB4D7494.rev'
	public and secret key created and signed.

	pub   rsa4096 2024-10-21 [SC] [expires: 2029-10-20]
		  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
	uid                      John Smith (my gpg key) <john.smith@zztop.com>
	sub   rsa4096 2024-10-21 [E] [expires: 2029-10-20]





Part 4 / Add the GPG public key to your Gitlab account
------------------------------------------------------
 1. Get the public certificate
    a. List the GPG keys (associated with this email address)
 	   terminal> gpg --list-secret-keys --keyid-format LONG

		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]
					         ^
					         |
					         +---------- This is the ID

    b. Use the ID to show the public key
       terminal> gpg --armor --export ID

       *OR*

       terminal> gpg --armor --export DDA2D531A0D8A038


      You should see:
     	 -----BEGIN PGP PUBLIC KEY BLOCK-----
		XAokw8iBMvFMR54hCzz3/P7NFb8GJ2sWp7EUC6tPbhIePLrc9yGZGQo2arFIFC34
		sYZkRuTZT3S3dWYE8dp6ZKTirLWbCUCf5uX13JJpzBMmqDQY6cZMDSsx+rNqMMYU
		VKZddlV43m2iJoI7oTv2zH2AYJ/YVNjkKLRhjkjIqW9QcXCJATpXrLChWHv0L2R/
		5LufjM3g12h8qAomO6ymfL8szdmBYQ==
		=Szrm
		-----END PGP PUBLIC KEY BLOCK-----


 2. Copy the PGP public key (including the top and bottom lines)

 3. Tell Gitlab to trust this gpg key
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select GPG Keys.
    e. Press Add new key.
    f. In the GPG Keys page,
       -- Paste in your public key.
       -- Press "Add key"




Part 5 / Clone the IL2 Project that requires a GPG key for commit signing
-------------------------------------------------------------------------
 1. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il2.dso.mil/platform-one/products/DCSA/bogus
       Click on your project -- e.g., reference-app

    b. Press "Code"

    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

 5. Run the git clone command using your access token
    a. Open a terminal
    b. In the terminal run these commands
       terminal> cd c:\tools\projects         # or where ever your projects are stored
       terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL





Part 6 / Tell your Git project to use GPG keys for commits
----------------------------------------------------------
 1. List the GPG keys (associated with this email address)
 	terminal> gpg --list-secret-keys --keyid-format LONG

                           +------------ This is the private key id
                           |
                           V
		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]


 2. Copy the GPG private key ID that starts with sec  -- e.g., D832634BCB4D7494

 3. Run this command to configure Git to sign your commits with your key,
    replacing <KEY ID> with your GPG key ID:

    terminal> cd c:\tools\projects\bogus
    terminal> git config --local user.signingkey <KEY ID>
    terminal> git config --local user.signingkey D832634BCB4D7494

 4. Run this command to set your user.email / This is needed for the commits to appear as "Verified"
    terminal> git config --local user.email john.smith@zztop.com

 5. Tell git what your full name should be
    NOTE:  Use double quotes  (not apostrophes!!!)
    terminal> git config --local user.name "John Smith"

 6. Run this command to tell Git where to find the gpg command
    terminal> git config --local gpg.program c:\tools\GnuPG\bin\gpg.exe
    terminal> git config --local commit.gpgsign true


 7. Verify those git settings are set
    terminal> git config --list --local | sort

    You should see:
    	commit.gpgsign=true
    	...
    	gpg.program=c:\tools\GnuPG\bin\gpg.exe
    	....
      	user.email=john.smith@zztop.com
      	user.name=John Smith
      	user.signingkey=D832634BCB4D7494



Part 7 / Try your first git commit signing w/GPG key from command-line
----------------------------------------------------------------------
 1. Open a terminal

 2. Run these commands:
    terminal> cd ideaProjects\bogus
    terminal> git checkout -b YOUR_INITIALS/test

 3. Make a change to the README.med
    terminal> echo "hi" >> README.md

 4. Attempt to commit the change
    terminal> git commit -a -m "Test Commit"

 5. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 6. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
		gpg: Signature made 11/17/24 15:18:59 Eastern Standard Time
		gpg:                using RSA key 129F9A2322358BA0655F6D580A46A
		gpg: Good signature from "<FULL NAME> (my gpg key) <EMAIL ADDRESS>" [ultimate]
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit



Part 8 / Try your first git commit signing w/GPG key from intelliJ
------------------------------------------------------------------
 1. Startup IntelliJ

 2. Open the above project (bogus)

 3. Verify that the GPG key is configured for you in IntelliJ
    a. Pull File -> Settings -> Version Control -> Git
    b. Press "Configure GPG Key"
       -- It should be checked
       -- You should see the same long number / Your full name / my gpg key / your email address
	c. Press "Cancel"

 4. Make a change in IntelliJ to the README.md

 5. Do a commit and push
 	-- Set the message as "test commit 2"

	-- Verify it works without error



Part 9 / Verify that your branch has "Verified" next to your commits in the Gitlab history
------------------------------------------------------------------------------------------
 1. Open a browser
    Go to https://code.il2.dso.mil/platform-one/products/DCSA/bogus

 2. On the left, Choose Code -> Branches

 3. Click on your branch

 4. Press History

 5. You should see "Verified" next to your commits

 6. Click on "Verified"




Part 10 / Create a batch script to setup Git GPG Signing on a SINGLE PROJECT  (setupProjectForIl2.bat)
------------------------------------------------------------------------------------------------------
 1. Open a terminal
    NOTE:  I chose this directory because it should ALREADY BE in your PATH
    terminal> c:\progra~1\notepad++\notepad++  C:\tools\GnuPG\bin\setupProjectForIl2.bat

    Notepad++ will prompt you to create this file
    -- Press "Yes"


 2. Copy this to your text editor
		@echo off

		REM ** Clear existing IL2 or IL5 settings
		git config --local --unset commit.gpgsign
		git config --local --unset gpg.program
		git config --local --unset gpg.format
		git config --local --unset gpg.x509.program
		git config --local --unset user.email
		git config --local --unset user.name
		git config --local --unset user.signingkey

		REM ** Setup this git project for GPG signing of commits
		git config --local commit.gpgsign true
		git config --local gpg.program c:\tools\GnuPG\bin\gpg.exe
		git config --local user.email john.smith@zztop.com
		git config --local user.name "John Smith"
		git config --local user.signingkey <THE ID FROM THUMBPRINT>

 		git config --list --local | sort
 		echo.
		echo Finished configuring git for IL2 / GPG signing of commits


 3. Update this script with **YOUR** user.signingkey / email address / full name

    a. You can get your user.signing key by running this command:
       terminal> gpg --list-secret-keys --keyid-format LONG

                               +------------ This is the private key id
                               |
                               V
    		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
    			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
    		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
    		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]



    b. Save the batch script


 4. Clone the bogus2 project
    terminal> cd c:\tools\ideaProjects      # or the specific directory where you STORE all of your projects
    terminal> git clone git clone https://123456:ABCDEFGHIJKLMNOPQRSTUV@code.il2.dso.mil/platform-one/products/DCSA/ni2/bogus2.git

 5. Apply the script to this project (to setup GPG-signing of commits)
    terminal> cd bogus2
    terminal> setupProjectForIl2

 6. Verify that this project is configured for GPG signing
    a. Create a new branch
       terminal> git checkout -b YOUR_INITIALS/test1

	b. Make a change to the README.med
       terminal> echo "hi" >> README.md

	c. Attempt to commit the change
       terminal> git commit -a -m "Test Commit"

 7. Attempt to push the commit up
    terminal> git push --set-upstream origin YOUR_INITIALS/test
    -- Verify that you see no errors!!!!

 8. Look at the signature in the log
    terminal> git log --show-signature

    You should "Good made using certificate ID...."
    	commit dc9c259b72b8ceb4243c98b946d0d0b3965bd430 (HEAD -> js/my-branch-name, origin/js/my-branch-name)
		gpg: Signature made 11/17/24 15:18:59 Eastern Standard Time
		gpg:                using RSA key 129F9A2322358BA0655F6D580A46A
		gpg: Good signature from "<FULL NAME> (my gpg key) <EMAIL ADDRESS>" [ultimate]
    	Author		<Your full name> <Your email address>
    	Date:		<Today's Date>

    		Test Commit




How to Delete all of your GPG keys
----------------------------------
 1. List the keys
    terminal> gpg --list-keys

 2. Delete the private key *FIRST*
    terminal> gpg --delete-secret-key "JOHN SMITH"         # Delete the private key

      Delete this key from the keyring?   Y

 3. Delete the public key *SECOND*
    terminal> gpg --delete-key "JOHN SMITH"

 4. Verify that the key is gone by listing the keys
    terminal> gpg --list-keys

