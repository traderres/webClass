How to Sign Commits with a Generated GPG Key in Windows
-------------------------------------------------------
Problem:  My Gitlab environment requires me to use a GPG key to sign commits
Solution: Create a GPG key, add it to your account, and associate your GPG key with Git

References
----------
https://p1docs.dso.mil/docs/party-bus/mission-devops-mdo/how-tos/gitlab/commit-signing-with-gpg/


Part 1 / Download & Install Gpg4win
-----------------------------------
 1. Download gpg4win v4.3.1
    a. Go to https://www.gpg4win.org/download.html
    b. Press $0
    c. Press "USD"
    c. Press "Download"
       *OR*
       Go to https://files.gpg4win.org/gpg4win-4.3.1.exe

    e. Save gpg4win-4.3.1.exe to your Downloads/ directory


 2. Install gpg4win
    a. Run gpg4win-4.3.1.exe
    b. For the "Installer Language"
       -- Use the default of "English"
       -- Press OK
	c. For the "Welcome" page
	   -- Press "Next"
	d. For the "Choose Components" page
	   -- Use the defaults
	   -- Press "Next"
	e. For the "Install Location" page
	   -- Destination Folder:  c:\tools\gpg4win
	   -- Press "Install"
    f. In the "Installation Complete" page
       -- Press "Next"
    g. In the "Completing Gpg4win Setup"
       -- Uncheck "Run Kleopatra"
       -- Press "Finish"


 3. Verify gpg is installed
    a. Open a new terminal

    b. In the terminal
       DOS> gpg --version

	   You should see something like this:
		   gpg (GnuPG) 2.4.5
		   libgcrypt 1.10.3
		   Copyright (C) 2024 g10 Code GmbH
		   License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
		   This is free software: you are free to change and redistribute it.
		   There is NO WARRANTY, to the extent permitted by law.

		   Home: C:\Users\johnsmith\AppData\Roaming\gnupg
		   Supported algorithms:
		   Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
		   Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
				   CAMELLIA128, CAMELLIA192, CAMELLIA256
		   Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
		   Compression: Uncompressed, ZIP, ZLIB, BZIP2






Part 2 / Create the GPG key
---------------------------
 1. Generate the key pair
    terminal> gpg --full-gen-key


 2. Please select what kind of key you want:
    (1) RSA and RSA (default)
    (2) DSA and Elgamal
    (3) DSA (sign only)
    (4) RSA (sign only)
    (14) Existing key from card

	-- Enter 1 for RSA and RSA (default)


 3. RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048)

    -- Enter 4096


 4. Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years

    -- Enter 5y (so the key expires in 5 years)


 5. Key expires at Sat 20 Oct 2029 10:45:50 AM EDT
    Is this correct? (y/N)

	-- Enter Y



 6. GnuPG needs to construct a user ID to identify your key.
    Real Name:  John Smith

 7. Email Address:   john.smith@zztop.com

 8. Comment:  my gpg key

 9. You selected this USER-ID:
      "John Smith (my gpg key) <john.smith@zztop.com>"
      Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?

    -- Enter O  (which is short for Okay)


10. Enter passphrase
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"


11. Enter passphrase
    a. Leave it blank
    b. Press OK
    c. Press "Yes, Protection is not needed"


	You will see this output
	------------------------
	gpg: key D832634BCB4D7494 marked as ultimately trusted
	gpg: revocation certificate stored as '/home/YOUR_ACCOUNT/.gnupg/openpgp-revocs.d/26C7A241D4AB535BEBDDDEA6D832634BCB4D7494.rev'
	public and secret key created and signed.

	pub   rsa4096 2024-10-21 [SC] [expires: 2029-10-20]
		  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
	uid                      John Smith (my gpg key) <john.smith@zztop.com>
	sub   rsa4096 2024-10-21 [E] [expires: 2029-10-20]






Part 2 / Add the GPG public key to your Gitlab account
------------------------------------------------------
 1. Get the public certificate
    a. List the GPG keys (associated with this email address)
 	   terminal> gpg --list-secret-keys --keyid-format LONG   <EMAIL ADDRESS>
	             gpg --list-secret-keys --keyid-format LONG  john.smith@zztop.com


		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]
					         ^
					         |
					         +---------- This is the ID

    b. Use the ID to show the public key
       terminal> gpg --armor --export ID

       *OR*

       terminal> gpg --armor --export DDA2D531A0D8A038


      You should see:
     	 -----BEGIN PGP PUBLIC KEY BLOCK-----
		XAokw8iBMvFMR54hCzz3/P7NFb8GJ2sWp7EUC6tPbhIePLrc9yGZGQo2arFIFC34
		sYZkRuTZT3S3dWYE8dp6ZKTirLWbCUCf5uX13JJpzBMmqDQY6cZMDSsx+rNqMMYU
		VKZddlV43m2iJoI7oTv2zH2AYJ/YVNjkKLRhjkjIqW9QcXCJATpXrLChWHv0L2R/
		5LufjM3g12h8qAomO6ymfL8szdmBYQ==
		=Szrm
		-----END PGP PUBLIC KEY BLOCK-----


 2. Copy the PGP public key (including the top and bottom lines)

 3. Tell Gitlab to trust this gpg key
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select GPG Keys.
    e. Press Add new key.
    f. In the GPG Keys page,
       -- Paste in your public key.
       -- Press "Add key"





Part 3 / Associate your GPG key with Git
----------------------------------------
 1. List the GPG keys (associated with this email address)
 	terminal> gpg --list-secret-keys --keyid-format LONG   <EMAIL ADDRESS>
	      gpg --list-secret-keys --keyid-format LONG  john.smith@zztop.com

                           +------------ This is the private key id
                           |
                           V
		sec   rsa4096/D832634BCB4D7494 2024-10-21 [SC] [expires: 2029-10-20]
			  26C7A241D4AB535BEBDDDEA6D832634BCB4D7494
		uid                 [ultimate] John Smith (my gpg key) <john.smith@zztop.com>
		ssb   rsa4096/DDA2D531A0D8A038 2024-10-21 [E] [expires: 2029-10-20]


 2. Copy the GPG private key ID that starts with sec  -- e.g., D832634BCB4D7494

 3. Run this command to configure Git to sign your commits with your key,
    replacing <KEY ID> with your GPG key ID:
    terminal> git config --global user.signingkey <KEY ID>
    terminal> git config --global user.signingkey D832634BCB4D7494

 4. Run this command to set your user.email
    ## This is needed for the commits to appear as "Verified" ##
    terminal> git config --global user.email john.smith@zztop.com

 5. Run this command to tell Git where to find the gpg command
    terminal> git config --global gpg.program c:\tools\GnuPG\bin\gpg.exe

 6. Verify those git settings are set
    terminal> git config --list | findstr user

    You should see:
      user.email=john.smith@zztop.com
      user.signingkey=D832634BCB4D7494



Part 4 / Clone the Project that requires a GPG key
--------------------------------------------------
 1. Generate an access token
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. On the left sidebar, select your avatar (to go to User Settings)
    c. Select Edit profile.
    d. Select Access tokens
    e. Press "Add new token"
    f. In the "Add a personal access token" page
       -- Token Name:              My silly access token
       -- Expiration Date:         <Set it to 1 year from yesterday>
       -- Check "read_repository"
       -- Check "write_repository"
       -- Press "Create personal access token"
    g. Copy the access token to your clipboard / copy & paste this token it into a temporary text file


 2. Get your userid
    a. On the left sidebar, select your avatar (to go to User Settings)
    b. Select Edit profile.
       -- Scroll Down
       -- You should see your userid / copy & paste it into a temporary text file


 3. Get the clone url
    a. Go to the project you wish to clone -- e.g., Get the clone url
       Go to https://code.il2.dso.mil/platform-one-/products/DCSA/reference-app
    b. Press "Code"
    c. Copy the "Clone with HTTPS" and paste this into a temporary text file


 4. Assemble the git clone command
    -- Assemble the pieces so your git clone command

                                Userid    Access Token
                                  |         |
                                  V         V
              git clone https://USERID:ACCESS_TOKEN@CLONE_URL
                                                       ^
                                                       |
                                                       |
                                                     If the url is https://www.stuff.com/my-site/stuff/stuff.git
                                                     then the CLONE_URL is www.stuff.com/my-site/stuff/stuff.git

   5. Run the git clone command using your access token
      a. Open a terminal
      b. In the terminal run these commands
         terminal> cd c:\tools\projects         # or where ever your projects are stored
         terminal> git clone https://USERID:ACCESS_TOKEN@CLONE_URL



Part 5 / Tell IntelliJ to sign commits with the GPG key
-------------------------------------------------------
 1. Open the above project with IntelliJ
 2. Pull File -> Settings
 3. Search for gpg
 4. Press "Configure GPG Key..."
 5. In the popup
    -- Check "Sign with GPG Key"
    -- Select your key (from the dropdown)
    -- Press OK



Part 6 / Try it out in IntelliJ
-------------------------------
 1. Create a new branch
    a. In IntelliJ, open a terminal
       terminal> git checkout -b test

 2. Make a change to any file

 3. Do a git push and commit
    -- Verify that it works

 4. Look at your branch's history / Make sure it says "Verified" next to your last commit
    a. Sign in to GitLab
       -- Go to https://code.il2.dso.mil/
    b. In Gitlab, go to your project
       -- Go to https://code.il2.dso.mil/platform-one/products/DCSA/reference-app
    c. On the left, choose Code -> Branches
    d. Click on your branch
    e. Press "History"
       -- Verify that you see "Verified" next to your commit





How to Delete all of your GPG keys
----------------------------------
 1. List the keys
    terminal> gpg --list-keys

 2. Delete the private key *FIRST*
    terminal> gpg --delete-secret-key "JOHN SMITH"         # Delete the private key

      Delete this key from the keyring?   Y

 3. Delete the public key *SECOND*
    terminal> gpg --delete-key "JOHN SMITH"

 4. Verify that the key is gone by listing the keys
    terminal> gpg --list-keys









